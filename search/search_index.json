{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#a-mais-completa-ferramenta-de-network-source-of-truth","title":"A mais completa ferramenta de Network Source of Truth","text":"<p>Warning</p> <p>There is no relation to Netbox Labs or its official repo's. It is just a effort to increase brazilian community base.</p> <p>If you are portuguese native speaker and was able to easily read this warning, I highly recommend you to continue read the Netbox Offial Docs in English! It will surely be more productive to your learning.</p> <p>Netbox \u00e9 a solu\u00e7\u00e3o lider para modelagem e documenta\u00e7\u00e3o das redes modernas. Combinando as disciplinas tradicionais de ger\u00eancia de endere\u00e7amento IP (IPAM) e gerenciamento de infraestrutura de datacenter (DCIM) com API e extens\u00f5es poderosas, NetBox fornece o \"source of truth\" (fonte de verdade) ideal para a automa\u00e7\u00e3o de rede. Continue lendo e descubra o porqu\u00ea de milhares de organiza\u00e7\u00f5es ao redor do mundo colocam o Netbox no cora\u00e7\u00e3o de suas infraestruturas.</p> <p></p>"},{"location":"#feito-para-redes-networks","title":"Feito para Redes (Networks)","text":"<p>Diferente de outros CMDBs (configuration management database), NetBox fez uma curadoria dos modelos de dados que prov\u00ea especificamente as necessidades dos engenheiros e operadores de rede. Entrega uma variedade de tipos de objeto cuidadosamente feito para melhor servir as necessidades do design de infraestrutura e documenta\u00e7\u00e3o. Essas caracter\u00edsticas cobrem todas as vertentes de das tecnologias de rede, desde gerenciamento de endere\u00e7os IP at\u00e9 cabeamento e overlays, e ainda mais: - Regi\u00f5es hier\u00e1rquicas, sites, e localiza\u00e7\u00f5es - Racks, dispositivos, e componentes de dispositivos - Cabos e conex\u00f5es wireless (Wi-Fi) - Mapeamento da distribui\u00e7\u00e3o de energia - M\u00e1quinas virtuais e clusters - Prefixos IP, ranges e endere\u00e7os - VRFs e route targets - Grupos FHRP (VRRP, HSRP, etc.) - N\u00fameros de AS (ASN) - VLANs e escopo de grupos de VLAN - L2VPN overlays - Atrela\u00e7\u00e3o de loca\u00e7\u00e3o (aluguel) - Gerencimento de contatos</p>"},{"location":"#customizavel-e-extensivel","title":"Customiz\u00e1vel e Extens\u00edvel","text":"<p>Em adi\u00e7\u00e3o ao seu modelo de dados robusto e extensivo, NetBox oferece uma grande quantidade de mecanismos que podem ser customizados e extendidos. Sua arquitetura robusta de plugins permite que os usu\u00e1rios extendam a aplica\u00e7\u00e3o para estar em conformidade com suas necessidades m\u00ednimas de esfor\u00e7o de desenvolvimento. - Custom fields (Campos Customizados) - Custom model validation (Valida\u00e7\u00e3o customizada de modelos de dados) - Export templates (Exporta\u00e7\u00e3o de templates) - Webhooks - Plugins - REST &amp; GraphQL APIs</p>"},{"location":"#sempre-aberto-opensource","title":"Sempre aberto (opensource)","text":"<p>Porque o NetBox \u00e9 uma aplica\u00e7\u00e3o open source licenciada pela Apache 2, seu c\u00f3digo fonte inteiro \u00e9 acess\u00edvel pelos usu\u00e1rios finais que utilizam o sistema e n\u00e3o existe risco algum de vendor lock-in. Al\u00e9m disso, o desenvolvimento do NetBox \u00e9 completamente p\u00fablico, movido pela comunidade, onde todos podem contribuir.</p>"},{"location":"#feito-em-python","title":"Feito em Python","text":"<p>Netbox \u00e9 feito pelo framework muito popular Django da linguagem Python, que j\u00e1 \u00e9 a linguagem favorita entre os engenheiros de rede. Usu\u00e1rios podem alavancar suas habilidades existentes de criar c\u00f3digo em Python para extender as j\u00e1 existentes funcionalidades do NetBox atrav\u00e9s de scripts customizados e plugins.</p>"},{"location":"#comecando-com-o-netbox","title":"Come\u00e7ando com o Netbox?","text":"<ul> <li>Se quer pular a instala\u00e7\u00e3o, experimente a vers\u00e3o demo dispon\u00edvel publicamente</li> <li>O guia de instala\u00e7\u00e3o lhe ajudar\u00e1 a fazer sua pr\u00f3pria instala\u00e7\u00e3o e torn\u00e1-la dispon\u00edvel (up and running)</li> <li>Ou tente a imagem Docker feita pela comunidade para uma abordagem \"low-touch\"</li> <li>NetBox Cloud \u00e9 uma solu\u00e7\u00e3o ofertada pela NetBox Labs</li> </ul> <p>Info</p>"},{"location":"#portugues","title":"Portugu\u00eas","text":"<p>Se voc\u00ea \u00e9 brasileiro ou nativo da l\u00edngua portuguesa e tem seguran\u00e7a, tanto com o portugu\u00eas quanto com o ingl\u00eas, n\u00e3o deixe de visitar o reposit\u00f3rio no GitHub e revisar os textos ou ainda traduzir o trabalho em andamento! Basta clonar o reposit\u00f3rio, fazer as devidas altera\u00e7\u00f5es e abrir uma Pull Request. Agrade\u00e7o desde j\u00e1!</p> <p>Se ainda quer contribuir de outra forma, ajudaria muito se pudesse virar um sponsor ou fazer uma contribui\u00e7\u00e3o individual clicando aqui!</p>"},{"location":"#english","title":"English","text":"<p>If you are english native speaker, but knows the portuguese language and feels comfortable to contribute, feel free to visit the github repository and review or translate the ongoing work! Just clone the repo and make the desired changes, then open a Pull Request for approval!</p> <p>Or maybe you would like to financially contribute to this project, it would be very helpful if you sponsor at any value using this link! Thank you already!</p>"},{"location":"introduction/","title":"Introdu\u00e7\u00e3o ao NetBox","text":"<p>NetBox foi originalmente desenvolvido pelo seu mantenedor principal, Jeremy Stretch, enquanto ele estava trabalhando como engenheiro de rede na DigitalOcean em 2015 como parte de um esfor\u00e7o para automatizar o provisionamento de rede. Reconhecendo o potencial da nova ferramenta, DigitalOcean concordou em lan\u00e7ar o projeto como open source em Junho de 2016.</p> <p>Desde ent\u00e3o, milhares de organiza\u00e7\u00f5es pelo mundo come\u00e7aram a utilizar o NetBox como centro de fonte de verdade da rede (network source of truth) para ajudar e empoderar ambos operadores de redes e automa\u00e7\u00e3o, em geral. hoje, o projeto open source \u00e9 administrado pela NetBox Labs e um time de mantenedores volunt\u00e1rios. Al\u00e9m do produto principal, v\u00e1rios plugins foram desenvolvidos pela comunidade para melhorar e expandir as fun\u00e7\u00f5es existentes do NetBox.</p>"},{"location":"introduction/#principais-caracteristicas-e-funcoes","title":"Principais caracter\u00edsticas e fun\u00e7\u00f5es","text":"<p>NetBox foi criado especificamente para servir as necessidades dos engenheiros e operadores de rede. Abaixo est\u00e1 uma breve lista das principais fun\u00e7\u00f5es que existem no sistema. - Gerenciamento de endere\u00e7amento de IP (IPAM) com paridade completa entre IPv4 e IPv6 - Provisionamento autom\u00e1tico do pr\u00f3ximo endere\u00e7o IP dispon\u00edvel - VRFs com importa\u00e7\u00e3o &amp; exporta\u00e7\u00e3o de route targets - VLANs com grupos de escopos vari\u00e1veis - Gerenciamento de ASN (AS number) - Altura de rack com renderiza\u00e7\u00e3o em SVG - Modelagem de dispositivos utilizando tipos de dispositivos pr\u00e9-definidos - Chassis virtuais e contextos de dispositivos - Rede, energia e cabeamento de console com restreamento via SVG - Modelagem de distribui\u00e7a\u00f5 de energia - Circuito de dados e rastreamento de fornecedor - Wireless LAN e links point-to-point - L2VPN overlays - Grupos FHRP (VRRP, HSRP, etc.) - Vincula\u00e7\u00e3o de aplica\u00e7\u00f5es e servi\u00e7os (porta tcp/udp com respectivo app) - M\u00e1quinas virtuais &amp; Clusters - Hierarquia flex\u00edvel para locais (sites) e localiza\u00e7\u00f5es (locations) - Atrela\u00e7\u00e3o de locat\u00e1rio respons\u00e1vel - Configura\u00e7\u00e3o de contextos para Dispositivo &amp; VM com intuito de realizar configura\u00e7\u00f5es avan\u00e7adas de renderiza\u00e7\u00e3o - Campos customizados para extender os modelos de dados existentes - Regras customizadas de valida\u00e7\u00e3o - Relat\u00f3rios customizados &amp; scripts execut\u00e1veis diretamente pela UI (User-Interface) - Framework completo para que plugins adicionem funcionalidades customizadas - Autentica\u00e7\u00e3o Single Sig-On (SSO) - Sistema de permiss\u00f5es robusto baseado em objetos - Change logging autom\u00e1tico e detalhado - Engine global de pesquisa - Integra\u00e7\u00e3o com NAPALM</p>"},{"location":"introduction/#o-que-o-netbox-nao-e","title":"O que o NetBox n\u00e3o \u00e9","text":"<p>Enquanto que o NetBox se esfor\u00e7a para cobrir muitas \u00e1res do gerenciamento de rede, o escopo de suas fun\u00e7\u00f5es \u00e9 necessariamente limitado. Isso garante que o desenvolvimento foque nas funcionalidades principais e que o escopo seja razoavelmente contido. Consequentemente, isso ajuda a explicar alguns *exemplos de funcionalidades que o NetBox n\u00e3o tem:</p> <ul> <li>Monitoramento de Rede</li> <li>Servidor DNS</li> <li>Servidor RADIUS</li> <li>Gerenciamento de configura\u00e7\u00e3o</li> <li>Gerenciamento de facilities (instala\u00e7\u00f5es)</li> </ul> <p>Dito isso, NetBox pode ser usado com certa facilidade para popular outras ferramentas externas com as informa\u00e7\u00f5es que estas mesmas precisam para funcionar.</p>"},{"location":"introduction/#filosofia-do-design","title":"Filosofia do Design","text":"<p>NetBox foi desenhado com os seguintes princ\u00edpios b\u00e1sicos fundamentais.</p>"},{"location":"introduction/#replicar-o-mundo-real","title":"Replicar o mundo real","text":"<p>Uma cuidadosa an\u00e1lise foi feita para que os modelos de dados replicassem redes do mundo real. Por exemplo, endere\u00e7os IP s\u00e3o atrelados n\u00e3o a dispositivos, mas interfaces espec\u00edficas deste dispositivo, e uma interface pode ter v\u00e1rios endere\u00e7os IP atrelados a ela, tamb\u00e9m.</p>"},{"location":"introduction/#servir-como-fonte-de-verdade-source-of-truth","title":"Servir como \"Fonte de Verdade\" (Source of Truth)","text":"<p>O NetBox tem a inte\u00e7\u00e3o de representar o estado da rede desej\u00e1vel ao inv\u00e9s de representar o estado operacional . Com isso, a importa\u00e7\u00e3o autom\u00e1tica da rede operacional \u00e9 fortemente desencourajada. Todos os dados criados pelo NetBox deveriam primeiro ter passado por um humano para assegurar sua integridade. O NetBox pode ent\u00e3o ser usado para popular sistemas de monitoramento e provisionamento com um alto n\u00edvel de confian\u00e7a e credibilidade.</p>"},{"location":"introduction/#manter-simples","title":"Manter simples","text":"<p>Quando estamos entre uma escolha relativamente simples que soluciona 80% do problema e outra que \u00e9 completa, por\u00e9m complexa, a primeira escolha ser\u00e1 normalmente favorecida e escolhida. Isso garante que tenhamos um c\u00f3digo limpo com uma linha de aprendizado pequena.</p>"},{"location":"introduction/#stack-da-aplicacao","title":"Stack da Aplica\u00e7\u00e3o","text":"<p>NetBox \u00e9 constru\u00eddo em cima do Django, um framework Python e utiliza o banco de dados PostgreSQL. Roda como um servi\u00e7o WSGI atr\u00e1s do servidor HTTP de sua escolha.</p> Fun\u00e7\u00e3o Componente Servi\u00e7o HTTP nginx ou Apache Servi\u00e7o WSGI gunicorn ou uWSGI Aplica\u00e7\u00e3o Django/Python Banco de Dados PostgreSQL 11+ Enfileiramento de tarefas Redis/django-rq Acesso a dispositivos NAPALM (opcional)"},{"location":"administration/error-reporting/","title":"Relat\u00f3rios de Erros","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"administration/error-reporting/#sentry","title":"Sentry","text":""},{"location":"administration/error-reporting/#enabling-error-reporting","title":"Enabling Error Reporting","text":"<p>NetBox v3.2.3 and later support native integration with Sentry for automatic error reporting. To enable this functionality, simply set <code>SENTRY_ENABLED</code> to True in <code>configuration.py</code>. Errors will be sent to a Sentry ingestor maintained by the NetBox team for analysis.</p> <pre><code>SENTRY_ENABLED = True\n</code></pre>"},{"location":"administration/error-reporting/#using-a-custom-dsn","title":"Using a Custom DSN","text":"<p>If you prefer instead to use your own Sentry ingestor, you'll need to first create a new project under your Sentry account to represent your NetBox deployment and obtain its corresponding data source name (DSN). This looks like a URL similar to the example below:</p> <pre><code>https://examplePublicKey@o0.ingest.sentry.io/0\n</code></pre> <p>Once you have obtained a DSN, configure Sentry in NetBox's <code>configuration.py</code> file with the following parameters:</p> <pre><code>SENTRY_ENABLED = True\nSENTRY_DSN = \"https://examplePublicKey@o0.ingest.sentry.io/0\"\n</code></pre>"},{"location":"administration/error-reporting/#assigning-tags","title":"Assigning Tags","text":"<p>You can optionally attach one or more arbitrary tags to the outgoing error reports if desired by setting the <code>SENTRY_TAGS</code> parameter:</p> <pre><code>SENTRY_TAGS = {\n    \"custom.foo\": \"123\",\n    \"custom.bar\": \"abc\",\n}\n</code></pre> <p>Reserved tag prefixes</p> <p>Avoid using any tag names which begin with <code>netbox.</code>, as this prefix is reserved by the NetBox application.</p>"},{"location":"administration/error-reporting/#testing","title":"Testing","text":"<p>Once the configuration has been saved, restart the NetBox service.</p> <p>To test Sentry operation, try generating a 404 (page not found) error by navigating to an invalid URL, such as <code>https://netbox/404-error-testing</code>. (Be sure that debug mode has been disabled.) After receiving a 404 response from the NetBox server, you should see the issue appear shortly in Sentry.</p>"},{"location":"administration/housekeeping/","title":"Housekeeping","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>NetBox includes a <code>housekeeping</code> management command that should be run nightly. This command handles:</p> <ul> <li>Clearing expired authentication sessions from the database</li> <li>Deleting changelog records older than the configured retention time</li> <li>Deleting job result records older than the configured retention time</li> <li>Check for new NetBox releases (if <code>RELEASE_CHECK_URL</code> is set)</li> </ul> <p>This command can be invoked directly, or by using the shell script provided at <code>/opt/netbox/contrib/netbox-housekeeping.sh</code>. This script can be linked from your cron scheduler's daily jobs directory (e.g. <code>/etc/cron.daily</code>) or referenced directly within the cron configuration file.</p> <pre><code>sudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping\n</code></pre> <p>Note</p> <p>On Debian-based systems, be sure to omit the <code>.sh</code> file extension when linking to the script from within a cron directory. Otherwise, the task may not run.</p> <p>The <code>housekeeping</code> command can also be run manually at any time: Running the command outside scheduled execution times will not interfere with its operation.</p>"},{"location":"administration/netbox-shell/","title":"The NetBox Python Shell","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>NetBox includes a Python management shell within which objects can be directly queried, created, modified, and deleted. To enter the shell, run the following command:</p> <pre><code>./manage.py nbshell\n</code></pre> <p>This will launch a lightly customized version of the built-in Django shell with all relevant NetBox models pre-loaded. (If desired, the stock Django shell is also available by executing <code>./manage.py shell</code>.)</p> <pre><code>$ ./manage.py nbshell\n### NetBox interactive shell (localhost)\n### Python 3.7.10 | Django 3.2.5 | NetBox 3.0\n### lsmodels() will show available models. Use help(&lt;model&gt;) for more info.\n</code></pre> <p>The function <code>lsmodels()</code> will print a list of all available NetBox models:</p> <pre><code>&gt;&gt;&gt; lsmodels()\nDCIM:\n  ConsolePort\n  ConsolePortTemplate\n  ConsoleServerPort\n  ConsoleServerPortTemplate\n  Device\n  ...\n</code></pre> <p>Warning</p> <p>The NetBox shell affords direct access to NetBox data and function with very little validation in place. As such, it is crucial to ensure that only authorized, knowledgeable users are ever granted access to it. Never perform any action in the management shell without having a full backup in place.</p>"},{"location":"administration/netbox-shell/#querying-objects","title":"Querying Objects","text":"<p>Objects are retrieved from the database using a Django queryset. The base queryset for an object takes the form <code>&lt;model&gt;.objects.all()</code>, which will return a (truncated) list of all objects of that type.</p> <pre><code>&gt;&gt;&gt; Device.objects.all()\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;,\n&lt;Device: TestDevice4&gt;, &lt;Device: TestDevice5&gt;, '...(remaining elements truncated)...']&gt;\n</code></pre> <p>Use a <code>for</code> loop to cycle through all objects in the list:</p> <pre><code>&gt;&gt;&gt; for device in Device.objects.all():\n...   print(device.name, device.device_type)\n...\n('TestDevice1', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice2', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice3', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice4', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice5', &lt;DeviceType: PacketThingy 9000&gt;)\n...\n</code></pre> <p>To count all objects matching the query, replace <code>all()</code> with <code>count()</code>:</p> <pre><code>&gt;&gt;&gt; Device.objects.count()\n1274\n</code></pre> <p>To retrieve a particular object (typically by its primary key or other unique field), use <code>get()</code>:</p> <pre><code>&gt;&gt;&gt; Site.objects.get(pk=7)\n&lt;Site: Test Lab&gt;\n</code></pre>"},{"location":"administration/netbox-shell/#filtering-querysets","title":"Filtering Querysets","text":"<p>In most cases, you will want to retrieve only a specific subset of objects. To filter a queryset, replace <code>all()</code> with <code>filter()</code> and pass one or more keyword arguments. For example:</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status=\"active\")\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;,\n&lt;Device: TestDevice8&gt;, &lt;Device: TestDevice9&gt;, '...(remaining elements truncated)...']&gt;\n</code></pre> <p>Querysets support slicing to return a specific range of objects.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status=\"active\")[:3]\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;]&gt;\n</code></pre> <p>The <code>count()</code> method can be appended to the queryset to return a count of objects rather than the full list.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status=\"active\").count()\n982\n</code></pre> <p>Relationships with other models can be traversed by concatenating attribute names with a double-underscore. For example, the following will return all devices assigned to the tenant named \"Pied Piper.\"</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(tenant__name=\"Pied Piper\")\n</code></pre> <p>This approach can span multiple levels of relations. For example, the following will return all IP addresses assigned to a device in North America:</p> <pre><code>&gt;&gt;&gt; IPAddress.objects.filter(interface__device__site__region__slug=\"north-america\")\n</code></pre> <p>Note</p> <p>While the above query is functional, it's not very efficient. There are ways to optimize such requests, however they are out of scope for this document. For more information, see the Django queryset method reference documentation.</p> <p>Reverse relationships can be traversed as well. For example, the following will find all devices with an interface named \"em0\":</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(interfaces__name=\"em0\")\n</code></pre> <p>Character fields can be filtered against partial matches using the <code>contains</code> or <code>icontains</code> field lookup (the later of which is case-insensitive).</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(name__icontains=\"testdevice\")\n</code></pre> <p>Similarly, numeric fields can be filtered by values less than, greater than, and/or equal to a given value.</p> <pre><code>&gt;&gt;&gt; VLAN.objects.filter(vid__gt=2000)\n</code></pre> <p>Multiple filters can be combined to further refine a queryset.</p> <pre><code>&gt;&gt;&gt; VLAN.objects.filter(vid__gt=2000, name__icontains=\"engineering\")\n</code></pre> <p>To return the inverse of a filtered queryset, use <code>exclude()</code> instead of <code>filter()</code>.</p> <pre><code>&gt;&gt;&gt; Device.objects.count()\n4479\n&gt;&gt;&gt; Device.objects.filter(status=\"active\").count()\n4133\n&gt;&gt;&gt; Device.objects.exclude(status=\"active\").count()\n346\n</code></pre> <p>Info</p> <p>The examples above are intended only to provide a cursory introduction to queryset filtering. For an exhaustive list of the available filters, please consult the Django queryset API documentation.</p>"},{"location":"administration/netbox-shell/#creating-and-updating-objects","title":"Creating and Updating Objects","text":"<p>New objects can be created by instantiating the desired model, defining values for all required attributes, and calling <code>save()</code> on the instance. For example, we can create a new VLAN by specifying its numeric ID, name, and assigned site:</p> <pre><code>&gt;&gt;&gt; lab1 = Site.objects.get(pk=7)\n&gt;&gt;&gt; myvlan = VLAN(vid=123, name='MyNewVLAN', site=lab1)\n&gt;&gt;&gt; myvlan.save()\n</code></pre> <p>Alternatively, the above can be performed as a single operation. (Note, however, that <code>save()</code> does not return the new instance for reuse.)</p> <pre><code>&gt;&gt;&gt; VLAN(vid=123, name='MyNewVLAN', site=Site.objects.get(pk=7)).save()\n</code></pre> <p>To modify an existing object, we retrieve it, update the desired field(s), and call <code>save()</code> again.</p> <pre><code>&gt;&gt;&gt; vlan = VLAN.objects.get(pk=1280)\n&gt;&gt;&gt; vlan.name\n'MyNewVLAN'\n&gt;&gt;&gt; vlan.name = 'BetterName'\n&gt;&gt;&gt; vlan.save()\n&gt;&gt;&gt; VLAN.objects.get(pk=1280).name\n'BetterName'\n</code></pre> <p>Warning</p> <p>The Django ORM provides methods to create/edit many objects at once, namely <code>bulk_create()</code> and <code>update()</code>. These are best avoided in most cases as they bypass a model's built-in validation and can easily lead to database corruption if not used carefully.</p>"},{"location":"administration/netbox-shell/#deleting-objects","title":"Deleting Objects","text":"<p>To delete an object, simply call <code>delete()</code> on its instance. This will return a dictionary of all objects (including related objects) which have been deleted as a result of this operation.</p> <pre><code>&gt;&gt;&gt; vlan\n&lt;VLAN: 123 (BetterName)&gt;\n&gt;&gt;&gt; vlan.delete()\n(1, {'ipam.VLAN': 1})\n</code></pre> <p>To delete multiple objects at once, call <code>delete()</code> on a filtered queryset. It's a good idea to always sanity-check the count of selected objects before deleting them.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(name__icontains='test').count()\n27\n&gt;&gt;&gt; Device.objects.filter(name__icontains='test').delete()\n(35, {'dcim.DeviceBay': 0, 'dcim.InterfaceConnection': 4,\n'extras.ImageAttachment': 0, 'dcim.Device': 27, 'dcim.Interface': 4,\n'dcim.ConsolePort': 0, 'dcim.PowerPort': 0})\n</code></pre> <p>Warning</p> <p>Deletions are immediate and irreversible. Always consider the impact of deleting objects carefully before calling <code>delete()</code> on an instance or queryset.</p>"},{"location":"administration/permissions/","title":"Permiss\u00f5es baseadas em Objetos","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>NetBox v2.9 introduced a new object-based permissions framework, which replaces Django's built-in permissions model. Object-based permissions enable an administrator to grant users or groups the ability to perform an action on arbitrary subsets of objects in NetBox, rather than all objects of a certain type. For example, it is possible to grant a user permission to view only sites within a particular region, or to modify only VLANs with a numeric ID within a certain range.</p> <p>A permission in NetBox represents a relationship shared by several components:</p> <ul> <li>Object type(s) - One or more types of object in NetBox</li> <li>User(s)/Group(s) - One or more users or groups of users</li> <li>Action(s) - The action(s) that can be performed on an object</li> <li>Constraints - An arbitrary filter used to limit the granted action(s) to a specific subset of objects</li> </ul> <p>At a minimum, a permission assignment must specify one object type, one user or group, and one action. The specification of constraints is optional: A permission without any constraints specified will apply to all instances of the selected model(s).</p>"},{"location":"administration/permissions/#actions","title":"Actions","text":"<p>There are four core actions that can be permitted for each type of object within NetBox, roughly analogous to the CRUD convention (create, read, update, and delete):</p> <ul> <li>View - Retrieve an object from the database</li> <li>Add - Create a new object</li> <li>Change - Modify an existing object</li> <li>Delete - Delete an existing object</li> </ul> <p>In addition to these, permissions can also grant custom actions that may be required by a specific model or plugin. For example, the <code>napalm_read</code> permission on the device model allows a user to execute NAPALM queries on a device via NetBox's REST API. These can be specified when granting a permission in the \"additional actions\" field.</p> <p>Note</p> <p>Internally, all actions granted by a permission (both built-in and custom) are stored as strings in an array field named <code>actions</code>.</p>"},{"location":"administration/permissions/#constraints","title":"Constraints","text":"<p>Constraints are expressed as a JSON object or list representing a Django query filter. This is the same syntax that you would pass to the QuerySet <code>filter()</code> method when performing a query using the Django ORM. As with query filters, double underscores can be used to traverse related objects or invoke lookup expressions. Some example queries and their corresponding definitions are shown below.</p> <p>All attributes defined within a single JSON object are applied with a logical AND. For example, suppose you assign a permission for the site model with the following constraints.</p> <pre><code>{\n\"status\": \"active\",\n\"region__name\": \"Americas\"\n}\n</code></pre> <p>The permission will grant access only to sites which have a status of \"active\" and which are assigned to the \"Americas\" region.</p> <p>To achieve a logical OR with a different set of constraints, define multiple objects within a list. For example, if you want to constrain the permission to VLANs with an ID between 100 and 199 or a status of \"reserved,\" do the following:</p> <pre><code>[\n{\n\"vid__gte\": 100,\n\"vid__lt\": 200\n},\n{\n\"status\": \"reserved\"\n}\n]\n</code></pre> <p>Additionally, where multiple permissions have been assigned for an object type, their collective constraints will be merged using a logical \"OR\" operation.</p>"},{"location":"administration/permissions/#user-token","title":"User Token","text":"<p>This feature was introduced in NetBox v3.3</p> <p>When defining a permission constraint, administrators may use the special token <code>$user</code> to reference the current user at the time of evaluation. This can be helpful to restrict users to editing only their own journal entries, for example. Such a constraint might be defined as:</p> <pre><code>{\n\"created_by\": \"$user\"\n}\n</code></pre> <p>The <code>$user</code> token can be used only as a constraint value, or as an item within a list of values. It cannot be modified or extended to reference specific user attributes.</p>"},{"location":"administration/permissions/#example-constraint-definitions","title":"Example Constraint Definitions","text":"Constraints Description <code>{\"status\": \"active\"}</code> Status is active <code>{\"status__in\": [\"planned\", \"reserved\"]}</code> Status is active OR reserved <code>{\"status\": \"active\", \"role\": \"testing\"}</code> Status is active AND role is testing <code>{\"name__startswith\": \"Foo\"}</code> Name starts with \"Foo\" (case-sensitive) <code>{\"name__iendswith\": \"bar\"}</code> Name ends with \"bar\" (case-insensitive) <code>{\"vid__gte\": 100, \"vid__lt\": 200}</code> VLAN ID is greater than or equal to 100 AND less than 200 <code>[{\"vid__lt\": 200}, {\"status\": \"reserved\"}]</code> VLAN ID is less than 200 OR status is reserved"},{"location":"administration/permissions/#permissions-enforcement","title":"Permissions Enforcement","text":""},{"location":"administration/permissions/#viewing-objects","title":"Viewing Objects","text":"<p>Object-based permissions work by filtering the database query generated by a user's request to restrict the set of objects returned. When a request is received, NetBox first determines whether the user is authenticated and has been granted to perform the requested action. For example, if the requested URL is <code>/dcim/devices/</code>, NetBox will check for the <code>dcim.view_device</code> permission. If the user has not been assigned this permission (either directly or via a group assignment), NetBox will return a 403 (forbidden) HTTP response.</p> <p>If the permission has been granted, NetBox will compile any specified constraints for the model and action. For example, suppose two permissions have been assigned to the user granting view access to the device model, with the following constraints:</p> <pre><code>[\n{\"site__name__in\":  [\"NYC1\", \"NYC2\"]},\n{\"status\":  \"offline\", \"tenant__isnull\":  true}\n]\n</code></pre> <p>This grants the user access to view any device that is assigned to a site named NYC1 or NYC2, or which has a status of \"offline\" and has no tenant assigned. These constraints are equivalent to the following ORM query:</p> <pre><code>Site.objects.filter(\n    Q(site__name__in=['NYC1', 'NYC2']),\n    Q(status='active', tenant__isnull=True)\n)\n</code></pre>"},{"location":"administration/permissions/#creating-and-modifying-objects","title":"Creating and Modifying Objects","text":"<p>The same sort of logic is in play when a user attempts to create or modify an object in NetBox, with a twist. Once validation has completed, NetBox starts an atomic database transaction to facilitate the change, and the object is created or saved normally. Next, still within the transaction, NetBox issues a second query to retrieve the newly created/updated object, filtering the restricted queryset with the object's primary key. If this query fails to return the object, NetBox knows that the new revision does not match the constraints imposed by the permission. The transaction is then rolled back, leaving the database in its original state prior to the change, and the user is informed of the violation.</p>"},{"location":"administration/replicating-netbox/","title":"Replicando o NetBox","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"administration/replicating-netbox/#replicating-the-database","title":"Replicating the Database","text":"<p>NetBox employs a PostgreSQL database, so general PostgreSQL best practices apply here. The database can be written to a file and restored using the <code>pg_dump</code> and <code>psql</code> utilities, respectively.</p> <p>Note</p> <p>The examples below assume that your database is named <code>netbox</code>.</p>"},{"location":"administration/replicating-netbox/#export-the-database","title":"Export the Database","text":"<p>Use the <code>pg_dump</code> utility to export the entire database to a file:</p> <pre><code>pg_dump --username netbox --password --host localhost netbox &gt; netbox.sql\n</code></pre> <p>Note</p> <p>You may need to change the username, host, and/or database in the command above to match your installation.</p> <p>When replicating a production database for development purposes, you may find it convenient to exclude changelog data, which can easily account for the bulk of a database's size. To do this, exclude the <code>extras_objectchange</code> table data from the export. The table will still be included in the output file, but will not be populated with any data.</p> <pre><code>pg_dump ... --exclude-table-data=extras_objectchange netbox &gt; netbox.sql\n</code></pre>"},{"location":"administration/replicating-netbox/#load-an-exported-database","title":"Load an Exported Database","text":"<p>When restoring a database from a file, it's recommended to delete any existing database first to avoid potential conflicts.</p> <p>Warning</p> <p>The following will destroy and replace any existing instance of the database.</p> <pre><code>psql -c 'drop database netbox'\npsql -c 'create database netbox'\npsql netbox &lt; netbox.sql\n</code></pre> <p>Keep in mind that PostgreSQL user accounts and permissions are not included with the dump: You will need to create those manually if you want to fully replicate the original database (see the installation docs). When setting up a development instance of NetBox, it's strongly recommended to use different credentials anyway.</p>"},{"location":"administration/replicating-netbox/#export-the-database-schema","title":"Export the Database Schema","text":"<p>If you want to export only the database schema, and not the data itself (e.g. for development reference), do the following:</p> <pre><code>pg_dump --username netbox --password --host localhost -s netbox &gt; netbox_schema.sql\n</code></pre>"},{"location":"administration/replicating-netbox/#replicating-uploaded-media","title":"Replicating Uploaded Media","text":"<p>By default, NetBox stores uploaded files (such as image attachments) in its media directory. To fully replicate an instance of NetBox, you'll need to copy both the database and the media files.</p> <p>Note</p> <p>These operations are not necessary if your installation is utilizing a remote storage backend.</p>"},{"location":"administration/replicating-netbox/#archive-the-media-directory","title":"Archive the Media Directory","text":"<p>Execute the following command from the root of the NetBox installation path (typically <code>/opt/netbox</code>):</p> <pre><code>tar -czf netbox_media.tar.gz netbox/media/\n</code></pre>"},{"location":"administration/replicating-netbox/#restore-the-media-directory","title":"Restore the Media Directory","text":"<p>To extract the saved archive into a new installation, run the following from the installation root:</p> <pre><code>tar -xf netbox_media.tar.gz\n</code></pre>"},{"location":"administration/authentication/microsoft-azure-ad/","title":"Microsoft Azure AD","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>This guide explains how to configure single sign-on (SSO) support for NetBox using Microsoft Azure Active Directory (AD) as an authentication backend.</p>"},{"location":"administration/authentication/microsoft-azure-ad/#azure-ad-configuration","title":"Azure AD Configuration","text":""},{"location":"administration/authentication/microsoft-azure-ad/#1-create-a-test-user-optional","title":"1. Create a test user (optional)","text":"<p>Create a new user in AD to be used for testing. You can skip this step if you already have a suitable account created.</p>"},{"location":"administration/authentication/microsoft-azure-ad/#2-create-an-app-registration","title":"2. Create an app registration","text":"<p>Under the Azure Active Directory dashboard, navigate to Add &gt; App registration.</p> <p></p> <p>Enter a name for the registration (e.g. \"NetBox\") and ensure that the \"single tenant\" option is selected.</p> <p>Under \"Redirect URI\", select \"Web\" for the platform and enter the path to your NetBox installation, ending with <code>/oauth/complete/azuread-oauth2/</code>. Note that this URI must begin with <code>https://</code> unless you are referencing localhost (for development purposes).</p> <p></p> <p>Once finished, make note of the application (client) ID; this will be used when configuring NetBox.</p> <p></p> <p>Multitenant authentication</p> <p>NetBox also supports multitenant authentication via Azure AD, however it requires a different backend and an additional configuration parameter. Please see the <code>python-social-auth</code> documentation for details concerning multitenant authentication.</p>"},{"location":"administration/authentication/microsoft-azure-ad/#3-create-a-secret","title":"3. Create a secret","text":"<p>When viewing the newly-created app registration, click the \"Add a certificate or secret\" link under \"Client credentials\". Under the \"Client secrets\" tab, click the \"New client secret\" button.</p> <p></p> <p>You can optionally specify a description and select a lifetime for the secret.</p> <p></p> <p>Once finished, make note of the secret value (not the secret ID); this will be used when configuring NetBox.</p> <p></p>"},{"location":"administration/authentication/microsoft-azure-ad/#netbox-configuration","title":"NetBox Configuration","text":""},{"location":"administration/authentication/microsoft-azure-ad/#1-enter-configuration-parameters","title":"1. Enter configuration parameters","text":"<p>Enter the following configuration parameters in <code>configuration.py</code>, substituting your own values:</p> <pre><code>REMOTE_AUTH_BACKEND = 'social_core.backends.azuread.AzureADOAuth2'\nSOCIAL_AUTH_AZUREAD_OAUTH2_KEY = '{APPLICATION_ID}'\nSOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = '{SECRET_VALUE}'\n</code></pre>"},{"location":"administration/authentication/microsoft-azure-ad/#2-restart-netbox","title":"2. Restart NetBox","text":"<p>Restart the NetBox services so that the new configuration takes effect. This is typically done with the command below:</p> <pre><code>sudo systemctl restart netbox\n</code></pre>"},{"location":"administration/authentication/microsoft-azure-ad/#testing","title":"Testing","text":"<p>Log out of NetBox if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Azure AD. Click that link.</p> <p></p> <p>You should be redirected to Microsoft's authentication portal. Enter the username/email and password of your test account to continue. You may also be prompted to grant this application access to your account.</p> <p></p> <p>If successful, you will be redirected back to the NetBox UI, and will be logged in as the AD user. You can verify this by navigating to your profile (using the button at top right).</p> <p>This user account has been replicated locally to NetBox, and can now be assigned groups and permissions within the NetBox admin UI.</p>"},{"location":"administration/authentication/microsoft-azure-ad/#troubleshooting","title":"Troubleshooting","text":""},{"location":"administration/authentication/microsoft-azure-ad/#redirect-uri-does-not-match","title":"Redirect URI does not Match","text":"<p>Azure requires that the authenticating client request a redirect URI that matches what you've configured for the app in step two. This URI must begin with <code>https://</code> (unless using <code>localhost</code> for the domain).</p> <p>If Azure complains that the requested URI starts with <code>http://</code> (not HTTPS), it's likely that your HTTP server is misconfigured or sitting behind a load balancer, so NetBox is not aware that HTTPS is being use. To force the use of an HTTPS redirect URI, set <code>SOCIAL_AUTH_REDIRECT_IS_HTTPS = True</code> in <code>configuration.py</code> per the python-social-auth docs.</p>"},{"location":"administration/authentication/microsoft-azure-ad/#not-logged-in-after-authenticating","title":"Not Logged in After Authenticating","text":"<p>If you are redirected to the NetBox UI after authenticating successfully, but are not logged in, double-check the configured backend and app registration. The instructions in this guide pertain only to the <code>azuread.AzureADOAuth2</code> backend using a single-tenant app registration.</p>"},{"location":"administration/authentication/okta/","title":"Okta","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>This guide explains how to configure single sign-on (SSO) support for NetBox using Okta as an authentication backend.</p>"},{"location":"administration/authentication/okta/#okta-configuration","title":"Okta Configuration","text":"<p>Okta developer account</p> <p>Okta offers free developer accounts at https://developer.okta.com/.</p>"},{"location":"administration/authentication/okta/#1-create-a-test-user-optional","title":"1. Create a test user (optional)","text":"<p>Create a new user in the Okta admin portal to be used for testing. You can skip this step if you already have a suitable account created.</p>"},{"location":"administration/authentication/okta/#2-create-an-app-registration","title":"2. Create an app registration","text":"<p>Within the Okta administration dashboard, navigate to  Applications &gt; Applications, and click the \"Create App Integration\" button. Select \"OIDC\" as the sign-in method, and \"Web application\" for the application type.</p> <p></p> <p>On the next page, give the app integration a name (e.g. \"NetBox\") and specify the sign-in and sign-out URIs. These URIs should follow the formats below:</p> <ul> <li>Sign-in URI: <code>https://{netbox}/oauth/complete/okta-openidconnect/</code></li> <li>Sign-out URI: <code>https://{netbox}/oauth/disconnect/okta-openidconnect/</code></li> </ul> <p></p> <p>Under \"Assignments,\" select the controlled access setting most appropriate for your organization. Click \"Save\" to complete the creation.</p> <p>Once finished, note the following parameters. These will be used to configured NetBox.</p> <ul> <li>Client ID</li> <li>Client secret</li> <li>Okta domain</li> </ul> <p></p>"},{"location":"administration/authentication/okta/#netbox-configuration","title":"NetBox Configuration","text":""},{"location":"administration/authentication/okta/#1-enter-configuration-parameters","title":"1. Enter configuration parameters","text":"<p>Enter the following configuration parameters in <code>configuration.py</code>, substituting your own values:</p> <pre><code>REMOTE_AUTH_BACKEND = 'social_core.backends.okta_openidconnect.OktaOpenIdConnect'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_KEY = '{Client ID}'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_SECRET = '{Client secret}'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_API_URL = 'https://{Okta domain}/oauth2/'\n</code></pre>"},{"location":"administration/authentication/okta/#2-restart-netbox","title":"2. Restart NetBox","text":"<p>Restart the NetBox services so that the new configuration takes effect. This is typically done with the command below:</p> <pre><code>sudo systemctl restart netbox\n</code></pre>"},{"location":"administration/authentication/okta/#testing","title":"Testing","text":"<p>Log out of NetBox if already authenticated, and click the \"Log In\" button at top right. You should see the normal login form as well as an option to authenticate using Okta. Click that link.</p> <p></p> <p>You should be redirected to Okta's authentication portal. Enter the username/email and password of your test account to continue. You may also be prompted to grant this application access to your account.</p> <p></p> <p>If successful, you will be redirected back to the NetBox UI, and will be logged in as the Okta user. You can verify this by navigating to your profile (using the button at top right).</p> <p>This user account has been replicated locally to NetBox, and can now be assigned groups and permissions within the NetBox admin UI.</p>"},{"location":"administration/authentication/overview/","title":"Vis\u00e3o Geral","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"administration/authentication/overview/#local-authentication","title":"Local Authentication","text":"<p>Local user accounts and groups can be created in NetBox under the \"Authentication and Authorization\" section of the administrative user interface. This interface is available only to users with the \"staff\" permission enabled.</p> <p>At a minimum, each user account must have a username and password set. User accounts may also denote a first name, last name, and email address. Permissions may also be assigned to users and/or groups within the admin UI.</p>"},{"location":"administration/authentication/overview/#remote-authentication","title":"Remote Authentication","text":"<p>NetBox may be configured to provide user authenticate via a remote backend in addition to local authentication. This is done by setting the <code>REMOTE_AUTH_BACKEND</code> configuration parameter to a suitable backend class. NetBox provides several options for remote authentication.</p>"},{"location":"administration/authentication/overview/#ldap-authentication","title":"LDAP Authentication","text":"<pre><code>REMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend'\n</code></pre> <p>NetBox includes an authentication backend which supports LDAP. See the LDAP installation docs for more detail about this backend.</p>"},{"location":"administration/authentication/overview/#http-header-authentication","title":"HTTP Header Authentication","text":"<pre><code>REMOTE_AUTH_BACKEND = 'netbox.authentication.RemoteUserBackend'\n</code></pre> <p>Another option for remote authentication in NetBox is to enable HTTP header-based user assignment. The front end HTTP server (e.g. nginx or Apache) performs client authentication as a process external to NetBox, and passes information about the authenticated user via HTTP headers. By default, the user is assigned via the <code>REMOTE_USER</code> header, but this can be customized via the <code>REMOTE_AUTH_HEADER</code> configuration parameter.</p> <p>Optionally, user profile information can be supplied by <code>REMOTE_USER_FIRST_NAME</code>, <code>REMOTE_USER_LAST_NAME</code> and <code>REMOTE_USER_EMAIL</code> headers. These are saved to the users profile during the authentication process. These headers can be customized like the <code>REMOTE_USER</code> header.</p>"},{"location":"administration/authentication/overview/#single-sign-on-sso","title":"Single Sign-On (SSO)","text":"<pre><code>REMOTE_AUTH_BACKEND = 'social_core.backends.google.GoogleOAuth2'\n</code></pre> <p>NetBox supports single sign-on authentication via the python-social-auth library. To enable SSO, specify the path to the desired authentication backend within the <code>social_core</code> Python package. Please see the complete list of supported authentication backends for the available options.</p> <p>Most remote authentication backends require some additional configuration through settings prefixed with <code>SOCIAL_AUTH_</code>. These will be automatically imported from NetBox's <code>configuration.py</code> file. Additionally, the authentication pipeline can be customized via the <code>SOCIAL_AUTH_PIPELINE</code> parameter. (NetBox's default pipeline is defined in <code>netbox/settings.py</code> for your reference.)</p>"},{"location":"configuration/","title":"Configura\u00e7\u00e3o do NetBox","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/#configuration-file","title":"Configuration File","text":"<p>NetBox's configuration file contains all the important parameters which control how NetBox functions: database settings, security controls, user preferences, and so on. While the default configuration suffices out of the box for most use cases, there are a few required parameters which must be defined during installation. </p> <p>The configuration file is loaded from <code>$INSTALL_ROOT/netbox/netbox/configuration.py</code> by default. An example configuration is provided at <code>configuration_example.py</code>, which you may copy to use as your default config. Note that a configuration file must be defined; NetBox will not run without one.</p> <p>Customizing the Configuration Module</p> <p>A custom configuration module may be specified by setting the <code>NETBOX_CONFIGURATION</code> environment variable. This must be a dotted path to the desired Python module. For example, a file named <code>my_config.py</code> in the same directory as <code>settings.py</code> would be referenced as <code>netbox.my_config</code>.</p> <p>To keep things simple, the NetBox documentation refers to the configuration file simply as <code>configuration.py</code>.</p> <p>Some configuration parameters may alternatively be defined either in <code>configuration.py</code> or within the administrative section of the user interface. Settings which are \"hard-coded\" in the configuration file take precedence over those defined via the UI.</p>"},{"location":"configuration/#dynamic-configuration-parameters","title":"Dynamic Configuration Parameters","text":"<p>Some configuration parameters are primarily controlled via NetBox's admin interface (under Admin &gt; Extras &gt; Configuration Revisions). These are noted where applicable in the documentation. These settings may also be overridden in <code>configuration.py</code> to prevent them from being modified via the UI. A complete list of supported parameters is provided below:</p> <ul> <li><code>ALLOWED_URL_SCHEMES</code></li> <li><code>BANNER_BOTTOM</code></li> <li><code>BANNER_LOGIN</code></li> <li><code>BANNER_TOP</code></li> <li><code>CHANGELOG_RETENTION</code></li> <li><code>CUSTOM_VALIDATORS</code></li> <li><code>DEFAULT_USER_PREFERENCES</code></li> <li><code>ENFORCE_GLOBAL_UNIQUE</code></li> <li><code>GRAPHQL_ENABLED</code></li> <li><code>JOBRESULT_RETENTION</code></li> <li><code>MAINTENANCE_MODE</code></li> <li><code>MAPS_URL</code></li> <li><code>MAX_PAGE_SIZE</code></li> <li><code>NAPALM_ARGS</code></li> <li><code>NAPALM_PASSWORD</code></li> <li><code>NAPALM_TIMEOUT</code></li> <li><code>NAPALM_USERNAME</code></li> <li><code>PAGINATE_COUNT</code></li> <li><code>POWERFEED_DEFAULT_AMPERAGE</code></li> <li><code>POWERFEED_DEFAULT_MAX_UTILIZATION</code></li> <li><code>POWERFEED_DEFAULT_VOLTAGE</code></li> <li><code>PREFER_IPV4</code></li> <li><code>RACK_ELEVATION_DEFAULT_UNIT_HEIGHT</code></li> <li><code>RACK_ELEVATION_DEFAULT_UNIT_WIDTH</code></li> </ul>"},{"location":"configuration/#modifying-the-configuration","title":"Modifying the Configuration","text":"<p>The configuration file may be modified at any time. However, the WSGI service (e.g. Gunicorn) must be restarted before these changes will take effect:</p> <pre><code>$ sudo systemctl restart netbox\n</code></pre> <p>Configuration parameters which are set via the admin UI (those listed under \"dynamic settings\") take effect immediately.</p>"},{"location":"configuration/data-validation/","title":"Valida\u00e7\u00e3o de Dados","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/data-validation/#custom_validators","title":"CUSTOM_VALIDATORS","text":"<p>Dynamic Configuration Parameter</p> <p>This is a mapping of models to custom validators that have been defined locally to enforce custom validation logic. An example is provided below:</p> <pre><code>CUSTOM_VALIDATORS = {\n    \"dcim.site\": [\n        {\n            \"name\": {\n                \"min_length\": 5,\n                \"max_length\": 30\n            }\n        },\n        \"my_plugin.validators.Validator1\"\n    ],\n    \"dim.device\": [\n        \"my_plugin.validators.Validator1\"\n    ]\n}\n</code></pre>"},{"location":"configuration/data-validation/#field_choices","title":"FIELD_CHOICES","text":"<p>Some static choice fields on models can be configured with custom values. This is done by defining <code>FIELD_CHOICES</code> as a dictionary mapping model fields to their choices. Each choice in the list must have a database value and a human-friendly label, and may optionally specify a color. (A list of available colors is provided below.)</p> <p>The choices provided can either replace the stock choices provided by NetBox, or append to them. To replace the available choices, specify the app, model, and field name separated by dots. For example, the site model would be referenced as <code>dcim.Site.status</code>. To extend the available choices, append a plus sign to the end of this string (e.g. <code>dcim.Site.status+</code>).</p> <p>For example, the following configuration would replace the default site status choices with the options Foo, Bar, and Baz:</p> <pre><code>FIELD_CHOICES = {\n    'dcim.Site.status': (\n        ('foo', 'Foo', 'red'),\n        ('bar', 'Bar', 'green'),\n        ('baz', 'Baz', 'blue'),\n    )\n}\n</code></pre> <p>Appending a plus sign to the field identifier would instead add these choices to the ones already offered:</p> <pre><code>FIELD_CHOICES = {\n    'dcim.Site.status+': (\n        ...\n    )\n}\n</code></pre> <p>The following model fields support configurable choices:</p> <ul> <li><code>circuits.Circuit.status</code></li> <li><code>dcim.Device.status</code></li> <li><code>dcim.Location.status</code></li> <li><code>dcim.Module.status</code></li> <li><code>dcim.PowerFeed.status</code></li> <li><code>dcim.Rack.status</code></li> <li><code>dcim.Site.status</code></li> <li><code>dcim.VirtualDeviceContext.status</code></li> <li><code>extras.JournalEntry.kind</code></li> <li><code>ipam.IPAddress.status</code></li> <li><code>ipam.IPRange.status</code></li> <li><code>ipam.Prefix.status</code></li> <li><code>ipam.VLAN.status</code></li> <li><code>virtualization.Cluster.status</code></li> <li><code>virtualization.VirtualMachine.status</code></li> <li><code>wireless.WirelessLAN.status</code></li> </ul> <p>The following colors are supported:</p> <ul> <li><code>blue</code></li> <li><code>indigo</code></li> <li><code>purple</code></li> <li><code>pink</code></li> <li><code>red</code></li> <li><code>orange</code></li> <li><code>yellow</code></li> <li><code>green</code></li> <li><code>teal</code></li> <li><code>cyan</code></li> <li><code>gray</code></li> <li><code>black</code></li> <li><code>white</code></li> </ul>"},{"location":"configuration/date-time/","title":"Data e Hora","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/date-time/#time_zone","title":"TIME_ZONE","text":"<p>Default: UTC</p> <p>The time zone NetBox will use when dealing with dates and times. It is recommended to use UTC time unless you have a specific need to use a local time zone. Please see the list of available time zones.</p>"},{"location":"configuration/date-time/#date-and-time-formatting","title":"Date and Time Formatting","text":"<p>You may define custom formatting for date and times. For detailed instructions on writing format strings, please see the Django documentation. Default formats are listed below.</p> <pre><code>DATE_FORMAT = 'N j, Y'               # June 26, 2016\nSHORT_DATE_FORMAT = 'Y-m-d'          # 2016-06-26\nTIME_FORMAT = 'g:i a'                # 1:23 p.m.\nSHORT_TIME_FORMAT = 'H:i:s'          # 13:23:00\nDATETIME_FORMAT = 'N j, Y g:i a'     # June 26, 2016 1:23 p.m.\nSHORT_DATETIME_FORMAT = 'Y-m-d H:i'  # 2016-06-26 13:23\n</code></pre>"},{"location":"configuration/default-values/","title":"Valores Padr\u00f5es","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/default-values/#default_user_preferences","title":"DEFAULT_USER_PREFERENCES","text":"<p>Dynamic Configuration Parameter</p> <p>This is a dictionary defining the default preferences to be set for newly-created user accounts. For example, to set the default page size for all users to 100, define the following:</p> <pre><code>DEFAULT_USER_PREFERENCES = {\n    \"pagination\": {\n        \"per_page\": 100\n    }\n}\n</code></pre> <p>For a complete list of available preferences, log into NetBox and navigate to <code>/user/preferences/</code>. A period in a preference name indicates a level of nesting in the JSON data. The example above maps to <code>pagination.per_page</code>.</p>"},{"location":"configuration/default-values/#paginate_count","title":"PAGINATE_COUNT","text":"<p>Dynamic Configuration Parameter</p> <p>Default: 50</p> <p>The default maximum number of objects to display per page within each list of objects.</p>"},{"location":"configuration/default-values/#powerfeed_default_amperage","title":"POWERFEED_DEFAULT_AMPERAGE","text":"<p>Dynamic Configuration Parameter</p> <p>Default: 15</p> <p>The default value for the <code>amperage</code> field when creating new power feeds.</p>"},{"location":"configuration/default-values/#powerfeed_default_max_utilization","title":"POWERFEED_DEFAULT_MAX_UTILIZATION","text":"<p>Dynamic Configuration Parameter</p> <p>Default: 80</p> <p>The default value (percentage) for the <code>max_utilization</code> field when creating new power feeds.</p>"},{"location":"configuration/default-values/#powerfeed_default_voltage","title":"POWERFEED_DEFAULT_VOLTAGE","text":"<p>Dynamic Configuration Parameter</p> <p>Default: 120</p> <p>The default value for the <code>voltage</code> field when creating new power feeds.</p>"},{"location":"configuration/default-values/#rack_elevation_default_unit_height","title":"RACK_ELEVATION_DEFAULT_UNIT_HEIGHT","text":"<p>Dynamic Configuration Parameter</p> <p>Default: 22</p> <p>Default height (in pixels) of a unit within a rack elevation. For best results, this should be approximately one tenth of <code>RACK_ELEVATION_DEFAULT_UNIT_WIDTH</code>.</p>"},{"location":"configuration/default-values/#rack_elevation_default_unit_width","title":"RACK_ELEVATION_DEFAULT_UNIT_WIDTH","text":"<p>Dynamic Configuration Parameter</p> <p>Default: 220</p> <p>Default width (in pixels) of a unit within a rack elevation.</p>"},{"location":"configuration/development/","title":"Par\u00e2metros de Desenvolvimento","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/development/#debug","title":"DEBUG","text":"<p>Default: False</p> <p>This setting enables debugging. Debugging should be enabled only during development or troubleshooting. Note that only clients which access NetBox from a recognized internal IP address will see debugging tools in the user interface.</p> <p>Warning</p> <p>Never enable debugging on a production system, as it can expose sensitive data to unauthenticated users and impose a substantial performance penalty.</p>"},{"location":"configuration/development/#developer","title":"DEVELOPER","text":"<p>Default: False</p> <p>This parameter serves as a safeguard to prevent some potentially dangerous behavior, such as generating new database schema migrations. Additionally, enabling this setting disables the debug warning banner in the UI. Set this to <code>True</code> only if you are actively developing the NetBox code base.</p>"},{"location":"configuration/error-reporting/","title":"Configura\u00e7\u00e3o de Relat\u00f3rios de Erro","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/error-reporting/#sentry_dsn","title":"SENTRY_DSN","text":"<p>Default: None</p> <p>Defines a Sentry data source name (DSN) for automated error reporting. <code>SENTRY_ENABLED</code> must be True for this parameter to take effect. For example:</p> <pre><code>SENTRY_DSN = \"https://examplePublicKey@o0.ingest.sentry.io/0\"\n</code></pre>"},{"location":"configuration/error-reporting/#sentry_enabled","title":"SENTRY_ENABLED","text":"<p>Default: False</p> <p>Set to True to enable automatic error reporting via Sentry.</p>"},{"location":"configuration/error-reporting/#sentry_sample_rate","title":"SENTRY_SAMPLE_RATE","text":"<p>Default: 1.0 (all)</p> <p>The sampling rate for errors. Must be a value between 0 (disabled) and 1.0 (report on all errors).</p>"},{"location":"configuration/error-reporting/#sentry_tags","title":"SENTRY_TAGS","text":"<p>An optional dictionary of tag names and values to apply to Sentry error reports.For example:</p> <pre><code>SENTRY_TAGS = {\n    \"custom.foo\": \"123\",\n    \"custom.bar\": \"abc\",\n}\n</code></pre> <p>Reserved tag prefixes</p> <p>Avoid using any tag names which begin with <code>netbox.</code>, as this prefix is reserved by the NetBox application.</p>"},{"location":"configuration/error-reporting/#sentry_traces_sample_rate","title":"SENTRY_TRACES_SAMPLE_RATE","text":"<p>Default: 0 (disabled)</p> <p>The sampling rate for transactions. Must be a value between 0 (disabled) and 1.0 (report on all transactions).</p> <p>Consider performance implications</p> <p>A high sampling rate for transactions can induce significant performance penalties. If transaction reporting is desired, it is recommended to use a relatively low sample rate of 10% to 20% (0.1 to 0.2).</p>"},{"location":"configuration/miscellaneous/","title":"Par\u00e2metros Diversos (Miscellaneous)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/miscellaneous/#admins","title":"ADMINS","text":"<p>NetBox will email details about critical errors to the administrators listed here. This should be a list of (name, email) tuples. For example:</p> <pre><code>ADMINS = [\n    ['Hank Hill', 'hhill@example.com'],\n    ['Dale Gribble', 'dgribble@example.com'],\n]\n</code></pre>"},{"location":"configuration/miscellaneous/#banner_bottom","title":"BANNER_BOTTOM","text":"<p>Dynamic Configuration Parameter</p> <p>Sets content for the bottom banner in the user interface.</p>"},{"location":"configuration/miscellaneous/#banner_login","title":"BANNER_LOGIN","text":"<p>Dynamic Configuration Parameter</p> <p>This defines custom content to be displayed on the login page above the login form. HTML is allowed.</p>"},{"location":"configuration/miscellaneous/#banner_top","title":"BANNER_TOP","text":"<p>Dynamic Configuration Parameter</p> <p>Sets content for the top banner in the user interface.</p> <p>Tip</p> <p>If you'd like the top and bottom banners to match, set the following:</p> <pre><code>BANNER_TOP = 'Your banner text'\nBANNER_BOTTOM = BANNER_TOP\n</code></pre>"},{"location":"configuration/miscellaneous/#changelog_retention","title":"CHANGELOG_RETENTION","text":"<p>Dynamic Configuration Parameter</p> <p>Default: 90</p> <p>The number of days to retain logged changes (object creations, updates, and deletions). Set this to <code>0</code> to retain changes in the database indefinitely.</p> <p>Warning</p> <p>If enabling indefinite changelog retention, it is recommended to periodically delete old entries. Otherwise, the database may eventually exceed capacity.</p>"},{"location":"configuration/miscellaneous/#enforce_global_unique","title":"ENFORCE_GLOBAL_UNIQUE","text":"<p>Dynamic Configuration Parameter</p> <p>Default: False</p> <p>By default, NetBox will permit users to create duplicate prefixes and IP addresses in the global table (that is, those which are not assigned to any VRF). This behavior can be disabled by setting <code>ENFORCE_GLOBAL_UNIQUE</code> to True.</p>"},{"location":"configuration/miscellaneous/#file_upload_max_memory_size","title":"<code>FILE_UPLOAD_MAX_MEMORY_SIZE</code>","text":"<p>Default: <code>2621440</code> (2.5 MB).</p> <p>The maximum amount (in bytes) of uploaded data that will be held in memory before being written to the filesystem. Changing this setting can be useful for example to be able to upload files bigger than 2.5MB to custom scripts for processing.</p>"},{"location":"configuration/miscellaneous/#graphql_enabled","title":"GRAPHQL_ENABLED","text":"<p>Dynamic Configuration Parameter</p> <p>Default: True</p> <p>Setting this to False will disable the GraphQL API.</p>"},{"location":"configuration/miscellaneous/#jobresult_retention","title":"JOBRESULT_RETENTION","text":"<p>Dynamic Configuration Parameter</p> <p>Default: 90</p> <p>The number of days to retain job results (scripts and reports). Set this to <code>0</code> to retain job results in the database indefinitely.</p> <p>Warning</p> <p>If enabling indefinite job results retention, it is recommended to periodically delete old entries. Otherwise, the database may eventually exceed capacity.</p>"},{"location":"configuration/miscellaneous/#maintenance_mode","title":"MAINTENANCE_MODE","text":"<p>Dynamic Configuration Parameter</p> <p>Default: False</p> <p>Setting this to True will display a \"maintenance mode\" banner at the top of every page. Additionally, NetBox will no longer update a user's \"last active\" time upon login. This is to allow new logins when the database is in a read-only state. Recording of login times will resume when maintenance mode is disabled.</p>"},{"location":"configuration/miscellaneous/#maps_url","title":"MAPS_URL","text":"<p>Dynamic Configuration Parameter</p> <p>Default: <code>https://maps.google.com/?q=</code> (Google Maps)</p> <p>This specifies the URL to use when presenting a map of a physical location by street address or GPS coordinates. The URL must accept either a free-form street address or a comma-separated pair of numeric coordinates appended to it.</p>"},{"location":"configuration/miscellaneous/#max_page_size","title":"MAX_PAGE_SIZE","text":"<p>Dynamic Configuration Parameter</p> <p>Default: 1000</p> <p>A web user or API consumer can request an arbitrary number of objects by appending the \"limit\" parameter to the URL (e.g. <code>?limit=1000</code>). This parameter defines the maximum acceptable limit. Setting this to <code>0</code> or <code>None</code> will allow a client to retrieve all matching objects at once with no limit by specifying <code>?limit=0</code>.</p>"},{"location":"configuration/miscellaneous/#metrics_enabled","title":"METRICS_ENABLED","text":"<p>Default: False</p> <p>Toggle the availability Prometheus-compatible metrics at <code>/metrics</code>. See the Prometheus Metrics documentation for more details.</p>"},{"location":"configuration/miscellaneous/#prefer_ipv4","title":"PREFER_IPV4","text":"<p>Dynamic Configuration Parameter</p> <p>Default: False</p> <p>When determining the primary IP address for a device, IPv6 is preferred over IPv4 by default. Set this to True to prefer IPv4 instead.</p>"},{"location":"configuration/miscellaneous/#queue_mappings","title":"QUEUE_MAPPINGS","text":"<p>Allows changing which queues are used internally for background tasks.</p> <pre><code>QUEUE_MAPPINGS = {\n    'webhook': 'low',\n    'report': 'high',\n    'script': 'high',\n}\n</code></pre> <p>If no queue is defined the queue named <code>default</code> will be used.</p>"},{"location":"configuration/miscellaneous/#release_check_url","title":"RELEASE_CHECK_URL","text":"<p>Default: None (disabled)</p> <p>This parameter defines the URL of the repository that will be checked for new NetBox releases. When a new release is detected, a message will be displayed to administrative users on the home page. This can be set to the official repository (<code>'https://api.github.com/repos/netbox-community/netbox/releases'</code>) or a custom fork. Set this to <code>None</code> to disable automatic update checks.</p> <p>Note</p> <p>The URL provided must be compatible with the GitHub REST API.</p>"},{"location":"configuration/miscellaneous/#rq_default_timeout","title":"RQ_DEFAULT_TIMEOUT","text":"<p>Default: <code>300</code></p> <p>The maximum execution time of a background task (such as running a custom script), in seconds.</p>"},{"location":"configuration/napalm/","title":"Par\u00e2metros do NAPALM","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/napalm/#napalm-parameters","title":"NAPALM Parameters","text":""},{"location":"configuration/napalm/#napalm_username","title":"NAPALM_USERNAME","text":""},{"location":"configuration/napalm/#napalm_password","title":"NAPALM_PASSWORD","text":"<p>Dynamic Configuration Parameter</p> <p>NetBox will use these credentials when authenticating to remote devices via the supported NAPALM integration, if installed. Both parameters are optional.</p> <p>Note</p> <p>If SSH public key authentication has been set up on the remote device(s) for the system account under which NetBox runs, these parameters are not needed.</p>"},{"location":"configuration/napalm/#napalm_args","title":"NAPALM_ARGS","text":"<p>Dynamic Configuration Parameter</p> <p>A dictionary of optional arguments to pass to NAPALM when instantiating a network driver. See the NAPALM documentation for a complete list of optional arguments. An example:</p> <pre><code>NAPALM_ARGS = {\n    'api_key': '472071a93b60a1bd1fafb401d9f8ef41',\n    'port': 2222,\n}\n</code></pre> <p>Some platforms (e.g. Cisco IOS) require an argument named <code>secret</code> to be passed in addition to the normal password. If desired, you can use the configured <code>NAPALM_PASSWORD</code> as the value for this argument:</p> <pre><code>NAPALM_USERNAME = 'username'\nNAPALM_PASSWORD = 'MySecretPassword'\nNAPALM_ARGS = {\n    'secret': NAPALM_PASSWORD,\n    # Include any additional args here\n}\n</code></pre>"},{"location":"configuration/napalm/#napalm_timeout","title":"NAPALM_TIMEOUT","text":"<p>Dynamic Configuration Parameter</p> <p>Default: 30 seconds</p> <p>The amount of time (in seconds) to wait for NAPALM to connect to a device.</p>"},{"location":"configuration/plugins/","title":"Par\u00e2metros de Plugins","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/plugins/#plugins","title":"PLUGINS","text":"<p>Default: Empty</p> <p>A list of installed NetBox plugins to enable. Plugins will not take effect unless they are listed here.</p> <p>Warning</p> <p>Plugins extend NetBox by allowing external code to run with the same access and privileges as NetBox itself. Only install plugins from trusted sources. The NetBox maintainers make absolutely no guarantees about the integrity or security of your installation with plugins enabled.</p>"},{"location":"configuration/plugins/#plugins_config","title":"PLUGINS_CONFIG","text":"<p>Default: Empty</p> <p>This parameter holds configuration settings for individual NetBox plugins. It is defined as a dictionary, with each key using the name of an installed plugin. The specific parameters supported are unique to each plugin: Reference the plugin's documentation to determine the supported parameters. An example configuration is shown below:</p> <pre><code>PLUGINS_CONFIG = {\n    'plugin1': {\n        'foo': 123,\n        'bar': True\n    },\n    'plugin2': {\n        'foo': 456,\n    },\n}\n</code></pre> <p>Note that a plugin must be listed in <code>PLUGINS</code> for its configuration to take effect.</p>"},{"location":"configuration/remote-authentication/","title":"Configura\u00e7\u00e3o de Autentica\u00e7\u00e3o Remota","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>The configuration parameters listed here control remote authentication for NetBox. Note that <code>REMOTE_AUTH_ENABLED</code> must be true in order for these settings to take effect.</p>"},{"location":"configuration/remote-authentication/#remote_auth_auto_create_user","title":"REMOTE_AUTH_AUTO_CREATE_USER","text":"<p>Default: <code>False</code></p> <p>If true, NetBox will automatically create local accounts for users authenticated via a remote service. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"},{"location":"configuration/remote-authentication/#remote_auth_backend","title":"REMOTE_AUTH_BACKEND","text":"<p>Default: <code>'netbox.authentication.RemoteUserBackend'</code></p> <p>This is the Python path to the custom Django authentication backend to use for external user authentication. NetBox provides two built-in backends (listed below), though custom authentication backends may also be provided by other packages or plugins. Provide a string for a single backend, or an iterable for multiple backends, which will be attempted in the order given.</p> <ul> <li><code>netbox.authentication.RemoteUserBackend</code></li> <li><code>netbox.authentication.LDAPBackend</code></li> </ul>"},{"location":"configuration/remote-authentication/#remote_auth_default_groups","title":"REMOTE_AUTH_DEFAULT_GROUPS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>The list of groups to assign a new user account when created using remote authentication. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"},{"location":"configuration/remote-authentication/#remote_auth_default_permissions","title":"REMOTE_AUTH_DEFAULT_PERMISSIONS","text":"<p>Default: <code>{}</code> (Empty dictionary)</p> <p>A mapping of permissions to assign a new user account when created using remote authentication. Each key in the dictionary should be set to a dictionary of the attributes to be applied to the permission, or <code>None</code> to allow all objects. (Requires <code>REMOTE_AUTH_ENABLED</code> as True and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> as False.)</p>"},{"location":"configuration/remote-authentication/#remote_auth_enabled","title":"REMOTE_AUTH_ENABLED","text":"<p>Default: <code>False</code></p> <p>NetBox can be configured to support remote user authentication by inferring user authentication from an HTTP header set by the HTTP reverse proxy (e.g. nginx or Apache). Set this to <code>True</code> to enable this functionality. (Local authentication will still take effect as a fallback.) (<code>REMOTE_AUTH_DEFAULT_GROUPS</code> will not function if <code>REMOTE_AUTH_ENABLED</code> is disabled)</p>"},{"location":"configuration/remote-authentication/#remote_auth_group_header","title":"REMOTE_AUTH_GROUP_HEADER","text":"<p>Default: <code>'HTTP_REMOTE_USER_GROUP'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs NetBox of the currently authenticated user. For example, to use the request header <code>X-Remote-User-Groups</code> it needs to be set to <code>HTTP_X_REMOTE_USER_GROUPS</code>. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"},{"location":"configuration/remote-authentication/#remote_auth_group_separator","title":"REMOTE_AUTH_GROUP_SEPARATOR","text":"<p>Default: <code>|</code> (Pipe)</p> <p>The Seperator upon which <code>REMOTE_AUTH_GROUP_HEADER</code> gets split into individual Groups. This needs to be coordinated with your authentication Proxy. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"},{"location":"configuration/remote-authentication/#remote_auth_group_sync_enabled","title":"REMOTE_AUTH_GROUP_SYNC_ENABLED","text":"<p>Default: <code>False</code></p> <p>NetBox can be configured to sync remote user groups by inferring user authentication from an HTTP header set by the HTTP reverse proxy (e.g. nginx or Apache). Set this to <code>True</code> to enable this functionality. (Local authentication will still take effect as a fallback.) (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"},{"location":"configuration/remote-authentication/#remote_auth_header","title":"REMOTE_AUTH_HEADER","text":"<p>Default: <code>'HTTP_REMOTE_USER'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs NetBox of the currently authenticated user. For example, to use the request header <code>X-Remote-User</code> it needs to be set to <code>HTTP_X_REMOTE_USER</code>. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"},{"location":"configuration/remote-authentication/#remote_auth_user_email","title":"REMOTE_AUTH_USER_EMAIL","text":"<p>Default: <code>'HTTP_REMOTE_USER_EMAIL'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs NetBox of the email address of the currently authenticated user. For example, to use the request header <code>X-Remote-User-Email</code> it needs to be set to <code>HTTP_X_REMOTE_USER_EMAIL</code>. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"},{"location":"configuration/remote-authentication/#remote_auth_user_first_name","title":"REMOTE_AUTH_USER_FIRST_NAME","text":"<p>Default: <code>'HTTP_REMOTE_USER_FIRST_NAME'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs NetBox of the first name of the currently authenticated user. For example, to use the request header <code>X-Remote-User-First-Name</code> it needs to be set to <code>HTTP_X_REMOTE_USER_FIRST_NAME</code>. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"},{"location":"configuration/remote-authentication/#remote_auth_user_last_name","title":"REMOTE_AUTH_USER_LAST_NAME","text":"<p>Default: <code>'HTTP_REMOTE_USER_LAST_NAME'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs NetBox of the last name of the currently authenticated user. For example, to use the request header <code>X-Remote-User-Last-Name</code> it needs to be set to <code>HTTP_X_REMOTE_USER_LAST_NAME</code>. (Requires <code>REMOTE_AUTH_ENABLED</code>.)</p>"},{"location":"configuration/remote-authentication/#remote_auth_superuser_groups","title":"REMOTE_AUTH_SUPERUSER_GROUPS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>The list of groups that promote an remote User to Superuser on Login. If group isn't present on next Login, the Role gets revoked. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"},{"location":"configuration/remote-authentication/#remote_auth_superusers","title":"REMOTE_AUTH_SUPERUSERS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>The list of users that get promoted to Superuser on Login. If user isn't present in list on next Login, the Role gets revoked. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"},{"location":"configuration/remote-authentication/#remote_auth_staff_groups","title":"REMOTE_AUTH_STAFF_GROUPS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>The list of groups that promote an remote User to Staff on Login. If group isn't present on next Login, the Role gets revoked. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"},{"location":"configuration/remote-authentication/#remote_auth_staff_users","title":"REMOTE_AUTH_STAFF_USERS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>The list of users that get promoted to Staff on Login. If user isn't present in list on next Login, the Role gets revoked. (Requires <code>REMOTE_AUTH_ENABLED</code> and <code>REMOTE_AUTH_GROUP_SYNC_ENABLED</code> )</p>"},{"location":"configuration/required-parameters/","title":"Configura\u00e7\u00e3o Par\u00e2metros Obrigat\u00f3rios","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/required-parameters/#allowed_hosts","title":"ALLOWED_HOSTS","text":"<p>This is a list of valid fully-qualified domain names (FQDNs) and/or IP addresses that can be used to reach the NetBox service. Usually this is the same as the hostname for the NetBox server, but can also be different; for example, when using a reverse proxy serving the NetBox website under a different FQDN than the hostname of the NetBox server. To help guard against HTTP Host header attackes, NetBox will not permit access to the server via any other hostnames (or IPs).</p> <p>Note</p> <p>This parameter must always be defined as a list or tuple, even if only a single value is provided.</p> <p>The value of this option is also used to set <code>CSRF_TRUSTED_ORIGINS</code>, which restricts POST requests to the same set of hosts (more about this here). Keep in mind that NetBox, by default, sets <code>USE_X_FORWARDED_HOST</code> to true, which means that if you're using a reverse proxy, it's the FQDN used to reach that reverse proxy which needs to be in this list (more about this here).</p> <p>Example:</p> <pre><code>ALLOWED_HOSTS = ['netbox.example.com', '192.0.2.123']\n</code></pre> <p>If you are not yet sure what the domain name and/or IP address of the NetBox installation will be, and are comfortable accepting the risks in doing so, you can set this to a wildcard (asterisk) to allow all host values:</p> <pre><code>ALLOWED_HOSTS = ['*']\n</code></pre>"},{"location":"configuration/required-parameters/#database","title":"DATABASE","text":"<p>NetBox requires access to a PostgreSQL 11 or later database service to store data. This service can run locally on the NetBox server or on a remote system. The following parameters must be defined within the <code>DATABASE</code> dictionary:</p> <ul> <li><code>NAME</code> - Database name</li> <li><code>USER</code> - PostgreSQL username</li> <li><code>PASSWORD</code> - PostgreSQL password</li> <li><code>HOST</code> - Name or IP address of the database server (use <code>localhost</code> if running locally)</li> <li><code>PORT</code> - TCP port of the PostgreSQL service; leave blank for default port (TCP/5432)</li> <li><code>CONN_MAX_AGE</code> - Lifetime of a persistent database connection, in seconds (300 is the default)</li> </ul> <p>Example:</p> <pre><code>DATABASE = {\n    'NAME': 'netbox',               # Database name\n    'USER': 'netbox',               # PostgreSQL username\n    'PASSWORD': 'J5brHrAXFLQSif0K', # PostgreSQL password\n    'HOST': 'localhost',            # Database server\n    'PORT': '',                     # Database port (leave blank for default)\n    'CONN_MAX_AGE': 300,            # Max database connection age\n}\n</code></pre> <p>Note</p> <p>NetBox supports all PostgreSQL database options supported by the underlying Django framework. For a complete list of available parameters, please see the Django documentation.</p>"},{"location":"configuration/required-parameters/#redis","title":"REDIS","text":"<p>Redis is an in-memory data store similar to memcached. While Redis has been an optional component of NetBox since the introduction of webhooks in version 2.4, it is required starting in 2.6 to support NetBox's caching functionality (as well as other planned features). In 2.7, the connection settings were broken down into two sections for task queuing and caching, allowing the user to connect to different Redis instances/databases per feature.</p> <p>Redis is configured using a configuration setting similar to <code>DATABASE</code> and these settings are the same for both of the <code>tasks</code> and <code>caching</code> subsections:</p> <ul> <li><code>HOST</code> - Name or IP address of the Redis server (use <code>localhost</code> if running locally)</li> <li><code>PORT</code> - TCP port of the Redis service; leave blank for default port (6379)</li> <li><code>USERNAME</code> - Redis username (if set)</li> <li><code>PASSWORD</code> - Redis password (if set)</li> <li><code>DATABASE</code> - Numeric database ID</li> <li><code>SSL</code> - Use SSL connection to Redis</li> <li><code>INSECURE_SKIP_TLS_VERIFY</code> - Set to <code>True</code> to disable TLS certificate verification (not recommended)</li> </ul> <p>An example configuration is provided below:</p> <pre><code>REDIS = {\n    'tasks': {\n        'HOST': 'redis.example.com',\n        'PORT': 1234,\n        'USERNAME': 'netbox'\n        'PASSWORD': 'foobar',\n        'DATABASE': 0,\n        'SSL': False,\n    },\n    'caching': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'USERNAME': ''\n        'PASSWORD': '',\n        'DATABASE': 1,\n        'SSL': False,\n    }\n}\n</code></pre> <p>Note</p> <p>If you are upgrading from a NetBox release older than v2.7.0, please note that the Redis connection configuration settings have changed. Manual modification to bring the <code>REDIS</code> section inline with the above specification is necessary</p> <p>Warning</p> <p>It is highly recommended to keep the task and cache databases separate. Using the same database number on the same Redis instance for both may result in queued background tasks being lost during cache flushing events.</p>"},{"location":"configuration/required-parameters/#using-redis-sentinel","title":"Using Redis Sentinel","text":"<p>If you are using Redis Sentinel for high-availability purposes, there is minimal  configuration necessary to convert NetBox to recognize it. It requires the removal of the <code>HOST</code> and <code>PORT</code> keys from  above and the addition of three new keys.</p> <ul> <li><code>SENTINELS</code>: List of tuples or tuple of tuples with each inner tuple containing the name or IP address  of the Redis server and port for each sentinel instance to connect to</li> <li><code>SENTINEL_SERVICE</code>: Name of the master / service to connect to</li> <li><code>SENTINEL_TIMEOUT</code>: Connection timeout, in seconds</li> </ul> <p>Example:</p> <pre><code>REDIS = {\n    'tasks': {\n        'SENTINELS': [('mysentinel.redis.example.com', 6379)],\n        'SENTINEL_SERVICE': 'netbox',\n        'SENTINEL_TIMEOUT': 10,\n        'PASSWORD': '',\n        'DATABASE': 0,\n        'SSL': False,\n    },\n    'caching': {\n        'SENTINELS': [\n            ('mysentinel.redis.example.com', 6379),\n            ('othersentinel.redis.example.com', 6379)\n        ],\n        'SENTINEL_SERVICE': 'netbox',\n        'PASSWORD': '',\n        'DATABASE': 1,\n        'SSL': False,\n    }\n}\n</code></pre> <p>Note</p> <p>It is permissible to use Sentinel for only one database and not the other.</p>"},{"location":"configuration/required-parameters/#secret_key","title":"SECRET_KEY","text":"<p>This is a secret, random string used to assist in the creation new cryptographic hashes for passwords and HTTP cookies. The key defined here should not be shared outside of the configuration file. <code>SECRET_KEY</code> can be changed at any time, however be aware that doing so will invalidate all existing sessions.</p> <p>Please note that this key is not used directly for hashing user passwords or for the encrypted storage of secret data in NetBox.</p> <p><code>SECRET_KEY</code> should be at least 50 characters in length and contain a random mix of letters, digits, and symbols. The script located at <code>$INSTALL_ROOT/netbox/generate_secret_key.py</code> may be used to generate a suitable key.</p>"},{"location":"configuration/security/","title":"Par\u00e2metros de Seguran\u00e7a &amp; Autentica\u00e7\u00e3o","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/security/#allow_token_retrieval","title":"ALLOW_TOKEN_RETRIEVAL","text":"<p>Default: True</p> <p>If disabled, the values of API tokens will not be displayed after each token's initial creation. A user must record the value of a token immediately upon its creation, or it will be lost. Note that this affects all users, regardless of assigned permissions.</p>"},{"location":"configuration/security/#allowed_url_schemes","title":"ALLOWED_URL_SCHEMES","text":"<p>Dynamic Configuration Parameter</p> <p>Default: <code>('file', 'ftp', 'ftps', 'http', 'https', 'irc', 'mailto', 'sftp', 'ssh', 'tel', 'telnet', 'tftp', 'vnc', 'xmpp')</code></p> <p>A list of permitted URL schemes referenced when rendering links within NetBox. Note that only the schemes specified in this list will be accepted: If adding your own, be sure to replicate all the default values as well (excluding those schemes which are not desirable).</p>"},{"location":"configuration/security/#auth_password_validators","title":"AUTH_PASSWORD_VALIDATORS","text":"<p>This parameter acts as a pass-through for configuring Django's built-in password validators for local user accounts. If configured, these will be applied whenever a user's password is updated to ensure that it meets minimum criteria such as length or complexity. An example is provided below. For more detail on the available options, please see the Django documentation.</p> <pre><code>AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n        'OPTIONS': {\n            'min_length': 10,\n        }\n    },\n]\n</code></pre>"},{"location":"configuration/security/#cors_origin_allow_all","title":"CORS_ORIGIN_ALLOW_ALL","text":"<p>Default: False</p> <p>If True, cross-origin resource sharing (CORS) requests will be accepted from all origins. If False, a whitelist will be used (see below).</p>"},{"location":"configuration/security/#cors_origin_whitelist","title":"CORS_ORIGIN_WHITELIST","text":""},{"location":"configuration/security/#cors_origin_regex_whitelist","title":"CORS_ORIGIN_REGEX_WHITELIST","text":"<p>These settings specify a list of origins that are authorized to make cross-site API requests. Use <code>CORS_ORIGIN_WHITELIST</code> to define a list of exact hostnames, or <code>CORS_ORIGIN_REGEX_WHITELIST</code> to define a set of regular  expressions. (These settings have no effect if <code>CORS_ORIGIN_ALLOW_ALL</code> is True.) For example:</p> <pre><code>CORS_ORIGIN_WHITELIST = [\n    'https://example.com',\n]\n</code></pre>"},{"location":"configuration/security/#csrf_cookie_name","title":"CSRF_COOKIE_NAME","text":"<p>Default: <code>csrftoken</code></p> <p>The name of the cookie to use for the cross-site request forgery (CSRF) authentication token. See the Django documentation for more detail.</p>"},{"location":"configuration/security/#csrf_trusted_origins","title":"CSRF_TRUSTED_ORIGINS","text":"<p>Default: <code>[]</code></p> <p>Defines a list of trusted origins for unsafe (e.g. <code>POST</code>) requests. This is a pass-through to Django's <code>CSRF_TRUSTED_ORIGINS</code> setting. Note that each host listed must specify a scheme (e.g. <code>http://</code> or `https://).</p> <pre><code>CSRF_TRUSTED_ORIGINS = (\n    'http://netbox.local',\n    'https://netbox.local',\n)\n</code></pre>"},{"location":"configuration/security/#exempt_view_permissions","title":"EXEMPT_VIEW_PERMISSIONS","text":"<p>Default: Empty list</p> <p>A list of NetBox models to exempt from the enforcement of view permissions. Models listed here will be viewable by all users, both authenticated and anonymous.</p> <p>List models in the form <code>&lt;app&gt;.&lt;model&gt;</code>. For example:</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = [\n    'dcim.site',\n    'dcim.region',\n    'ipam.prefix',\n]\n</code></pre> <p>To exempt all models from view permission enforcement, set the following. (Note that <code>EXEMPT_VIEW_PERMISSIONS</code> must be an iterable.)</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = ['*']\n</code></pre> <p>Note</p> <p>Using a wildcard will not affect certain potentially sensitive models, such as user permissions. If there is a need to exempt these models, they must be specified individually.</p>"},{"location":"configuration/security/#login_persistence","title":"LOGIN_PERSISTENCE","text":"<p>Default: False</p> <p>If true, the lifetime of a user's authentication session will be automatically reset upon each valid request. For example, if <code>LOGIN_TIMEOUT</code> is configured to 14 days (the default), and a user whose session is due to expire in five days makes a NetBox request (with a valid session cookie), the session's lifetime will be reset to 14 days.</p> <p>Note that enabling this setting causes NetBox to update a user's session in the database (or file, as configured per <code>SESSION_FILE_PATH</code>) with each request, which may introduce significant overhead in very active environments. It also permits an active user to remain authenticated to NetBox indefinitely.</p>"},{"location":"configuration/security/#login_required","title":"LOGIN_REQUIRED","text":"<p>Default: False</p> <p>Setting this to True will permit only authenticated users to access any part of NetBox. By default, anonymous users are permitted to access most data in NetBox but not make any changes.</p>"},{"location":"configuration/security/#login_timeout","title":"LOGIN_TIMEOUT","text":"<p>Default: 1209600 seconds (14 days)</p> <p>The lifetime (in seconds) of the authentication cookie issued to a NetBox user upon login.</p>"},{"location":"configuration/security/#logout_redirect_url","title":"LOGOUT_REDIRECT_URL","text":"<p>Default: <code>'home'</code></p> <p>The view name or URL to which a user is redirected after logging out.</p>"},{"location":"configuration/security/#session_cookie_name","title":"SESSION_COOKIE_NAME","text":"<p>Default: <code>sessionid</code></p> <p>The name used for the session cookie. See the Django documentation for more detail.</p>"},{"location":"configuration/security/#session_file_path","title":"SESSION_FILE_PATH","text":"<p>Default: None</p> <p>HTTP session data is used to track authenticated users when they access NetBox. By default, NetBox stores session data in its PostgreSQL database. However, this inhibits authentication to a standby instance of NetBox without write access to the database. Alternatively, a local file path may be specified here and NetBox will store session data as files instead of using the database. Note that the NetBox system user must have read and write permissions to this path.</p>"},{"location":"configuration/system/","title":"Par\u00e2metros de Sistema","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"configuration/system/#base_path","title":"BASE_PATH","text":"<p>Default: None</p> <p>The base URL path to use when accessing NetBox. Do not include the scheme or domain name. For example, if installed at https://example.com/netbox/, set:</p> <pre><code>BASE_PATH = 'netbox/'\n</code></pre>"},{"location":"configuration/system/#default_language","title":"DEFAULT_LANGUAGE","text":"<p>Default: <code>en-us</code> (US English)</p> <p>Defines the default preferred language/locale for requests that do not specify one. This is used to alter e.g. the display of dates and numbers to fit the user's locale. See this list of standard language codes. (This parameter maps to Django's <code>LANGUAGE_CODE</code> internal setting.)</p> <p>Note</p> <p>Altering this parameter will not change the language used in NetBox. We hope to provide translation support in a future NetBox release.</p>"},{"location":"configuration/system/#docs_root","title":"DOCS_ROOT","text":"<p>Default: <code>$INSTALL_ROOT/docs/</code></p> <p>The filesystem path to NetBox's documentation. This is used when presenting context-sensitive documentation in the web UI. By default, this will be the <code>docs/</code> directory within the root NetBox installation path. (Set this to <code>None</code> to disable the embedded documentation.)</p>"},{"location":"configuration/system/#email","title":"EMAIL","text":"<p>In order to send email, NetBox needs an email server configured. The following items can be defined within the <code>EMAIL</code> configuration parameter:</p> <ul> <li><code>SERVER</code> - Hostname or IP address of the email server (use <code>localhost</code> if running locally)</li> <li><code>PORT</code> - TCP port to use for the connection (default: <code>25</code>)</li> <li><code>USERNAME</code> - Username with which to authenticate</li> <li><code>PASSWORD</code> - Password with which to authenticate</li> <li><code>USE_SSL</code> - Use SSL when connecting to the server (default: <code>False</code>)</li> <li><code>USE_TLS</code> - Use TLS when connecting to the server (default: <code>False</code>)</li> <li><code>SSL_CERTFILE</code> - Path to the PEM-formatted SSL certificate file (optional)</li> <li><code>SSL_KEYFILE</code> - Path to the PEM-formatted SSL private key file (optional)</li> <li><code>TIMEOUT</code> - Amount of time to wait for a connection, in seconds (default: <code>10</code>)</li> <li><code>FROM_EMAIL</code> - Sender address for emails sent by NetBox</li> </ul> <p>Note</p> <p>The <code>USE_SSL</code> and <code>USE_TLS</code> parameters are mutually exclusive.</p> <p>Email is sent from NetBox only for critical events or if configured for logging. If you would like to test the email server configuration, Django provides a convenient send_mail() function accessible within the NetBox shell:</p> <pre><code># python ./manage.py nbshell\n&gt;&gt;&gt; from django.core.mail import send_mail\n&gt;&gt;&gt; send_mail(\n  'Test Email Subject',\n  'Test Email Body',\n  'noreply-netbox@example.com',\n  ['users@example.com'],\n  fail_silently=False\n)\n</code></pre>"},{"location":"configuration/system/#enable_localization","title":"ENABLE_LOCALIZATION","text":"<p>Default: False</p> <p>Determines if localization features are enabled or not. This should only be enabled for development or testing purposes as netbox is not yet fully localized. Turning this on will localize numeric and date formats (overriding what is set for DATE_FORMAT) based on the browser locale as well as translate certain strings from third party modules.</p>"},{"location":"configuration/system/#http_proxies","title":"HTTP_PROXIES","text":"<p>Default: None</p> <p>A dictionary of HTTP proxies to use for outbound requests originating from NetBox (e.g. when sending webhook requests). Proxies should be specified by schema (HTTP and HTTPS) as per the Python requests library documentation. For example:</p> <pre><code>HTTP_PROXIES = {\n    'http': 'http://10.10.1.10:3128',\n    'https': 'http://10.10.1.10:1080',\n}\n</code></pre>"},{"location":"configuration/system/#internal_ips","title":"INTERNAL_IPS","text":"<p>Default: <code>('127.0.0.1', '::1')</code></p> <p>A list of IP addresses recognized as internal to the system, used to control the display of debugging output. For example, the debugging toolbar will be viewable only when a client is accessing NetBox from one of the listed IP addresses (and <code>DEBUG</code> is true).</p>"},{"location":"configuration/system/#jinja2_filters","title":"JINJA2_FILTERS","text":"<p>Default: <code>{}</code></p> <p>A dictionary of custom jinja2 filters with the key being the filter name and the value being a callable. For more information see the Jinja2 documentation. For example:</p> <pre><code>def uppercase(x):\n    return str(x).upper()\n\nJINJA2_FILTERS = {\n    'uppercase': uppercase,\n}\n</code></pre>"},{"location":"configuration/system/#logging","title":"LOGGING","text":"<p>By default, all messages of INFO severity or higher will be logged to the console. Additionally, if <code>DEBUG</code> is False and email access has been configured, ERROR and CRITICAL messages will be emailed to the users defined in <code>ADMINS</code>.</p> <p>The Django framework on which NetBox runs allows for the customization of logging format and destination. Please consult the Django logging documentation for more information on configuring this setting. Below is an example which will write all INFO and higher messages to a local file:</p> <pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': '/var/log/netbox.log',\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['file'],\n            'level': 'INFO',\n        },\n    },\n}\n</code></pre>"},{"location":"configuration/system/#available-loggers","title":"Available Loggers","text":"<ul> <li><code>netbox.&lt;app&gt;.&lt;model&gt;</code> - Generic form for model-specific log messages</li> <li><code>netbox.auth.*</code> - Authentication events</li> <li><code>netbox.api.views.*</code> - Views which handle business logic for the REST API</li> <li><code>netbox.reports.*</code> - Report execution (<code>module.name</code>)</li> <li><code>netbox.scripts.*</code> - Custom script execution (<code>module.name</code>)</li> <li><code>netbox.views.*</code> - Views which handle business logic for the web UI</li> </ul>"},{"location":"configuration/system/#media_root","title":"MEDIA_ROOT","text":"<p>Default: $INSTALL_ROOT/netbox/media/</p> <p>The file path to the location where media files (such as image attachments) are stored. By default, this is the <code>netbox/media/</code> directory within the base NetBox installation path.</p>"},{"location":"configuration/system/#reports_root","title":"REPORTS_ROOT","text":"<p>Default: <code>$INSTALL_ROOT/netbox/reports/</code></p> <p>The file path to the location where custom reports will be kept. By default, this is the <code>netbox/reports/</code> directory within the base NetBox installation path.</p>"},{"location":"configuration/system/#scripts_root","title":"SCRIPTS_ROOT","text":"<p>Default: <code>$INSTALL_ROOT/netbox/scripts/</code></p> <p>The file path to the location where custom scripts will be kept. By default, this is the <code>netbox/scripts/</code> directory within the base NetBox installation path.</p>"},{"location":"configuration/system/#search_backend","title":"SEARCH_BACKEND","text":"<p>Default: <code>'netbox.search.backends.CachedValueSearchBackend'</code></p> <p>The dotted path to the desired search backend class. <code>CachedValueSearchBackend</code> is currently the only search backend provided in NetBox, however this setting can be used to enable a custom backend. </p>"},{"location":"configuration/system/#storage_backend","title":"STORAGE_BACKEND","text":"<p>Default: None (local storage)</p> <p>The backend storage engine for handling uploaded files (e.g. image attachments). NetBox supports integration with the <code>django-storages</code> package, which provides backends for several popular file storage services. If not configured, local filesystem storage will be used.</p> <p>The configuration parameters for the specified storage backend are defined under the <code>STORAGE_CONFIG</code> setting.</p>"},{"location":"configuration/system/#storage_config","title":"STORAGE_CONFIG","text":"<p>Default: Empty</p> <p>A dictionary of configuration parameters for the storage backend configured as <code>STORAGE_BACKEND</code>. The specific parameters to be used here are specific to each backend; see the <code>django-storages</code> documentation for more detail.</p> <p>If <code>STORAGE_BACKEND</code> is not defined, this setting will be ignored.</p>"},{"location":"customization/custom-fields/","title":"Campos Customizados (Custom Fields)","text":"<p>Cada modelo do NetBox \u00e9 representado no banco de dados como uma tabela distinta e cada atributo do modelo existe como uma coluna dentro desta tabela. Por exemplo, sites (locais) s\u00e3o armazenados na tabela <code>dcim_site</code>, na qual tem colunas seguintes colunas <code>name</code>, <code>facility</code>, <code>physical_address</code> e por a\u00ed vai. Como novos atributos s\u00e3o adicionados aos objetos atrav\u00e9s do desenvolvimento do NetBox, tabelas s\u00e3o expandidas para incluir novas linhas.</p> <p>No entanto, alguns usu\u00e1rios podem querer armazenar atributos de objetos adicionais que s\u00e3o de alguma forma incomum em sua natureza, e que n\u00e3o faria sentido incluir no c\u00f3digo principal do NetBox de schema do banco de dados. Por exemplo, suponha que sua organiza\u00e7\u00e3o precise associar cada dispositivo com um n\u00famero de ticket correlacionando-o com seu sistema de suporte. Isso \u00e9 certamente um uso leg\u00edtimo dentro do NetBox, mas n\u00e3o \u00e9 uso suficientemente comum para ser adicionado como um campo em cada instala\u00e7\u00e3o do NetBox. Por\u00e9m, voc\u00ea pode criar um campo customizado para armazenar essa informa\u00e7\u00e3o.</p> <p>Dentro do banco de dados, campos customizados s\u00e3o armazenados como um JSON junto com cada objeto. Isso alivia a necessidade de queries (pesquisas) complexas na hora de pesquisar e obter os dados dos objetos no banco de dados.</p>"},{"location":"customization/custom-fields/#criando-campos-customizados","title":"Criando Campos Customizados","text":"<p>Campos customizados podem ser criados navegando em Customization &gt; Custom FIelds. NetBOx suporta diversos tipos de campos customizados:</p> <ul> <li>Text: Texto free-form (texto usado para somente uma linha)</li> <li>Long text: Suporta de qualquer tamanho; suporta renderiza\u00e7\u00e3o de Markdown</li> <li>Integer: Um n\u00famero inteiro (positivo ou negativo)</li> <li>Decimal: Um n\u00famero decimal de precis\u00e3o fixa (04 casas decimais poss\u00edveis)</li> <li>Boolean: Verdadeiro ou falso</li> <li>Date: Uma data no formato ISO 8601 (YYYY-MM-DD)</li> <li>URL: Ser\u00e1 representado como um link na web UI (interface web)</li> <li>JSON: Dados arbitr\u00e1rios armazenados no formato JSON</li> <li>Selection: Uma sele\u00e7\u00e3o de uma ou v\u00e1rias escolhas customizadas pr\u00e9-definidas</li> <li>Multiple selection:Uma sele\u00e7\u00e3o de campos que suportam a atre\u00e7\u00e3o de diversos valores</li> <li>Object: Um tipo de objeto \u00fanico definido por <code>object_type</code></li> <li>Multiple object: Um ou mais tipos de objetos definidos em <code>object_type</code></li> </ul> <p>Cada campo customizado deve ter um nome. O nome pode ser um simples nome (como <code>tps_report</code>) ou um ainda que contenha caracteres alfa-n\u00famericos e underscores. Voc\u00ea pode tamb\u00e9m atribuir uma tag (label) facilmente lida por humanos como \"TPS report\"; essa label aparecer\u00e1 nos form\u00falarios web. Um peso tamb\u00e9m \u00e9 obrigat\u00f3rio: Pesos (weight) maiores ser\u00e3o orderados embaixo dentro de um formul\u00e1rio (O peso padr\u00e3o \u00e9 100). Se uma descri\u00e7\u00e3o \u00e9 fornecida, ela aparecer\u00e1 abaixo do campo no formul\u00e1rio.</p> <p>Marcar um campo como obrigat\u00f3rio ir\u00e1 for\u00e7ar o usu\u00e1rio a fornecer o valor para aquele campo quando criar um novo objeto ou quando estiver salvando um objeto existente. Um valor padr\u00e3o (default value) para o campo pode tamb\u00e9m ser fornecido. Use \"true\" (verdadeiro) ou \"false\" (falso) para campos booleanos (boolean).</p> <p>Um campo customizado deve ser atrelado a um ou mais tipos de objetos, ou modelos (models) dentro do NetBox. Uma vez criado, campos customizados aparecer\u00e3o automaticamente como parte desses modelos dentro da interface web e consultas REST API. Note que nem todos os modelos do NetBox suportam campos customizados.</p>"},{"location":"customization/custom-fields/#filtros-filtering","title":"Filtros (Filtering)","text":"<p>A l\u00f3gico de filtros controla como os valores s\u00e3o d\u00e3o match (correspondem) na hora de filtrar objetos utilizando os campos customizados. Loose filtering (filtro padr\u00e3o) d\u00e1 match em um valor parcial, enquanto que o matching exato requer um match completo do valor de um campo em string. Por exemplo, filtragem exata dar\u00e1 match em \"vermelho\" somente se o valor fornecido na pesquisa for exatamente \"vermelho\", enquanto que a filtragem \"folgada\" (loose) dar\u00e1 match em \"vermelho\", \"vermelho escuro\", \"vermelho claro\" se o valor \"vermelho\" for fornecido. Mudando a configura\u00e7\u00e3o da l\u00f3gica do filtro (filter logic) para \"disabled\" (desabilitado) desativa a filtragem por campo inteiramente.</p>"},{"location":"customization/custom-fields/#agrupamento-grouping","title":"Agrupamento (Grouping)","text":"<p>Note</p> <p>Essa feature (fun\u00e7\u00e3o) foi introduzida na vers\u00e3o v3.3 do NetBox.</p> <p>Campos customizados relacionados podem ser agrupados juntos dentro da interface do usu\u00e1rio (UI) ao atrelar cada objeto ao mesmo nome de grupo. Quando ao menos um campo customizado de um tipo de objeto tem seu grupo definido, ele aparecer\u00e1 abaixo do grupo dentro do painel de cumpos customizados na visualiza\u00e7\u00e3o do objeto. Todos os campos cutomizados dentro do mesmo grupo aparecer\u00e1 abaixo do mesmo grupo nomeado. (Note que o nome do grupo deve ser exato para que apare\u00e7am juntos.)</p> <p>Esse par\u00e2metro n\u00e3o tem efeito na representa\u00e7\u00e3o dos dados de campos customizados na API.</p>"},{"location":"customization/custom-fields/#visibilidade","title":"Visibilidade","text":"<p>Note</p> <p>Essa feature (fun\u00e7\u00e3o) foi introduzida na vers\u00e3o v3.3 do NetBox.</p> <p>Ao criar um campo customizado, h\u00e1 tr\u00eas op\u00e7\u00f5es de visibilidade na interface do usu\u00e1rio (UI). Essas op\u00e7\u00f5es controlam como ou quando um campo customizado deve ser exibilido dentro do NetBox. - Read/write: (padr\u00e3o) O campo customizado \u00e9 inclu\u00eddo ao ver e editar objetos (leitura e escrita). - Read-only: O campo customizado \u00e9 exibido ao ver um objeto, mas n\u00e3o pode ser editado pela interface web (UI). O campo aparecer\u00e1 no formul\u00e1rio como um campo de leitura somente. - Hidden: O campo customizado nunca ser\u00e1 exibido dentro da interface web (UI). Essa op\u00e7\u00e3o \u00e9 recomendada para campos que n\u00e3o t\u00eam a finalidade de serem utilizadas por usu\u00e1rios humanos (apenas para automa\u00e7\u00e3o via API).</p>"},{"location":"customization/custom-fields/#validacao","title":"Valida\u00e7\u00e3o","text":"<p>NetBox suporta valida\u00e7\u00e3o customizada e limitada para os valores dos campos customizados. Abaixo est\u00e3o os tipos de valida\u00e7\u00e3o dispon\u00edveis para cada tipo de campo: - Text: Express\u00e3o regular de texto (opcional) - Integer: Valor m\u00ednimo e m\u00e1ximo (opcional) - Selection: Deve dar match exato um dos valores pr\u00e9-definidos (lista de valores pr\u00e9-definidos)</p>"},{"location":"customization/custom-fields/#selecao-customizada-de-campos","title":"Sele\u00e7\u00e3o customizada de Campos","text":"<p>Cada sele\u00e7\u00e3o customizada de campos deve ter ao menos duas escolhas. Essa lista \u00e9 definida separando os valores por v\u00edrgula. Escolhas (choices) aparecerem no formul\u00e1rio na ordem em que s\u00e3o listados. Note que os valores de escolha s\u00e3o salvados exatamente como aparecem, ent\u00e3o \u00e9 melhor evitar pontua\u00e7\u00f5es e s\u00edmbolos aonde for poss\u00edvel.</p> <p>Se um valor padr\u00e3o (default value) for especificado em um campo de sele\u00e7\u00e3o (selection field), este valor deve dar match exato em um ou mais das escolhas fornecidas. O valor de um campo de sele\u00e7\u00e3o m\u00faltipla sempre retornar\u00e1 como uma lista, mesmo que somente um valor seja escolhido.</p>"},{"location":"customization/custom-fields/#campos-de-objeto-customizados","title":"Campos de Objeto customizados","text":"<p>Um campo de objeto ou multi-objetos pode ser usado para referenciar um objeto em particular do NetBox como o valor de um campo customizado (custom fields). Esse campo customizado deve definir um <code>object_type</code>, que determina o tipo de objeto que o campo customizado pode apontar.</p>"},{"location":"customization/custom-fields/#campos-customizados-em-templates","title":"Campos Customizados em Templates","text":"<p>Varias features (fun\u00e7\u00f5es ou caracter\u00edsticas) do NetBox, como a exporta\u00e7\u00e3o de templates e webhooks, utiliza o Jinja2. Por conveni\u00eancia, objetos que suportam a atrela\u00e7\u00e3o de campos customizados exbie os dados do campo customizado pela propriedade <code>cf</code>. Isso \u00e9 fica um pouco mais limpo do que acessar o campo customizado pelo seu nome real (<code>custom_field_data</code>).</p> <p>Por exemplo, um camo customizado nomeado de <code>foo123</code> no modelo (model) de Site (local) \u00e9 acess\u00edvel usando <code>{{ site.cf.foo123}}</code>.</p>"},{"location":"customization/custom-fields/#campos-customizados-e-a-api-rest","title":"Campos Customizados e a API REST","text":"<p>Ao obter os dados de um objeto pela API REST, todos os dados do campo customizados ser\u00e3o inclu\u00eddos dentro do atributo <code>custom_fields</code>. Por exemplo, abaixo est\u00e1 a exibido o resultado parcial de um site (local) com dois campos customizados definidos:</p> <pre><code>{\n\"id\": 123,\n\"url\": \"http://localhost:8000/api/dcim/sites/123/\",\n\"name\": \"Raleigh 42\",\n\"custom_fields\": {\n\"deployed\": \"2018-06-19\",\n\"site_code\": \"US-NC-RAL42\"\n},\n}\n</code></pre> <p>Para definir ou mudar esses valores, simplesmente inclua os dados do JSON de forma aninhada, por exemplo:</p> <pre><code>{\n\"name\": \"New Site\",\n\"slug\": \"new-site\",\n\"custom_fields\": {\n\"deployed\": \"2019-03-24\"\n}\n}\n</code></pre>"},{"location":"customization/custom-links/","title":"Links Customizados (Custom Links)","text":"<p>Links customizados permitem que os usu\u00e1rios mostrem links arbitr\u00e1rios com conte\u00fado externo dentro da visualiza\u00e7\u00e3 ode objetos no NetBox. Eles s\u00e3o \u00fateis para croos-referencing (refer\u00eancia cruzada) relacionadas a registros em sistemas fora do NetBox. Por exemplo, voc\u00ea pode querer criar um link customizado dentro da visualiza\u00e7\u00e3o do dispositivo que mande o usu\u00e1rio para o mesmo dispositivo no Network Monitoring System (ou sistema de monitoramento). </p> <p>Esses links customizados s\u00e3o criados navegando por Customization &gt; Custom Links. Cada link \u00e9 asssociado com um tipo de objeto em particular no NetBox (site, device, prefix, etc.) e ser\u00e1 mostrado nessas views (p\u00e1ginas web). Cada link tem que mostrar um texto que contenha uma URL, e os dados do item do NetBox sendo visualizado pode ser incluido no link utilizando c\u00f3digo de template do Jinja2 atrav\u00e9s da vari\u00e1vel <code>obj</code> e campos customizados atrav\u00e9s de <code>obj.cf</code>.</p> <p>Por exemplo, voc\u00ea talvez queira definir um link como o abaixo: - Texto: <code>Visualizar no NMS</code> - URO: <code>https://nms.example.com/nodes?name={{ obj.name }}</code></p> <p>Ao visualizar um dispositivo nomeado de <code>Router4</code>, esse link seria renderizado como:</p> <pre><code>&lt;a href=\"https://nms.example.com/nodes/?name=Router4&gt;Visualizar no NMS&lt;/a&gt;\n</code></pre> <p>Links customizados aparecem como bot\u00f5es na parte superior direita da p\u00e1gina. Peso n\u00famero pode ser utilizado para influenciar como esses bot\u00f5es de link ser\u00e3o ordenados, e cada link pode ser habilitado ou desabilitado manualmente.</p> <p>Warning</p> <p>Links customizados dependem de c\u00f3digo criado pelo usu\u00e1rio para gerar a sa\u00edda HTML, que pode ser perigoso. Apenas garanta permiss\u00f5es para criar ou modificar links customizados para usu\u00e1rios confi\u00e1veis.</p>"},{"location":"customization/custom-links/#dados-de-contexto-context-data","title":"Dados de Contexto (Context Data)","text":"<p>Os seguintes dados de contexto est\u00e3o dispon\u00edvels dentro do template na hora de renderizar um o texto ou URL de um link customizado.</p> Vari\u00e1vel Descri\u00e7\u00e3o <code>object</code> O objeto do Netbox sendo exibido <code>obj</code> Mesma coisa que <code>object</code>; \u00e9 mantido para compatibilidade com vers\u00f5es anteriores at\u00e9 a vers\u00e3o v3.5 do Netbox <code>debug</code> Um booleano (boolean) indicando se debugging est\u00e1 habilitado. <code>request</code> Representa a requisi\u00e7\u00e3o WSGI corrente <code>user</code> O usu\u00e1rio atual (se estiver autenticado) <code>perms</code> As permiss\u00f5es atribu\u00eddas ao usu\u00e1rio <p>Enquanto que a maioria das vari\u00e1veis de contexto listadas acima possuem atributos consistentes, o objeto ser\u00e1 uma inst\u00e2ncia espec\u00edfica do objeto sendo visualizado quando o link estiver sendo renderizado. Diferentes models (modelos) t\u00eam direntes campos e propriedades, ent\u00e3o talvez voc\u00ea queira pesquisar para conseguir determinar se os atributos disponve\u00eds para uso no template est\u00e3o dispon\u00edveis para o tipo de objeto em quest\u00e3o.</p> <p>Verificar a representa\u00e7\u00e3o REST API de um objeto \u00e9 geralmente o jeito mais conveniente de verificar quais atributos est\u00e3o dispon\u00edveis. Voc\u00ea tamb\u00e9m pesquisar pelo c\u00f3digo fonte do NetBox diretamente para obter informa\u00e7\u00f5es mais completas.</p>"},{"location":"customization/custom-links/#renderizacao-condicional-conditional-rendering","title":"Renderiza\u00e7\u00e3o condicional (Conditional Rendering)","text":"<p>Apenas links que renderizam textos n\u00e3o v\u00e1rios (non-empty) s\u00e3o inclu\u00eddos nesta p\u00e1gina. Como pode utilizar a l\u00f3gica condicional do Jinja2 para controlar as condi\u00e7\u00f5es pela qual um link \u00e9 renderizado.</p> <p>Por exemplo, se voc\u00ea quer mostrar links customizados somente para dispositivos que estejam ativos, voc\u00ea pode configurar o texto do link para:</p> <pre><code>{% if obj.status == 'active\" %}Visualizar no NMS{% endif %}\n</code></pre> <p>O link acima n\u00e3o ir\u00e1 aparecer ao visualizar dispositivos que n\u00e3o tenham o status como \"active\" (ativo).</p> <p>Outro exemplo \u00e9 se voc\u00ea quiser mostrar somente os dispositivos que perten\u00e7am a um fabricante (manufacturer) espec\u00edfico, voc\u00ea poderia fazer algo como:</p> <pre><code>{% if obj.device_type.manufacturer.name == 'Cisco' %}Visualizar no NMS{% endif %}\n</code></pre> <p>O link apenas aparecer\u00e1 ao visualizar dispositivos que a fabricante seja a \"Cisco\".</p>"},{"location":"customization/custom-links/#grupos-de-link-link-groups","title":"Grupos de Link (Link Groups)","text":"<p>Nomes de grupo podem ser definidos para organizar links em grupos. Links com o mesmo nome de grupo ser\u00e3o renderizados como um menu de lista dropdown abaixo de um bot\u00e3o \u00fanico com o nome do grupo.</p>"},{"location":"customization/custom-links/#tabela-de-colunas-table-columns","title":"Tabela de Colunas (Table Columns)","text":"<p>Links customizados podem tamb\u00e9m ser inclu\u00eddos na tabela de um objeto ao selecionar os links desej\u00e1veis na configura\u00e7\u00e3o do formul\u00e1rio da tabela. Quando exibidos, cada link ir\u00e1 renderizar um hyperlink para o objeto correspondente. Quando exportado (via CSV, por exemplo), cada link renderizar\u00e1 somente sua URL.</p>"},{"location":"customization/custom-scripts/","title":"Scrips Customizados","text":"<p>Scripts customizados foram introduzidos para permitir que o usu\u00e1rio execute uma l\u00f3gica customizada dentro da interface web dentro do NetBox. Esses scripts customizados permitem que o usu\u00e1rio manipular diretamente e convenientemente os dados do NetBox de forma prevista. Eles podem realizar diversas tarefas, como: - Automaticamente popular novos dispositivos e cabos em prepara\u00e7\u00e3o para o provisionamento de um novo site - Criar um range de prefixo reservado ou endere\u00e7os IP - Obter (fetch) de uma origem externa e import\u00e1-la para o NetBox</p> <p>Scripts customizados s\u00e3o c\u00f3digo Python e existem fora do c\u00f3digo fonte do NetBox, ent\u00e3o eles podem ser atualizados e modificados sem interferir o c\u00f3digo de instala\u00e7\u00e3o em si do NetBox. E porque eles s\u00e3o completamente customizados, n\u00e3o h\u00e1 nenhuma limita\u00e7\u00e3o relacionada com oque o script pode realizar.</p>"},{"location":"customization/custom-scripts/#escrevendo-scripts-customizados","title":"Escrevendo scripts customizados","text":"<p>Todos os scripts customizados devem herdar a classe base <code>extras.scripts.Script</code>. Essa classe fornece as funcionalidades necess\u00e1rias para gerar formul\u00e1rios e ativadade de log.</p> <pre><code>from extras.scripts import Script\n\nclass MyScript(Script):\n    ...\n</code></pre> <p>Scripts s\u00e3o formados basicamente por dois componentes: um set de vari\u00e1veis e o m\u00e9todo <code>run()</code>. Vari\u00e1veis permitem que seu script aceite entrada (input) do usu\u00e1rio via uma interface web conveniente no NetBox, mas s\u00e3o opcionais. Se o seu script n\u00e3o precisa de um input do usu\u00e1rio, n\u00e3o h\u00e1 necessidade de definir qualquer vari\u00e1vel.</p> <p>O m\u00e9todo <code>run()</code> \u00e9 onde a l\u00f3gica do script reside (Note que seu script pode ter v\u00e1rios m\u00e9todos conforme sua necessidade: isso \u00e9 peramente um ponto de invoca\u00e7\u00e3o para o NetBox).</p> <pre><code>class MyScript(Script):\n    var1 = StringVar(...)\n    var2 = IntegerVar(...)\n    var3 = ObjectVar(...)\n\n    def run(self, data, commit):\n        ...\n</code></pre> <p>O m\u00e9todo <code>run()</code> aceita dois argumentos: - <code>data</code> - Um dicion\u00e1rio (dict) contendo todas os dados da vari\u00e1vel passadas pelo formul\u00e1rio na interface web. - <code>commit</code> - Um booleano (boolean) indicando se as mudan\u00e7as no banco de dados ser\u00e3o salvas (committed).</p> <p>Note</p> <p>O argumento <code>commit</code> foi introduzido na vers\u00e3o v2.7.8 do NetBox. Compatibilidade com vers\u00f5es anteriores s\u00e3o mantidas para scritps que aceitam somente o argumento <code>data</code>, no entanto depois da vers\u00e3o v2.10, o NetBox ir\u00e1 exigir o m\u00e9todo <code>run()</code> para todos os scripts, para aceitar ambos argumentos (Cada argumento, no entanto, pode ainda ser ignorado dentro do m\u00e9todo)</p> <p>Definir vari\u00e1veis do script \u00e9 opcional: Voc\u00ea pode criar um script somente com <code>run()</code> se o input do usu\u00e1rio n\u00e3o for necess\u00e1rio.</p> <p>Qualquer sa\u00edda (output) gerado pelo script durante a execu\u00e7\u00e3o ser\u00e1 mostrada abaixo de \"output\" dentro da interface web.</p> <p>Por padr\u00e3o, scripts dentro de um m\u00f3dulo s\u00e3o ordenados alfabeticamente na p\u00e1gina que lista os scripts. Para retornar os scripts em uma ordem espec\u00edfica, voc\u00ea pode finir a vari\u00e1vel <code>script_order</code> no final do seu m\u00f3dulo. A vari\u00e1vei <code>script_order</code> \u00e9 um tuple que cont\u00e9m cada classe <code>Script</code> na ordem desejada. Qualquer script que for omitido da lista ser\u00e1 posto no final da fila de listagem.</p> <pre><code>from extras.scripts import Script\n\nclass MyCustomScript(Script):\n    ...\n\nclass AnotherCustomScript(Script):\n    ...\n\nscript_order = (MyCustomScript, AnotherCustomScript)\n</code></pre>"},{"location":"customization/custom-scripts/#atributos-do-modulo","title":"Atributos do M\u00f3dulo","text":""},{"location":"customization/custom-scripts/#name","title":"<code>name</code>","text":"<p>Voc\u00ea pode definir <code>name</code> dentro do m\u00f3dulo script (o arquivo Python cont\u00e9m um ou mais scripts) para definir o nome do m\u00f3dulo. Se n\u00e3o houver defini\u00e7\u00e3o da vari\u00e1vel <code>name</code>, o nome do arquivo do m\u00f3dulo ser\u00e1 utilizado.</p>"},{"location":"customization/custom-scripts/#description","title":"<code>description</code>","text":"<p>Uma descri\u00e7\u00e3o sobre a fun\u00e7\u00e3o do script para ser lida pelo usu\u00e1rio.</p>"},{"location":"customization/custom-scripts/#field_order","title":"<code>field_order</code>","text":"<p>Por padr\u00e3o, as vari\u00e1veis do script ser\u00e3o ordenadas no formul\u00e1rio conforme foram definidas dentro do script. <code>field_order</code> pode ser declarada como um iterador (iterable) de nomes dos campos para determinar a ordem pela qual as vari\u00e1veis ser\u00e3o renderizadas dentro do group default \"Script Data\". Qualquer campo n\u00e3o incluso neste iterable ser\u00e1 listado no final do formul\u00e1rio. Se <code>fieldsets</code> for definido, <code>field_order</code> ser\u00e1 ignorado. Um grupo de fieldset para \"Script Execution Parameters\" ser\u00e1 adicionado ao final do formul\u00e1rio por padr\u00e3o para o usu\u00e1rio.</p>"},{"location":"customization/custom-scripts/#fieldsets","title":"<code>fieldsets</code>","text":"<p><code>fieldsets</code> podem ser definidos tamb\u00e9m como um iterador (iterable) para grupos de campos e seus nomes de campo determinam a ordem na qual as vari\u00e1vels ser\u00e3o agrupadas e renderizadas. Qualquer campo n\u00e3o incluso nesse iterador n\u00e3o ser\u00e1 exibido no formul\u00e1rio. Se <code>fieldsets</code> for definido, <code>field_order</code> ser\u00e1 ignorado. Um grupo fieldset para \"Script Execution Parameters\" ser\u00e1 adicionado ao final do fieldset por padr\u00e3o para o usu\u00e1rio.</p> <p>Um exemplo de defini\u00e7\u00e3o de fieldset \u00e9 fornecido abaixo:</p> <pre><code>class MyScript(Script):\n    class Meta:\n        fieldsets = (\n            ('First group', ('field1', 'field2', 'field3')),\n            ('Second group', ('field4', 'field5')),\n        )\n</code></pre>"},{"location":"customization/custom-scripts/#commit_default","title":"<code>commit_default</code>","text":"<p>O checkbot para salvar as mudan\u00e7as para o banco de dados quando o script for executado \u00e9 ativado por default. Configurar <code>commit_default</code> para <code>False</code> abaixo da classe Meta do script deixa essa op\u00e7\u00e3o desmarcada por padr\u00e3o.</p>"},{"location":"customization/custom-scripts/#job_timeout","title":"<code>job_timeout</code>","text":"<p>Configura o valor m\u00e1ximo permitido para que o script execute. Se n\u00e3o configurado, <code>RQ_DEFAULT_TIMEOUT</code> ser\u00e1 utilizado.</p> <p>Info</p> <p>Essa caracter\u00edstica foi introduzida na vers\u00e3o v3.2.1 do NetBox.</p>"},{"location":"customization/custom-scripts/#acessando-os-dados-da-requisicao","title":"Acessando os Dados da Requisi\u00e7\u00e3o","text":"<p>Detalhes da requisi\u00e7\u00e3o HTTP corrente (a que est\u00e1 sendo feita pela execu\u00e7\u00e3o do script) est\u00e3o dispon\u00edveis como uma inst\u00e2ncia do atributo <code>self.request</code>. Ela pode ser utilizada para obter, por exemplo, o usu\u00e1rio executando o script e o endere\u00e7o IP do cliente:</p> <pre><code>username = self.request.user.username\nip_address = self.request.META.get('HTTP_X_FORWARDED_FOR') or \\\n    self.request.META.get('REMOTE_ADDR')\nself.log_info(f\"Running as user {username} (IP: {ip_address})...\")\n</code></pre> <p>Para uma lista de completa de par\u00e2metros da requisi\u00e7\u00e3o dispon\u00edveis, por favor verifique a documenta\u00e7\u00e3o do Django.</p>"},{"location":"customization/custom-scripts/#lendos-dados-de-um-arquivo","title":"Lendos Dados de um Arquivo","text":"<p>A classe <code>Script</code> fornece dois m\u00e9todos convenientes para ler os dados de um arquivo:</p> <ul> <li><code>load_yaml</code></li> <li><code>load_json</code></li> </ul> <p>Esses dois m\u00e9todos ir\u00e3o carregar os dados nos formatos YAML e JSON, respectivamente, dos arquivos dentro do caminho (path) local (por exemplo, <code>SCRIPTS_ROOT</code>).</p>"},{"location":"customization/custom-scripts/#logging","title":"Logging","text":"<p>O objeto <code>Script</code> prov\u00ea um conjunto de fun\u00e7\u00f5es convenientes para registrar as mensagens de log em diferentes n\u00edveis de severidade. - <code>log_debug</code> - <code>log_success</code> - <code>log_info</code> - <code>log_warning</code> - <code>log_failure</code></p> <p>Mensagens de log s\u00e3o retornadas ao usu\u00e1rio na hora da execu\u00e7\u00e3o do script. Renderiza\u00e7\u00e3o em Markdown \u00e9 suportada para as mensagens de log.</p>"},{"location":"customization/custom-scripts/#change-logging-mudancas","title":"Change Logging (Mudan\u00e7as)","text":"<p>Para gerar os dados corretos do change log ao editar um objeto existente, uma snapshot (espelho) do objeto deve ser salvo antes de fazer qualquer mudan\u00e7a ao objeto.</p> <pre><code>if obj.pk and hasattr(obj, 'snapshot'):\n    obj.snapshot()\n\nobj.property = \"New Value\"\nobj.full_clean()\nobj.save()\n</code></pre>"},{"location":"customization/custom-scripts/#error-handling-lidando-com-os-erros","title":"Error Handling (Lidando com os Erros)","text":"<p>\u00c1s vezes as coisas podem dar errado e o script cair\u00e1 em uma <code>Exception</code>. Se isso acontecer e uma exce\u00e7\u00e3o n\u00e3o esperada for acionada pelo script customizado, a execu\u00e7\u00e3o \u00e9 abortada e um <code>full stack trace</code> \u00e9 reportado.</p> <p>Embora isso seja \u00fatil para debugging, em algumas siuta\u00e7\u00f5es pode ser exigido abortar de forma limpa a execu\u00e7\u00e3o do script customizado (porque o usu\u00e1rio inseriu um input errado, por exemplo) e ent\u00e3o ter certeza que de nenhuma altera\u00e7\u00e3o foi feita no banco de dados. Neste caso, o script pode acionar uma exce\u00e7\u00e3o do tipo <code>AbortScript</code>, que ir\u00e1 prevenir que o stack trace seja reportado, mas ainda assim terminando a exeu\u00e7\u00e3o do script e reportando uma mensagem de erro.</p> <pre><code>from utilities.exceptions import AbortScript\n\nif some_error:\n    raise AbortScript(\"Some meaningful error message\")\n</code></pre>"},{"location":"customization/custom-scripts/#variaveis-de-referencia","title":"Vari\u00e1veis de Refer\u00eancia","text":""},{"location":"customization/custom-scripts/#opcoes-padroes-default","title":"Op\u00e7\u00f5es Padr\u00f5es (Default)","text":"<p>Todos os scripts customizados suportam as seguintes op\u00e7\u00f5es padr\u00f5es:</p> <ul> <li><code>default</code> - Valor padr\u00e3o (default) do campo</li> <li><code>description</code> - Uma breve descri\u00e7\u00e3o do campo fornecida ao usu\u00e1rio</li> <li><code>label</code> - O nome do campo para ser exibido no formul\u00e1rio renderizado</li> <li><code>required</code> - Indica se o campo \u00e9 mandat\u00f3rio (obrigat\u00f3rio), todos os campos s\u00e3o mandat\u00f3rios, por padr\u00e3o</li> <li><code>widget</code> - A classe que o formul\u00e1rio widget utiliza (para mais informa\u00e7\u00f5es, veja a documenta\u00e7\u00e3o  do Django)</li> </ul>"},{"location":"customization/custom-scripts/#stringvar","title":"StringVar","text":"<p>Armazena a string de caracteres (texto). As op\u00e7\u00f5es s\u00e3o:</p> <ul> <li><code>min_length</code> - N\u00famero m\u00ednimo de caracteres</li> <li><code>max_length</code> - N\u00famero m\u00e1ximo de caracteres</li> <li><code>regex</code> - Uma express\u00e3o regular contra qual o valor fornecido deve dar match</li> </ul> <p>Note que <code>min_length</code> e <code>max_length</code> podem ser definidas para o mesmo n\u00famero para o campo tenha um valor de tamanho fixo.</p>"},{"location":"customization/custom-scripts/#textvar","title":"TextVar","text":"<p>Texto arbitr\u00e1rio de qualquer tamanho. Renderiza um texto de m\u00faltiplas linhas do campo.</p>"},{"location":"customization/custom-scripts/#integervar","title":"IntegerVar","text":"<p>Armazena um n\u00famero. As op\u00e7\u00f5es s\u00e3o:</p> <ul> <li><code>min_value</code> - Valor m\u00ednimo</li> <li><code>max_value</code> - Valor m\u00e1ximo</li> </ul>"},{"location":"customization/custom-scripts/#booleanvar","title":"BooleanVar","text":"<p>Valor <code>true/false</code>. Esse campo n\u00e3o tem op\u00e7\u00f5es al\u00e9m das op\u00e7\u00f5es padr\u00f5es citadas.</p>"},{"location":"customization/custom-scripts/#choicevar","title":"ChoiceVar","text":"<p>Um conjunto de escolhas na qual o usu\u00e1rio pode selecionar.</p> <ul> <li><code>choices</code> - Uma lista de tuples (<code>value</code>, <code>label</code>) representando as escolhas dispon\u00edveis. Por exemplo: <pre><code>CHOICES = (\n    ('n', 'North'),\n    ('s', 'South'),\n    ('e', 'East'),\n    ('w', 'West')\n)\n\ndirection = ChoiceVar(choices=CHOICES)\n</code></pre></li> </ul> <p>No exemplo acima, selecionar o campo definido como \"North\" ir\u00e1 submeter o valor <code>n</code>.</p>"},{"location":"customization/custom-scripts/#muiltichoicevar","title":"MuiltiChoiceVar","text":"<p>Similar ao <code>ChoiceVar</code>, mas permite a sele\u00e7\u00e3o m\u00faltiplas escolhas.</p>"},{"location":"customization/custom-scripts/#objectvar","title":"ObjectVar","text":"<p>Um objeto em particular dentro do NetBox. Cada ObjectVar deve esepcificar um modelo em partiular e permite que o usu\u00e1rio selecione uma das inst\u00e2ncias dispon\u00edveis. ObjectVar aceita diversos argumentos, que est\u00e3o listadas abaixo:</p> <ul> <li><code>model</code> - A classe do modelo</li> <li><code>query_params</code> - Um dicion\u00e1rio dos par\u00e2metros da query para usar ao obter as op\u00e7\u00f5es dispon\u00edveis (opcional)</li> <li><code>null_option</code> - Uma label repesenta\u00e7\u00e3o \"null\" ou escolha vazia (opcional)</li> </ul> <p>Para limitar as sele\u00e7\u00f5es dispon\u00edveis dentro da lista, par\u00e2metros da query adicionais podem ser passados pelo dicion\u00e1rio <code>query_params</code>. Por exemplo, para mostrar somente dispositivos com o status \"active\" (ativo):</p> <pre><code>device = ObjectVar(\n    model=Device,\n    query_params={\n        'status': 'active'\n    }\n)\n</code></pre> <p>M\u00faltiplis valores podem ser especificados ao atrelar uma lista a chave do dicion\u00e1rio (dict key). Pode tamb\u00e9m ser poss\u00edvel referenciar um valor para os outros campos dentro do formul\u00e1rio ao colocar um sinal de d\u00f3lar (dollar sign) no in\u00edcio do nome da vari\u00e1vel.</p> <pre><code>region = ObjectVar(\n    model=Region\n)\nsite = ObjectVar(\n    model=Site,\n    query_params={\n        'region_id': '$region'\n    }\n)\n</code></pre>"},{"location":"customization/custom-scripts/#multiobjectvar","title":"MultiObjectVar","text":"<p>Similar ao <code>ObjectVar</code>, mas permite a sele\u00e7\u00e3o de v\u00e1rios objetos.</p>"},{"location":"customization/custom-scripts/#filevar","title":"FileVar","text":"<p>Um arquivo que foi feito upload para o NetBox. Observe que os arquivos est\u00e3o armazenados na mem\u00f3ria somente durante a execu\u00e7\u00e3o do script: n\u00e3o ser\u00e3o automaticamente salvos para uso futuro. O script \u00e9 respons\u00e1vel para escrever o conte\u00fado do arquivo em disco, quando necess\u00e1rio.</p>"},{"location":"customization/custom-scripts/#ipaddressvar","title":"IPAddressVar","text":"<p>Um endere\u00e7o IPv4 ou IPv6, sem a m\u00e1scara de rede. Retorna um objeto <code>netaddr.IPAddress</code></p>"},{"location":"customization/custom-scripts/#ipaddresswithmaskvar","title":"IPAddressWithMaskVar","text":"<p>Um endere\u00e7o IPv4 ou IPv6 com a m\u00e1scara. Retorna um objeto <code>netaddr.IPNetwork</code> que inclui a m\u00e1scara de rede.</p>"},{"location":"customization/custom-scripts/#ipnetworkvar","title":"IPNetworkVar","text":"<p>Um endere\u00e7o IPv4 ou IPv6 com a m\u00e1scara. Retorna um objeto <code>netaddr.IPNetwork</code>. Dois atributos s\u00e3o dispon\u00edveis para validar a m\u00e1scara fornecida:</p> <ul> <li><code>min_prefix_length</code> - Tamanho m\u00ednimo da m\u00e1scara de rede</li> <li><code>max_prefix_length</code> - Tamanho m\u00e1ximo da m\u00e1scara de rede</li> </ul>"},{"location":"customization/custom-scripts/#executando-scripts-customizados","title":"Executando Scripts Customizados","text":"<p>Note</p> <p>Para executar um script customizado, um usu\u00e1rio deve atrelar a permiss\u00e3o de <code>extras.run_script</code>. Isso \u00e9 alcan\u00e7ado ao atrelar a permiss\u00e3o do usu\u00e1rio (ou grupo) no objeto <code>Script</code> e especificando a a\u00e7\u00e3o <code>run</code> dentro da interface web de Admin como mostrado abaixo.</p> <p></p>"},{"location":"customization/custom-scripts/#atraves-da-interface-web","title":"Atrav\u00e9s da interface web","text":"<p>Scripts customiados podem rodar na interface web navegando para o script, preenchendo qualquer dados do formul\u00e1rio, e clicando no bot\u00e3o \"run script\". \u00c9 poss\u00edvel agendar um script para ser executado em qualquer hor\u00e1rio no futuro. Um script agendado pode ser cancelado ao deletar um resultado de job (tarefa) associada ao objeto.</p>"},{"location":"customization/custom-scripts/#atraves-da-api","title":"Atrav\u00e9s da API","text":"<p>Para rodar o script pela API REST, utilize uma requisi\u00e7\u00e3o POST para o endpoint de scripts especificando os dados do formul\u00e1rio e o commitment. Por exemplo, para executar um script nomeado de <code>example.MyReport</code>, n\u00f3s far\u00edamos uma requisi\u00e7\u00e3o como a seguinte:</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox/api/extras/scripts/example.MyReport/ \\\n--data '{\"data\": {\"foo\": \"somevalue\", \"bar\": 123}, \"commit\": true}'\n</code></pre> <p>Opcionalmente, <code>schedule_at</code> pode ser passado nos dados do formul\u00e1rio com uma string de datetime (date e hor\u00e1rio) para especificar o agendamento de execu\u00e7\u00e3o de um script.</p>"},{"location":"customization/custom-scripts/#atraves-da-cli","title":"Atrav\u00e9s da CLI","text":"<p>Scripts podem rodar na CLI ao utilizar o seguinte comando de gerenciamento:</p> <pre><code>python3 manage.py runscript [--commit] [--loglevel {debug,info,warning,error,critical}] [--data \"&lt;data&gt;\"] &lt;module&gt;.&lt;script&gt;\n</code></pre> <p>O argumento exigido `."},{"location":"customization/custom-validation/","title":"Valida\u00e7\u00e3o Customizada","text":"<p>NetBox valida valida todo objeto antes de ser escrito no banco de dados para validar a integridade de dados. Essa valida\u00e7\u00e3o inclui coisas como verificar a formata\u00e7\u00e3o correta e se as refer\u00eancias ao objeto s\u00e3o v\u00e1lidas. No entanto, voc\u00ea pode querer complementar a valida\u00e7\u00e3o com algumas regras de sua escolha. Por exemplo, talvez voc\u00ea queira que todos os nomes de Site (Locais) estejam em conformidade com um padr\u00e3o espec\u00edfico. Isso pode ser usado atrav\u00e9s de regras de custom validation (valida\u00e7\u00e3o customizada).</p>"},{"location":"customization/custom-validation/#regras-de-validacao-customizada","title":"Regras de Valida\u00e7\u00e3o Customizada","text":"<p>Regras de valida\u00e7\u00e3o customizada podem ser expressadas como um mapa de atributos do modelo que definem quais atributos devem estar em conformidades. Por exemplo:</p> <pre><code>{\n\"name\": {\n\"min_length\": 5,\n\"max_length\": 30\n}\n}\n</code></pre> <p>Isso define um validador customizado que verifica se o tamanho do atributo <code>name</code> de um objeto tem ao menos 05 caracteres e n\u00e3o \u00e9 maior que 30 caracteres. Essa valida\u00e7\u00e3o \u00e9 executada depois que o NetBox fez suas pr\u00f3prias valida\u00e7\u00f5es internas.</p> <p>A classe <code>CustomValidator</code> diversos tipos de valida\u00e7\u00e3o: - <code>min</code>: Valor m\u00ednimo - <code>max</code>: Valor m\u00e1ximo - <code>min_length</code>: Tamanho m\u00ednimo do texto (string) - <code>max_length</code>: Tamanho m\u00e1ximo do texto (string) - <code>regex</code>: Aplica\u00e7\u00e3o de uma express\u00e3o regular - <code>required</code>: Um valor deve ser obrigatoriamente definido. - <code>prohibited</code>: Um valor n\u00e3o deve ser especificado.</p> <p>O tipos <code>min</code>e <code>max</code> devem ser definidos como valores num\u00e9ricos, enquanto que <code>min_length</code>, <code>max_length</code> e <code>regex</code> suportam valores de texto (string). Os validadores <code>required</code> e <code>prohibited</code> podem ser usados em qualquer campo e os valores devem ser passados como <code>True</code>.</p> <p>Warning</p> <p>Tenha em mente que esses validadores meramente complementam as valida\u00e7\u00f5es pr\u00f3prias do NetBox. Os validadores n\u00e3o ir\u00e3o sobrepor estas internas. Por exemplo, se certo campo do modelo \u00e9 obrigat\u00f3rio pelo NetBox, configurar o validador para <code>{'prohibited': True}</code> n\u00e3o ir\u00e3o funcionar.</p>"},{"location":"customization/custom-validation/#logica-de-validacao-customizada","title":"L\u00f3gica de Valida\u00e7\u00e3o Customizada","text":"<p>Pode haver casos em que os tipos de valida\u00e7\u00e3o fornecidos s\u00e3o insuficientes. NetBox fornece a classe <code>CustomValidator</code> que pode ser extendida para suportar valida\u00e7\u00f5es arbitr\u00e1rias ao sobrepor o m\u00e9todo <code>validate()</code>, e chamando o m\u00e9todo <code>fail()</code> quando uma condi\u00e7\u00e3o n\u00e3o satisfat\u00f3ria for detectada.</p> <pre><code>from extras.validators import CustomValidator\n\nclass MyValidator(CustomValidator):\n\n    def validate(self, instance):\n        if instance.status == 'active' and not instance.description:\n            self.fail(\"Active sites must have a description set!\", field='status')\n</code></pre> <p>O m\u00e9todo <code>fail()</code> pode opcionalmente definir um campo no qual pode associar a mensagem de erro fornecida. Se especificado, a mensagem de erro ir\u00e1 aparecer ao usu\u00e1rio associada ao campo definido. Se omitido, a mensagem de erro n\u00e3o ser\u00e1 associada com nenhum campo.</p>"},{"location":"customization/custom-validation/#atrelando-validadores-customizados","title":"Atrelando Validadores Customizados","text":"<p>Validadores customizadas s\u00e3o associados com modelos espec\u00edficos do NetBox com a configura\u00e7\u00e3o de par\u00e2metro CUSTOM_VALIDATORS. H\u00e1 tr\u00eas maneiras pela qual as regras de valida\u00e7\u00e3o podem ser definidas.</p> <ol> <li>Mapeamento via JSON (sem l\u00f3gica customizada)</li> <li>Caminho tracejado (dotted) para uma classe de valida\u00e7\u00e3o customizada</li> <li>Refer\u00eancia direta para uma classe de valida\u00e7\u00e3o customizada</li> </ol>"},{"location":"customization/custom-validation/#dados-puro-plain-data","title":"Dados \"Puro\" (Plain Data)","text":"<p>Para casos que a l\u00f3gica customizada n\u00e3o \u00e9 necess\u00e1ria, \u00e9 suficiente passar regras de valida\u00e7\u00e3o como objetos compat\u00edveis com JSON puro (plain). Essa abordagem tipicamente permite uma portabilidade da sua configura\u00e7\u00e3o. Por exemplo:</p> <pre><code>CUSTOM_VALIDATORS = {\n    \"dcim.site\": [\n        {\n            \"name\": {\n                \"min_length\": 5,\n                \"max_length\": 30,\n            }\n        }\n    ],\n    \"dcim.device\": [\n        {\n            \"platform\": {\n                \"required\": True,\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"customization/custom-validation/#caminho-tracejado-dotted-path","title":"Caminho Tracejado (Dotted Path)","text":"<p>Em inst\u00e2ncias que a classe da valida\u00e7\u00e3o customizada \u00e9 necess\u00e1ria, ela pode ser referenciada pelo seu Python path (relativo ao diret\u00f3rio de produ\u00e7\u00e3o do NetBox)</p> <pre><code>CUSTOM_VALIDATORS = {\n    'dcim.site': (\n        'my_validators.Validator1',\n        'my_validators.Validator2',\n    ),\n    'dcim.device': (\n        'my_validators.Validator3',\n    )\n}\n</code></pre> <p>Essa abordagem exige que a classe sendo instanciada seja importada diretamente pelo arquivo de configura\u00e7\u00e3o do Python.</p> <pre><code>from my_validators import Validator1, Validator2, Validator3\n\nCUSTOM_VALIDATORS = {\n    'dcim.site': (\n        Validator1(),\n        Validator2(),\n    ),\n    'dcim.device': (\n        Validator3(),\n    )\n}\n</code></pre> <p>Note</p> <p>Mesmo que seja definido apenas um validador, deve ser utilizado como um iterable.</p>"},{"location":"customization/export-templates/","title":"Exportar Templates","text":"<p>NetBox permite que os usu\u00e1rio definam templates customizados que podem ser utilizados na hora de exportar os objetos. Para configurar um template de exporta\u00e7\u00e3o, navegue at\u00e9 Customization &gt; Export Templates.</p> <p>Cada template de exporta\u00e7\u00e3o \u00e9 associado com um tipo de objeto. Por exemplo, voc\u00ea pode criar um template para as VLANs, seu template customizado ir\u00e1 aparecer abaixo do bot\u00e3o \"Export\" na lista de VLANs. Cada template de exporta\u00e7\u00e3o deve ter um nome e pode opcionalmente designar um tipo de espec\u00edfico de MIME type ou extens\u00e3o do arquivo na hora de exportar.</p> <p>Templates de exporta\u00e7\u00e3o devem ser escritos em Jinja2.</p> <p>Note</p> <p>O nome <code>table</code> \u00e9 reservado para uso interno.</p> <p>Warning</p> <p>Templates de exporta\u00e7\u00e3o s\u00e3o renderizados usando um code criado pelo usu\u00e1rio, que pode consequentemente causar riscos em certas situa\u00e7\u00f5es. Apenas conceda permiss\u00f5es para criar ou modificar templates de exporta\u00e7\u00e3o para usu\u00e1rios confi\u00e1veis.</p> <p>A lista de objetos retornados do banco de dados ao renderizar uma exporta\u00e7\u00e3o de template \u00e9 armazenada na vari\u00e1vel <code>queryset</code>, a qual voc\u00ea pode querer iterar (iterate) usando um <code>for</code> loop. Propriedades do objeto podem ser acessadas pelo nome. Por exemplo:</p> <pre><code>{% for rack in queryset %}\nRack: {{ rack.name }}\nSite: {{ rack.site.name }}\nHeight: {{ rack.u_height }}U\n{% endfor %}\n</code></pre> <p>Para acessar um campo customizado de um objeto dentro de um template, utilize o atributo <code>cf</code>. Por exemplo, {{ obj.cf.color }} ir\u00e1 retornar o valor (se houver) de um campo customizado nomeado de <code>color</code> dentro de <code>obj</code>. </p> <p>Se voc\u00ea precisa utilizar um dado de config context (configura\u00e7\u00e3o de contexto) em um template de exporta\u00e7\u00e3o, voc\u00ea deve usar a fun\u00e7\u00e3o <code>get_config_context</code> para obter todas as configura\u00e7\u00f5es de contexto. Por exemplo:</p> <pre><code>{% for server in queryset %}\n{% set data = server.get_config_context() %}\n{{ data.syslog }}\n{% endfor %}\n</code></pre> <p>O atributo <code>as_attachment</code> de um template de exporta\u00e7\u00e3o controla o comportamento, quando renderizado. Se verdadeiro (true), o conte\u00fado renderizado ser\u00e1 retornado ao usu\u00e1rio como um arquivo poss\u00edvel de realizar download. Se falso (false), ser\u00e1 exibido no browser. (Isso pode ser \u00fatil na hora de gerar conte\u00fado HTML, por exemplo)</p> <p>Um MIME type e extens\u00e3o do arquivo pode opcionalmente ser definida para cada template de exporta\u00e7\u00e3o. O MIME type default \u00e9 <code>text/plain</code>.</p>"},{"location":"customization/export-templates/#integracao-rest-api","title":"Integra\u00e7\u00e3o REST API","text":"<p>Quando for necess\u00e1rio prover credenciais de autentica\u00e7\u00e3o (quando o <code>LOGIN_REQUIRED</code> estiver habilitado, por exemplo), \u00e9 recomendado renderizar os templates de exporta\u00e7\u00e3o pela API REST. Isso permite que o cliente especifique um token de autentica\u00e7\u00e3o. Para renderizar um template de exporta\u00e7\u00e3o pela API REST, fa\u00e7a uma requisi\u00e7\u00e3o <code>GET</code> para requisitar a lista de endpoints de modelo e coloque o par\u00e2metro <code>export</code> ao final para exportar o nome do template. Por exemplo:</p> <pre><code>GET /api/dcim/sites/?export=MyTemplateName\n</code></pre> <p>Note que o corpo da resposta ir\u00e1 conter apenas o conte\u00fado do template de exporta\u00e7\u00e3o renderizado, em oposi\u00e7\u00e3o ao objeto ou lista do tipo JSON.</p>"},{"location":"customization/export-templates/#exemplo","title":"Exemplo","text":"<p>Abaixo est\u00e1 um exemplo de exporta\u00e7\u00e3o do template de um dispositivo que ir\u00e1 gerar uma simples configura\u00e7\u00e3o Nagios da lista de dispositivos.</p> <pre><code>{% for device in queryset %}{% if device.status and device.primary_ip %}define host{\n        use                     generic-switch\n        host_name               {{ device.name }}\n        address                 {{ device.primary_ip.address.ip }}\n}\n{% endif %}{% endfor %}\n</code></pre> <p>A sa\u00edda (output) gerada ir\u00e1 ser algo como:</p> <pre><code>define host{\n        use                     generic-switch\n        host_name               switch1\n        address                 192.0.2.1\n}\ndefine host{\n        use                     generic-switch\n        host_name               switch2\n        address                 192.0.2.2\n}\ndefine host{\n        use                     generic-switch\n        host_name               switch3\n        address                 192.0.2.3\n}\n</code></pre>"},{"location":"customization/reports/","title":"Relat\u00f3rios do NetBox (Reports)","text":"<p>O mecanismo de relat\u00f3rios do NetBox \u00e9 utilizado na valida\u00e7\u00e3o de dados dentro do NetBox. Utilizar um report permite que o usu\u00e1rio verifque que os objetos dentro do NetBox est\u00e3o de acordo com condi\u00e7\u00f5es configuradas pelo usu\u00e1rio. Por exemplo, voc\u00ea pode escrever reports que verificam;</p> <ul> <li>Se todos os switches top-of-racks possuem uma conex\u00e3o via console</li> <li>Todo o roteador tem uma interface loopback com um endere\u00e7o IP configurado</li> <li>Cada descri\u00e7\u00e3o de interface est\u00e1 em conformidade com um formato espec\u00edfico</li> <li>Todo site tem um m\u00ednimo de VLANs configuradas</li> <li>Todos os endere\u00e7os IP t\u00eam um prefixo pai (parent prefix)</li> </ul> <p>...e por a\u00ed vai. Reports s\u00e3o completamente customiz\u00e1veis, ent\u00e3o praticamente n\u00e3o existe limite do que voc\u00ea pode testar.</p>"},{"location":"customization/reports/#escrevendo-reports","title":"Escrevendo Reports","text":"<p>Reports devem ser salvados como arquivos no path (caminho) definido em <code>REPORTS_PATH</code> (que por padr\u00e3o \u00e9 <code>netbox/reports/</code>). Cada arquivo criado dentro desta pasta deve ser considerado como um m\u00f3dulo individual. Cada modulo cont\u00e9m um ou mais reports (classes Python) que cumpre uma fun\u00e7\u00e3o espec\u00edfica. A l\u00f3gica para cada report \u00e9 quebrada em m\u00e9todos de teste (test methods) que aplicam uma pequena parcela de l\u00f3gica que comp\u00f5em o teste geral (overall test).</p> <p>Warning</p> <p>O caminho (path) dos reports possuem um arquivo nomeado de <code>__init__.py</code> que registra o path como um m\u00f3dulo (module) Python. N\u00e3o delete esse arquivo.</p> <p>Por exemplo, n\u00f3s podemos criar um m\u00f3dulo nomeado de <code>devices.py</code> para conter todos os reports relacionados aos dispositivos dentro do NetBox. Dentro desse m\u00f3dulo, n\u00f3s podemos dfinir diversos reports. Cada report \u00e9 definido como uma classe Python que herda (inherit) <code>extras.reports.Report</code>.</p> <pre><code>from extras.reports import Report\n\nclass DeviceConnectionsReport(Report):\n    description = \"Validate the minimum physical connections for each device\"\n\nclass DeviceIPsReport(Report):\n    description = \"Check that every device has a primary IP address assigned\"\n</code></pre> <p>Dentro de cada classe de report, n\u00f3s criamos um n\u00famero de m\u00e9todos de teste para executar a l\u00f3gica do report. Dentro de <code>DeviceConnectionsReport</code>, por exemplo, n\u00f3s queremos garantir que todos os dispositivos em produ\u00e7\u00e3o tenham uma conex\u00e3o console, uma conex\u00e3o de ger\u00eancia out-out-band, e duas conex\u00f5es de energia.</p> <pre><code>from dcim.choices import DeviceStatusChoices\nfrom dcim.models import ConsolePort, Device, PowerPort\nfrom extras.reports import Report\n\n\nclass DeviceConnectionsReport(Report):\n    description = \"Validate the minimum physical connections for each device\"\n\n    def test_console_connection(self):\n\n        # Check that every console port for every active device has a connection defined.\n        active = DeviceStatusChoices.STATUS_ACTIVE\n        for console_port in ConsolePort.objects.prefetch_related('device').filter(device__status=active):\n            if not console_port.connected_endpoints:\n                self.log_failure(\n                    console_port.device,\n                    \"No console connection defined for {}\".format(console_port.name)\n                )\n            elif not console_port.connection_status:\n                self.log_warning(\n                    console_port.device,\n                    \"Console connection for {} marked as planned\".format(console_port.name)\n                )\n            else:\n                self.log_success(console_port.device)\n\n    def test_power_connections(self):\n\n        # Check that every active device has at least two connected power supplies.\n        for device in Device.objects.filter(status=DeviceStatusChoices.STATUS_ACTIVE):\n            connected_ports = 0\n            for power_port in PowerPort.objects.filter(device=device):\n                if power_port.connected_endpoints:\n                    connected_ports += 1\n                    if not power_port.path.is_active:\n                        self.log_warning(\n                            device,\n                            \"Power connection for {} marked as planned\".format(power_port.name)\n                        )\n            if connected_ports &lt; 2:\n                self.log_failure(\n                    device,\n                    \"{} connected power supplies found (2 needed)\".format(connected_ports)\n                )\n            else:\n                self.log_success(device)\n</code></pre> <p>Como voc\u00ea pode ver, reports s\u00e3o completamente customiz\u00e1veis. A l\u00f3gica de valida\u00e7\u00e3o pode ser simples ou complexa, conforme sua necessidade. Note tamb\u00e9m que o atributo <code>description</code> suporta a sintaxe markdown, que ser\u00e1 renderizada dentro da p\u00e1gina de lista do report.</p> <p>Warning</p> <p>Reports n\u00e3o devem alterar dados: se voc\u00ea utiliza m\u00e9todos como <code>create()</code>, <code>save()</code>, <code>update()</code> e <code>delete()</code>, voc\u00ea deveria parar e reavaliar o que voc\u00ea est\u00e1 tentando fazer. Percebe que n\u00e3o h\u00e1 nenhuma garantia para altera\u00e7\u00f5es acidentais ou destrui\u00e7\u00e3o de dados.</p>"},{"location":"customization/reports/#atributos-do-report","title":"Atributos do Report","text":""},{"location":"customization/reports/#description","title":"<code>description</code>","text":"<p>Uma descri\u00e7\u00e3o do que o report faz para ser lida por humanos.</p>"},{"location":"customization/reports/#job_timeout","title":"<code>job_timeout</code>","text":"<p>Defina o tempo m\u00e1ximo permitido de execu\u00e7\u00e3o de um report. Se n\u00e3o definido, <code>RQ_DEFAULT_TIMEOUT</code> ser\u00e1 utilizado.</p> <p>Info</p> <p>Essa caracter\u00edstica foi introduzida na vers\u00e3o v3.2.1 do NetBox.</p>"},{"location":"customization/reports/#logging","title":"Logging","text":"<p>Os m\u00e9todos abaixo est\u00e3o dispon\u00edvels para realizar o log dos resultados dentro de um report (relat\u00f3rio):</p> <ul> <li>log(message)</li> <li>log_success(object, message=None)</li> <li>log_info(object, message)</li> <li>log_warning(object, message)</li> <li>log_failure(object, message)</li> </ul> <p>Esse registro de uma ou mais mensagens de falha ser\u00e1 automaticamente reportada como uma falha do report em si. \u00c9 recomendado realizar o log de sucesso para cada objeto que esteja sendo utilizado para que os resultados reflitam como os objetos est\u00e3o sendo registrados. (A inclus\u00e3o de uma mensagem de log \u00e9 opcional para quando houver sucesso) Mensagens registradas com <code>log()</code> ir\u00e3o aparecer no resultado de um report, mas n\u00e3o s\u00e3o associadas com um objeto em particular ou status. Mensagens de log tamb\u00e9m suportam sintaxe markdown e ser\u00e3o renderizadas na p\u00e1gina de resultados de um report.</p> <p>Para realizar tarefas adicionais, como enviar um email ou chamar um webook, antes ou depois que um report for executado, extenda os m\u00e9todos <code>pre_run()</code> e/ou <code>post_run()</code>, respectivamente. O status de report finalizado \u00e9 dispon\u00edvel em <code>self.failed</code> e o resultado do objeto em <code>self.result</code>.</p> <pre><code>from extras.reports import Report\n\nclass DeviceConnectionsReport(Report)\n    pass\n\nclass DeviceIPsReport(Report)\n    pass\n\nreport_order = (DeviceIPsReport, DeviceConnectionsReport)\n</code></pre>"},{"location":"customization/reports/#executando-reports","title":"Executando Reports","text":"<p>Note</p> <p>Para executar (run) um report, o usu\u00e1rio deve atribuit a permiss\u00e3o <code>extras.run_report</code>. Isso \u00e9 feito ao atrelar um usu\u00e1rio (ou grupo) com uma permiss\u00e3o dentro do objeto <code>Report</code> e especificando a a\u00e7\u00e3o <code>run</code> dentro da interface admin, como abaixo:</p> <p></p>"},{"location":"customization/reports/#atraves-da-interface-web-web-ui","title":"Atrav\u00e9s da interface Web (Web UI)","text":"<p>Reports podem ser executados atrav\u00e9s da interface web navegando at\u00e9 report e clicando no bot\u00e3o \"run report\" na parte superior direita. Uma vez que o report foi executado, os resultados associados ser\u00e3o incluidos na visualiza\u00e7\u00e3o do relat\u00f3rio (report). \u00c9 poss\u00edvel agendar um report para ser executado em um hor\u00e1rio espec\u00edfico no futuro. Um reportt agendado pode ser cancelado ao deletar o o resultado da job (tarefa) associada.</p>"},{"location":"customization/reports/#atraves-da-api","title":"Atrav\u00e9s da API","text":"<p>Para executar um report utilizando a API, simplesmente execute uma requisi\u00e7\u00e3o do tipo <code>POST</code> para seu endpoint <code>run</code>. Reports s\u00e3o identificados pelo seu m\u00f3dulo e seu nome de classe.</p> <pre><code>    POST /api/extras/reports/&lt;module&gt;.&lt;name&gt;/run/\n</code></pre> <p>Nosso exemplo de report acima ser\u00e1 chamado como:</p> <pre><code>    POST /api/extras/reports/devices.DeviceConnectionsReport/run/\n</code></pre> <p>Opcionalmente, <code>schedule_at</code> pode ser fornecido no formul\u00e1rio de dados (form data) com um <code>datetime</code> no formato de <code>string</code> para agendar um script em uma data e hor\u00e1rio especificada pelo usu\u00e1rio.</p>"},{"location":"customization/reports/#atraves-da-cli","title":"Atrav\u00e9s da CLI","text":"<p>Reports podem ser executados pela CLI ao utilizar o seguinte comando de ger\u00eancia:</p> <pre><code>python3 manage.py runreport &lt;module&gt;\n</code></pre> <p>Onde <code>&lt;module&gt;</code> \u00e9 o nome do arquivo python no diret\u00f3rio <code>reports</code> sem a extens\u00e3o <code>.py</code>. Um ou mais m\u00f3dulos de report podem ser especificados pelo comando.</p>"},{"location":"development/","title":"Desenvolvimento do NetBox","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Thanks for your interest in contributing to NetBox! This introduction covers a few important things to know before you get started.</p>"},{"location":"development/#the-code","title":"The Code","text":"<p>NetBox and many of its related projects are maintained on GitHub. GitHub also serves as one of our primary discussion forums. While all the code and discussion is publicly accessible, you'll need register for a free GitHub account to engage in participation. Most people begin by forking the NetBox repository under their own GitHub account to begin working on the code.</p> <p></p> <p>There are three permanent branches in the repository:</p> <ul> <li><code>master</code> - The current stable release. Individual changes should never be pushed directly to this branch, but rather merged from <code>develop</code>.</li> <li><code>develop</code> - Active development for the upcoming patch release. Pull requests will typically be based on this branch unless they introduce breaking changes that must be deferred until the next minor release.</li> <li><code>feature</code> - New feature work to be introduced in the next minor release (e.g. from v3.3 to v3.4).</li> </ul> <p>NetBox components are arranged into Django apps. Each app holds the models, views, and other resources relevant to a particular function:</p> <ul> <li><code>circuits</code>: Communications circuits and providers (not to be confused with power circuits)</li> <li><code>dcim</code>: Datacenter infrastructure management (sites, racks, and devices)</li> <li><code>extras</code>: Additional features not considered part of the core data model</li> <li><code>ipam</code>: IP address management (VRFs, prefixes, IP addresses, and VLANs)</li> <li><code>tenancy</code>: Tenants (such as customers) to which NetBox objects may be assigned</li> <li><code>users</code>: Authentication and user preferences</li> <li><code>utilities</code>: Resources which are not user-facing (extendable classes, etc.)</li> <li><code>virtualization</code>: Virtual machines and clusters</li> <li><code>wireless</code>: Wireless links and LANs</li> </ul> <p>All core functionality is stored within the <code>netbox/</code> subdirectory. HTML templates are stored in a common <code>templates/</code> directory, with model- and view-specific templates arranged by app. Documentation is kept in the <code>docs/</code> root directory.</p>"},{"location":"development/#proposing-changes","title":"Proposing Changes","text":"<p>All substantial changes made to the code base are tracked using GitHub issues. Feature requests, bug reports, and similar proposals must all be filed as issues and approved by a maintainer before work begins. This ensures that all changes to the code base are properly documented for future reference.</p> <p>To submit a new feature request or bug report for NetBox, select and complete the appropriate issue template. Once your issue has been approved, you're welcome to submit a pull request containing your proposed changes.</p> <p></p> <p>Check out our issue intake policy for an overview of the issue triage and approval processes.</p> <p>Tip</p> <p>Avoid starting work on a proposal before it has been accepted. Not all proposed changes will be accepted, and we'd hate for you to waste time working on code that might not make it into the project.</p>"},{"location":"development/#getting-help","title":"Getting Help","text":"<p>There are two primary forums for getting assistance with NetBox development:</p> <ul> <li>GitHub discussions - The preferred forum for general discussion and support issues. Ideal for shaping a feature requests prior to submitting an issue.</li> <li>#netbox on NetDev Community Slack - Good for quick chats. Avoid any discussion that might need to be referenced later on, as the chat history is not retained indefinitely.</li> </ul> <p>Note</p> <p>Don't use GitHub issues to ask for help: These are reserved for proposed code changes only.</p>"},{"location":"development/#governance","title":"Governance","text":"<p>NetBox follows the benevolent dictator model of governance, with Jeremy Stretch ultimately responsible for all changes to the code base. While community contributions are welcomed and encouraged, the lead maintainer's primary role is to ensure the project's long-term maintainability and continued focus on its primary functions.</p>"},{"location":"development/#licensing","title":"Licensing","text":"<p>The entire NetBox project is licensed as open source under the Apache 2.0 license. This is a very permissive license which allows unlimited redistribution of all code within the project. Note that all submissions to the project are subject to the same license.</p>"},{"location":"development/adding-models/","title":"Adicionando Modelos (models)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"development/adding-models/#1-define-the-model-class","title":"1. Define the model class","text":"<p>Models within each app are stored in either <code>models.py</code> or within a submodule under the <code>models/</code> directory. When creating a model, be sure to subclass the appropriate base model from <code>netbox.models</code>. This will typically be NetBoxModel or OrganizationalModel. Remember to add the model class to the <code>__all__</code> listing for the module.</p> <p>Each model should define, at a minimum:</p> <ul> <li>A <code>Meta</code> class specifying a deterministic ordering (if ordered by fields other than the primary ID)</li> <li>A <code>__str__()</code> method returning a user-friendly string representation of the instance</li> <li>A <code>get_absolute_url()</code> method returning an instance's direct URL (using <code>reverse()</code>)</li> </ul>"},{"location":"development/adding-models/#2-define-field-choices","title":"2. Define field choices","text":"<p>If the model has one or more fields with static choices, define those choices in <code>choices.py</code> by subclassing <code>utilities.choices.ChoiceSet</code>.</p>"},{"location":"development/adding-models/#3-generate-database-migrations","title":"3. Generate database migrations","text":"<p>Once your model definition is complete, generate database migrations by running <code>manage.py makemigrations -n $NAME --no-header</code>. Always specify a short unique name when generating migrations.</p> <p>Configuration Required</p> <p>Set <code>DEVELOPER = True</code> in your NetBox configuration to enable the creation of new migrations.</p>"},{"location":"development/adding-models/#4-add-all-standard-views","title":"4. Add all standard views","text":"<p>Most models will need view classes created in <code>views.py</code> to serve the following operations:</p> <ul> <li>List view</li> <li>Detail view</li> <li>Edit view</li> <li>Delete view</li> <li>Bulk import</li> <li>Bulk edit</li> <li>Bulk delete</li> </ul>"},{"location":"development/adding-models/#5-add-url-paths","title":"5. Add URL paths","text":"<p>Add the relevant URL path for each view created in the previous step to <code>urls.py</code>.</p>"},{"location":"development/adding-models/#6-add-relevant-forms","title":"6. Add relevant forms","text":"<p>Depending on the type of model being added, you may need to define several types of form classes. These include:</p> <ul> <li>A base model form (for creating/editing individual objects)</li> <li>A bulk edit form</li> <li>A bulk import form (for CSV-based import)</li> <li>A filterset form (for filtering the object list view)</li> </ul>"},{"location":"development/adding-models/#7-create-the-filterset","title":"7. Create the FilterSet","text":"<p>Each model should have a corresponding FilterSet class defined. This is used to filter UI and API queries. Subclass the appropriate class from <code>netbox.filtersets</code> that matches the model's parent class.</p>"},{"location":"development/adding-models/#8-create-the-table-class","title":"8. Create the table class","text":"<p>Create a table class for the model in <code>tables.py</code> by subclassing <code>utilities.tables.BaseTable</code>. Under the table's <code>Meta</code> class, be sure to list both the fields and default columns.</p>"},{"location":"development/adding-models/#9-create-a-searchindex-subclass","title":"9. Create a SearchIndex subclass","text":"<p>If this model will be included in global search results, create a subclass of <code>netbox.search.SearchIndex</code> for it and specify the fields to be indexed.</p>"},{"location":"development/adding-models/#10-create-the-object-template","title":"10. Create the object template","text":"<p>Create the HTML template for the object view. (The other views each typically employ a generic template.) This template should extend <code>generic/object.html</code>.</p>"},{"location":"development/adding-models/#11-add-the-model-to-the-navigation-menu","title":"11. Add the model to the navigation menu","text":"<p>Add the relevant navigation menu items in <code>netbox/netbox/navigation/menu.py</code>.</p>"},{"location":"development/adding-models/#12-rest-api-components","title":"12. REST API components","text":"<p>Create the following for each model:</p> <ul> <li>Detailed (full) model serializer in <code>api/serializers.py</code></li> <li>Nested serializer in <code>api/nested_serializers.py</code></li> <li>API view in <code>api/views.py</code></li> <li>Endpoint route in <code>api/urls.py</code></li> </ul>"},{"location":"development/adding-models/#13-graphql-api-components","title":"13. GraphQL API components","text":"<p>Create a Graphene object type for the model in <code>graphql/types.py</code> by subclassing the appropriate class from <code>netbox.graphql.types</code>.</p> <p>Also extend the schema class defined in <code>graphql/schema.py</code> with the individual object and object list fields per the established convention.</p>"},{"location":"development/adding-models/#14-add-tests","title":"14. Add tests","text":"<p>Add tests for the following:</p> <ul> <li>UI views</li> <li>API views</li> <li>Filter sets</li> </ul>"},{"location":"development/adding-models/#15-documentation","title":"15. Documentation","text":"<p>Create a new documentation page for the model in <code>docs/models/&lt;app_label&gt;/&lt;model_name&gt;.md</code>. Include this file under the \"features\" documentation where appropriate.</p> <p>Also add your model to the index in <code>docs/development/models.md</code>.</p>"},{"location":"development/application-registry/","title":"Registro da Aplica\u00e7\u00e3o","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>The registry is an in-memory data structure which houses various application-wide parameters, such as the list of enabled plugins. It is not exposed to the user and is not intended to be modified by any code outside of NetBox core.</p> <p>The registry behaves essentially like a Python dictionary, with the notable exception that once a store (key) has been declared, it cannot be deleted or overwritten. The value of a store can, however, be modified; e.g. by appending a value to a list. Store values generally do not change once the application has been initialized.</p> <p>The registry can be inspected by importing <code>registry</code> from <code>extras.registry</code>.</p>"},{"location":"development/application-registry/#stores","title":"Stores","text":""},{"location":"development/application-registry/#model_features","title":"<code>model_features</code>","text":"<p>A dictionary of particular features (e.g. custom fields) mapped to the NetBox models which support them, arranged by app. For example:</p> <pre><code>{\n    'custom_fields': {\n        'circuits': ['provider', 'circuit'],\n        'dcim': ['site', 'rack', 'devicetype', ...],\n        ...\n    },\n    'webhooks': {\n        ...\n    },\n    ...\n}\n</code></pre>"},{"location":"development/application-registry/#plugin_menu_items","title":"<code>plugin_menu_items</code>","text":"<p>Navigation menu items provided by NetBox plugins. Each plugin is registered as a key with the list of menu items it provides. An example:</p> <pre><code>{\n    'Plugin A': (\n        &lt;MenuItem&gt;, &lt;MenuItem&gt;, &lt;MenuItem&gt;,\n    ),\n    'Plugin B': (\n        &lt;MenuItem&gt;, &lt;MenuItem&gt;, &lt;MenuItem&gt;,\n    ),\n}\n</code></pre>"},{"location":"development/application-registry/#plugin_template_extensions","title":"<code>plugin_template_extensions</code>","text":"<p>Plugin content that gets embedded into core NetBox templates. The store comprises NetBox models registered as dictionary keys, each pointing to a list of applicable template extension classes that exist. An example:</p> <pre><code>{\n    'dcim.site': [\n        &lt;TemplateExtension&gt;, &lt;TemplateExtension&gt;, &lt;TemplateExtension&gt;,\n    ],\n    'dcim.rack': [\n        &lt;TemplateExtension&gt;, &lt;TemplateExtension&gt;,\n    ],\n}\n</code></pre>"},{"location":"development/extending-models/","title":"Extendendo Modelos","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Below is a list of tasks to consider when adding a new field to a core model.</p>"},{"location":"development/extending-models/#1-generate-and-run-database-migrations","title":"1. Generate and run database migrations","text":"<p>Django migrations are used to express changes to the database schema. In most cases, Django can generate these automatically, however very complex changes may require manual intervention. Always remember to specify a short but descriptive name when generating a new migration.</p> <pre><code>./manage.py makemigrations &lt;app&gt; -n &lt;name&gt;\n./manage.py migrate\n</code></pre> <p>Where possible, try to merge related changes into a single migration. For example, if three new fields are being added to different models within an app, these can be expressed in a single migration. You can merge a newly generated migration with an existing one by combining their <code>operations</code> lists.</p> <p>Do not alter existing migrations</p> <p>Migrations can only be merged within a release. Once a new release has been published, its migrations cannot be altered (other than for the purpose of correcting a bug).</p>"},{"location":"development/extending-models/#2-add-validation-logic-to-clean","title":"2. Add validation logic to <code>clean()</code>","text":"<p>If the new field introduces additional validation requirements (beyond what's included with the field itself), implement them in the model's <code>clean()</code> method. Remember to call the model's original method using <code>super()</code> before or after your custom validation as appropriate:</p> <pre><code>class Foo(models.Model):\n\n    def clean(self):\n        super().clean()\n\n        # Custom validation goes here\n        if self.bar is None:\n            raise ValidationError()\n</code></pre>"},{"location":"development/extending-models/#3-update-relevant-querysets","title":"3. Update relevant querysets","text":"<p>If you're adding a relational field (e.g. <code>ForeignKey</code>) and intend to include the data when retrieving a list of objects, be sure to include the field using <code>prefetch_related()</code> as appropriate. This will optimize the view and avoid extraneous database queries.</p>"},{"location":"development/extending-models/#4-update-api-serializer","title":"4. Update API serializer","text":"<p>Extend the model's API serializer in <code>&lt;app&gt;.api.serializers</code> to include the new field. In most cases, it will not be necessary to also extend the nested serializer, which produces a minimal representation of the model.</p>"},{"location":"development/extending-models/#5-add-fields-to-forms","title":"5. Add fields to forms","text":"<p>Extend any forms to include the new field(s) as appropriate. These are found under the <code>forms/</code> directory within each app. Common forms include:</p> <ul> <li>Credit/edit - Manipulating a single object</li> <li>Bulk edit - Performing a change on many objects at once</li> <li>CSV import - The form used when bulk importing objects in CSV format</li> <li>Filter - Displays the options available for filtering a list of objects (both UI and API)</li> </ul>"},{"location":"development/extending-models/#6-extend-object-filter-set","title":"6. Extend object filter set","text":"<p>If the new field should be filterable, add it to the <code>FilterSet</code> for the model. If the field should be searchable, remember to query it in the FilterSet's <code>search()</code> method.</p>"},{"location":"development/extending-models/#7-add-column-to-object-table","title":"7. Add column to object table","text":"<p>If the new field will be included in the object list view, add a column to the model's table. For simple fields, adding the field name to <code>Meta.fields</code> will be sufficient. More complex fields may require declaring a custom column. Also add the field name to <code>default_columns</code> if the column should be present in the table by default.</p>"},{"location":"development/extending-models/#8-update-the-searchindex","title":"8. Update the SearchIndex","text":"<p>Where applicable, add the new field to the model's SearchIndex for inclusion in global search.</p>"},{"location":"development/extending-models/#9-update-the-ui-templates","title":"9. Update the UI templates","text":"<p>Edit the object's view template to display the new field. There may also be a custom add/edit form template that needs to be updated.</p>"},{"location":"development/extending-models/#10-createextend-test-cases","title":"10. Create/extend test cases","text":"<p>Create or extend the relevant test cases to verify that the new field and any accompanying validation logic perform as expected. This is especially important for relational fields. NetBox incorporates various test suites, including:</p> <ul> <li>API serializer/view tests</li> <li>Filter tests</li> <li>Form tests</li> <li>Model tests</li> <li>View tests</li> </ul> <p>Be diligent to ensure all of the relevant test suites are adapted or extended as necessary to test any new functionality.</p>"},{"location":"development/extending-models/#11-update-the-models-documentation","title":"11. Update the model's documentation","text":"<p>Each model has a dedicated page in the documentation, at <code>models/&lt;app&gt;/&lt;model&gt;.md</code>. Update this file to include any relevant information about the new field.</p>"},{"location":"development/getting-started/","title":"Come\u00e7ando","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"development/getting-started/#setting-up-a-development-environment","title":"Setting up a Development Environment","text":"<p>Getting started with NetBox development is pretty straightforward, and should feel very familiar to anyone with Django development experience. There are a few things you'll need:</p> <ul> <li>A Linux system or compatible environment</li> <li>A PostgreSQL server, which can be installed locally per the documentation</li> <li>A Redis server, which can also be installed locally</li> <li>Python 3.8 or later</li> </ul>"},{"location":"development/getting-started/#1-fork-the-repo","title":"1. Fork the Repo","text":"<p>Assuming you'll be working on your own fork, your first step will be to fork the official git repository. (If you're a maintainer who's going to be working directly with the official repo, skip this step.) Click the \"fork\" button at top right (be sure that you've logged into GitHub first).</p> <p></p> <p>Copy the URL provided in the dialog box.</p> <p></p> <p>You can then clone your GitHub fork locally for development:</p> <pre><code>$ git clone https://github.com/$username/netbox.git\nCloning into 'netbox'...\nremote: Enumerating objects: 85949, done.\nremote: Counting objects: 100% (4672/4672), done.\nremote: Compressing objects: 100% (1224/1224), done.\nremote: Total 85949 (delta 3538), reused 4332 (delta 3438), pack-reused 81277\nReceiving objects: 100% (85949/85949), 55.16 MiB | 44.90 MiB/s, done.\nResolving deltas: 100% (68008/68008), done.\n$ ls netbox/\nbase_requirements.txt  contrib          docs         mkdocs.yml  NOTICE     requirements.txt  upgrade.sh\nCHANGELOG.md           CONTRIBUTING.md  LICENSE.txt  netbox      README.md  scripts\n</code></pre>"},{"location":"development/getting-started/#2-create-a-new-branch","title":"2. Create a New Branch","text":"<p>The NetBox project utilizes three persistent git branches to track work:</p> <ul> <li><code>master</code> - Serves as a snapshot of the current stable release</li> <li><code>develop</code> - All development on the upcoming stable (patch) release occurs here</li> <li><code>feature</code> - Tracks work on an upcoming minor release</li> </ul> <p>Typically, you'll base pull requests off of the <code>develop</code> branch, or off of <code>feature</code> if you're working on a new major release. For example, assume that the current NetBox release is v3.3.5. Work applied to the <code>develop</code> branch will appear in v3.3.6, and work done under the <code>feature</code> branch will be included in the next minor release (v3.4.0).</p> <p>Warning</p> <p>Never merge pull requests into the <code>master</code> branch: This branch only ever merges pull requests from the <code>develop</code> branch, to effect a new release.</p> <p>To create a new branch, first ensure that you've checked out the desired base branch, then run:</p> <pre><code>git checkout -B $branchname\n</code></pre> <p>When naming a new git branch, contributors are strongly encouraged to use the relevant issue number followed by a very brief description of the work:</p> <pre><code>$issue-$description\n</code></pre> <p>The description should be just two or three words to imply the focus of the work being performed. For example, bug #1234 to fix a TypeError exception when creating a device might be named <code>1234-device-typerror</code>. This ensures that branches are always follow some logical ordering (e.g. when running <code>git branch -a</code>) and helps other developers quickly identify the purpose of each.</p>"},{"location":"development/getting-started/#3-enable-pre-commit-hooks","title":"3. Enable Pre-Commit Hooks","text":"<p>NetBox ships with a git pre-commit hook script that automatically checks for style compliance and missing database migrations prior to committing changes. This helps avoid erroneous commits that result in CI test failures. You are encouraged to enable it by creating a link to <code>scripts/git-hooks/pre-commit</code>:</p> <p><pre><code>cd .git/hooks/\nln -s ../../scripts/git-hooks/pre-commit\n</code></pre> For the pre-commit hooks to work, you will also need to install the pycodestyle package:</p> <p><pre><code>python -m pip install pycodestyle\n</code></pre> ...and set up the yarn packages as shown in the Web UI Development Guide</p>"},{"location":"development/getting-started/#4-create-a-python-virtual-environment","title":"4. Create a Python Virtual Environment","text":"<p>A virtual environment (or \"venv\" for short) is like a container for a set of Python packages. These allow you to build environments suited to specific projects without interfering with system packages or other projects. When installed per the documentation, NetBox uses a virtual environment in production.</p> <p>Create a virtual environment using the <code>venv</code> Python module:</p> <pre><code>mkdir ~/.venv\npython3 -m venv ~/.venv/netbox\n</code></pre> <p>This will create a directory named <code>.venv/netbox/</code> in your home directory, which houses a virtual copy of the Python executable and its related libraries and tooling. When running NetBox for development, it will be run using the Python binary at <code>~/.venv/netbox/bin/python</code>.</p> <p>Virtual Environments</p> <p>Keeping virtual environments in <code>~/.venv/</code> is a common convention but entirely optional: Virtual environments can be created almost wherever you please. Also consider using <code>virtualenvwrapper</code> to simplify the management of multiple environments.</p> <p>Once created, activate the virtual environment:</p> <pre><code>source ~/.venv/netbox/bin/activate\n</code></pre> <p>Notice that the console prompt changes to indicate the active environment. This updates the necessary system environment variables to ensure that any Python scripts are run within the virtual environment.</p>"},{"location":"development/getting-started/#5-install-required-packages","title":"5. Install Required Packages","text":"<p>With the virtual environment activated, install the project's required Python packages using the <code>pip</code> module. Required packages are defined in <code>requirements.txt</code>. Each line in this file specifies the name and specific version of a required package.</p> <pre><code>python -m pip install -r requirements.txt\n</code></pre>"},{"location":"development/getting-started/#6-configure-netbox","title":"6. Configure NetBox","text":"<p>Within the <code>netbox/netbox/</code> directory, copy <code>configuration_example.py</code> to <code>configuration.py</code> and update the following parameters:</p> <ul> <li><code>ALLOWED_HOSTS</code>: This can be set to <code>['*']</code> for development purposes</li> <li><code>DATABASE</code>: PostgreSQL database connection parameters</li> <li><code>REDIS</code>: Redis configuration (if different from the defaults)</li> <li><code>SECRET_KEY</code>: Set to a random string (use <code>generate_secret_key.py</code> in the parent directory to generate a suitable key)</li> <li><code>DEBUG</code>: Set to <code>True</code></li> <li><code>DEVELOPER</code>: Set to <code>True</code> (this enables the creation of new database migrations)</li> </ul>"},{"location":"development/getting-started/#7-start-the-development-server","title":"7. Start the Development Server","text":"<p>Django provides a lightweight, auto-updating HTTP/WSGI server for development use. It is started with the <code>runserver</code> management command:</p> <pre><code>$ ./manage.py runserver\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nAugust 18, 2022 - 15:17:52\nDjango version 4.0.7, using settings 'netbox.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</code></pre> <p>This ensures that your development environment is now complete and operational. The development server will monitor the development environment and automatically reload in response to any changes made.</p> <p>IDE Integration</p> <p>Some IDEs, such as the highly-recommended PyCharm, will integrate with Django's development server and allow you to run it directly within the IDE. This is strongly encouraged as it makes for a much more convenient development environment.</p>"},{"location":"development/getting-started/#ui-development","title":"UI Development","text":"<p>For UI development you will need to review the Web UI Development Guide</p>"},{"location":"development/getting-started/#populating-demo-data","title":"Populating Demo Data","text":"<p>Once you have your development environment up and running, it might be helpful to populate some \"dummy\" data to make interacting with the UI and APIs more convenient. Check out the netbox-demo-data repo on GitHub, which houses a collection of sample data that can be easily imported to any new NetBox deployment. (This sample data is used to populate the public demo instance at https://demo.netbox.dev.)</p> <p>The demo data is provided in JSON format and loaded into an empty database using Django's <code>loaddata</code> management command. Consult the demo data repo's <code>README</code> file for complete instructions on populating the data.</p>"},{"location":"development/getting-started/#running-tests","title":"Running Tests","text":"<p>Prior to committing any substantial changes to the code base, be sure to run NetBox's test suite to catch potential errors. Tests are run using the <code>test</code> management command, which employs Python's <code>unittest</code> library. Remember to ensure that the Python virtual environment is active before running this command. Also keep in mind that these commands are executed in the <code>netbox/</code> directory, not the root directory of the repository.</p> <p>To avoid potential issues with your local configuration file, set the <code>NETBOX_CONFIGURATION</code> to point to the packaged test configuration at <code>netbox/configuration_testing.py</code>. This will handle things like ensuring that the dummy plugin is enabled for comprehensive testing.</p> <pre><code>export NETBOX_CONFIGURATION=netbox.configuration_testing\ncd netbox/\npython manage.py test\n</code></pre> <p>In cases where you haven't made any changes to the database schema (which is typical), you can append the <code>--keepdb</code> argument to this command to reuse the test database between runs. This cuts down on the time it takes to run the test suite since the database doesn't have to be rebuilt each time. (Note that this argument will cause errors if you've modified any model fields since the previous test run.)</p> <pre><code>python manage.py test --keepdb\n</code></pre> <p>You can also reduce testing time by enabling parallel test execution with the <code>--parallel</code> flag. (By default, this will run as many parallel tests as you have processors. To avoid sluggishness, it's a good idea to specify a lower number of parallel tests.) This flag can be combined with <code>--keepdb</code>, although if you encounter any strange errors, try running the test suite again with parallelization disabled.</p> <pre><code>python manage.py test --parallel &lt;n&gt;\n</code></pre> <p>Finally, it's possible to limit the run to a specific set of tests, specified by their Python path. For example, to run only IPAM and DCIM view tests:</p> <pre><code>python manage.py test dcim.tests.test_views ipam.tests.test_views\n</code></pre> <p>This is handy for instances where just a few tests are failing and you want to re-run them individually.</p> <p>Info</p> <p>NetBox uses django-rich to enhance Django's default <code>test</code> management command.</p>"},{"location":"development/getting-started/#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>Once you're happy with your work and have verified that all tests pass, commit your changes and push it upstream to your fork. Always provide descriptive (but not excessively verbose) commit messages. Be sure to prefix your commit message with the word \"Fixes\" or \"Closes\" and the relevant issue number (with a hash mark). This tells GitHub to automatically close the referenced issue once the commit has been merged.</p> <pre><code>git commit -m \"Closes #1234: Add IPv5 support\"\ngit push origin\n</code></pre> <p>Once your fork has the new commit, submit a pull request to the NetBox repo to propose the changes. Be sure to provide a detailed accounting of the changes being made and the reasons for doing so.</p> <p>Once submitted, a maintainer will review your pull request and either merge it or request changes. If changes are needed, you can make them via new commits to your fork: The pull request will update automatically.</p> <p>Warning</p> <p>Remember, pull requests are permitted only for accepted issues. If an issue you want to work on hasn't been approved by a maintainer yet, it's best to avoid risking your time and effort on a change that might not be accepted. (The one exception to this is trivial changes to the documentation or other non-critical resources.)</p>"},{"location":"development/git-cheat-sheet/","title":"git Cheat Sheet","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>This cheat sheet serves as a convenient reference for NetBox contributors who already somewhat familiar with using git. For a general introduction to the tooling and workflows involved, please see GitHub's guide Getting started with git.</p>"},{"location":"development/git-cheat-sheet/#common-operations","title":"Common Operations","text":""},{"location":"development/git-cheat-sheet/#clone-a-repo","title":"Clone a Repo","text":"<p>This copies a remote git repository (e.g. from GitHub) to your local workstation. It will create a new directory bearing the repo's name in the current path.</p> Command<pre><code>git clone https://github.com/$org-name/$repo-name\n</code></pre> Example<pre><code>$ git clone https://github.com/netbox-community/netbox\nCloning into 'netbox'...\nremote: Enumerating objects: 95112, done.\nremote: Counting objects: 100% (682/682), done.\nremote: Compressing objects: 100% (246/246), done.\nremote: Total 95112 (delta 448), reused 637 (delta 436), pack-reused 94430\nReceiving objects: 100% (95112/95112), 60.40 MiB | 45.82 MiB/s, done.\nResolving deltas: 100% (74979/74979), done.\n</code></pre>"},{"location":"development/git-cheat-sheet/#pull-new-commits","title":"Pull New Commits","text":"<p>To update your local branch with any recent upstream commits, run <code>git pull</code>.</p> Command<pre><code>git pull\n</code></pre> Example<pre><code>$ git pull\nremote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (1/1), done.\nFrom https://github.com/netbox-community/netbox\n   28bc76695..e0741cc9a  develop    -&gt; origin/develop\nUpdating 28bc76695..e0741cc9a\nFast-forward\n docs/release-notes/version-3.3.md | 1 +\n netbox/netbox/settings.py         | 1 +\n 2 files changed, 2 insertions(+)\n</code></pre>"},{"location":"development/git-cheat-sheet/#list-branches","title":"List Branches","text":"<p><code>git branch</code> lists all local branches. Appending <code>-a</code> to this command will list both local (green) and remote (red) branches.</p> Command<pre><code>git branch -a\n</code></pre> Example<pre><code>$ git branch -a\n* develop\n  remotes/origin/10170-changelog\n  remotes/origin/HEAD -&gt; origin/develop\n  remotes/origin/develop\n  remotes/origin/feature\n  remotes/origin/master\n</code></pre>"},{"location":"development/git-cheat-sheet/#switch-branches","title":"Switch Branches","text":"<p>To switch to a different branch, use the <code>checkout</code> command.</p> Command<pre><code>git checkout $branchname\n</code></pre> Example<pre><code>$ git checkout feature\nBranch 'feature' set up to track remote branch 'feature' from 'origin'.\nSwitched to a new branch 'feature'\n</code></pre>"},{"location":"development/git-cheat-sheet/#create-a-new-branch","title":"Create a New Branch","text":"<p>Use the <code>-b</code> argument with <code>checkout</code> to create a new local branch from the current branch.</p> Command<pre><code>git checkout -b $newbranch\n</code></pre> Example<pre><code>$ git checkout -b 123-fix-foo\nSwitched to a new branch '123-fix-foo'\n</code></pre>"},{"location":"development/git-cheat-sheet/#rename-a-branch","title":"Rename a Branch","text":"<p>To rename the current branch, use the <code>git branch</code> command with the <code>-m</code> argument (for \"modify\").</p> Command<pre><code>git branch -m $newname\n</code></pre> Example<pre><code>$ git branch -m jstretch-testing\n$ git branch\n  develop\n  feature\n* jstretch-testing\n</code></pre>"},{"location":"development/git-cheat-sheet/#merge-a-branch","title":"Merge a Branch","text":"<p>To merge one branch into another, use the <code>git merge</code> command. Start by checking out the destination branch, and merge the source branch into it.</p> Command<pre><code>git merge $sourcebranch\n</code></pre> Example<pre><code>$ git checkout testing \nSwitched to branch 'testing'\nYour branch is up to date with 'origin/testing'.\n$ git merge branch2 \nUpdating 9a12b5b5f..8ee42390b\nFast-forward\n newfile.py | 0\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 newfile.py\n</code></pre> <p>Avoid Merging Remote Branches</p> <p>You generally want to avoid merging branches that exist on the remote (upstream) repository, such as <code>develop</code> and <code>feature</code>: Merges into these branches should be done via a pull request on GitHub. Only merge branches when it is necessary to consolidate work you've done locally.</p>"},{"location":"development/git-cheat-sheet/#show-pending-changes","title":"Show Pending Changes","text":"<p>After making changes to files in the repo, <code>git status</code> will display a summary of created, modified, and deleted files.</p> Command<pre><code>git status\n</code></pre> Example<pre><code>$ git status\nOn branch 123-fix-foo\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   README.md\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    foo.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre>"},{"location":"development/git-cheat-sheet/#stage-changed-files","title":"Stage Changed Files","text":"<p>Before creating a new commit, modified files must be staged. This is typically done with the <code>git add</code> command. You can specify a particular path, or just append <code>-A</code> to automatically staged all changed files within the current directory. Run <code>git status</code> again to verify what files have been staged.</p> Command<pre><code>git add -A\n</code></pre> Example<pre><code>$ git add -A\n$ git status\nOn branch 123-fix-foo\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n    modified:   README.md\n    new file:   foo.py\n</code></pre>"},{"location":"development/git-cheat-sheet/#review-staged-files","title":"Review Staged Files","text":"<p>It's a good idea to thoroughly review all staged changes immediately prior to creating a new commit. This can be done using the <code>git diff</code> command. Appending the <code>--staged</code> argument will show staged changes; omitting it will show changes that have not yet been staged.</p> Command<pre><code>git diff --staged\n</code></pre> Example<pre><code>$ git diff --staged\ndiff --git a/README.md b/README.md\nindex 93e125079..4344fb514 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,3 +1,8 @@\n+\n+Added some lines here\n+and here\n+and here too\n+\n &lt;div align=\"center\"&gt;\n   &lt;img src=\"https://raw.githubusercontent.com/netbox-community/netbox/develop/docs/netbox_logo.svg\" width=\"400\" alt=\"NetBox logo\" /&gt;\n &lt;/div&gt;\ndiff --git a/foo.py b/foo.py\nnew file mode 100644\nindex 000000000..e69de29bb\n</code></pre>"},{"location":"development/git-cheat-sheet/#create-a-new-commit","title":"Create a New Commit","text":"<p>The <code>git commit</code> command records your changes to the current branch. Specify a commit message with the <code>-m</code> argument. (If omitted, a file editor will be opened to provide a message.</p> Command<pre><code>git commit -m \"Fixes #123: Fixed the thing that was broken\"\n</code></pre> Example<pre><code>$ git commit -m \"Fixes #123: Fixed the thing that was broken\"\n[123-fix-foo 9a12b5b5f] Fixes #123: Fixed the thing that was broken\n 2 files changed, 5 insertions(+)\n create mode 100644 foo.py\n</code></pre> <p>Automatically Closing Issues</p> <p>GitHub will automatically close any issues referenced in a commit message by <code>Fixes:</code> or <code>Closes:</code> when the commit is merged into the repository's default branch. Contributors are strongly encouraged to follow this convention when forming commit messages. (Use \"Closes\" for feature requests and \"Fixes\" for bugs.)</p>"},{"location":"development/git-cheat-sheet/#push-a-commit-upstream","title":"Push a Commit Upstream","text":"<p>Once you've made a commit locally, it needs to be pushed upstream to the remote repository (typically called \"origin\"). This is done with the <code>git push</code> command. If this is a new branch that doesn't yet exist on the remote repository, you'll need to set the upstream for it when pushing.</p> Command<pre><code>git push -u origin $branchname\n</code></pre> Example<pre><code>$ git push -u origin testing\nCounting objects: 3, done.\nDelta compression using up to 16 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 377 bytes | 377.00 KiB/s, done.\nTotal 3 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nremote: \nremote: Create a pull request for 'testing' on GitHub by visiting:\nremote:      https://github.com/netbox-community/netbox/pull/new/testing\nremote: \nTo https://github.com/netbox-community/netbox\n * [new branch]          testing -&gt; testing\nBranch 'testing' set up to track remote branch 'testing' from 'origin'.\n</code></pre> <p>Tip</p> <p>You can apply the following git configuration to automatically set the upstream for all new branches. This obviates the need to specify <code>-u origin</code>.</p> <pre><code>git config --global push.default current\n</code></pre>"},{"location":"development/git-cheat-sheet/#the-github-cli-client","title":"The GitHub CLI Client","text":"<p>GitHub provides a free CLI client to simplify many aspects of interacting with GitHub repositories. Note that this utility is separate from <code>git</code>, and must be installed separately.</p> <p>This guide provides some examples of common operations, but be sure to check out the GitHub CLI manual for a complete accounting of available commands.</p>"},{"location":"development/git-cheat-sheet/#list-open-pull-requests","title":"List Open Pull Requests","text":"Command<pre><code>gh pr list\n</code></pre> Example<pre><code>$ gh pr list\n\nShowing 3 of 3 open pull requests in netbox-community/netbox\n\n#10223  #7503 API Bulk-Create of Devices does not check Rack-Space  7503-bulkdevice             about 17 hours ago\n#9716   Closes #9599: Add cursor pagination mode                    lyuyangh:cursor-pagination  about 1 month ago\n#9498   Adds replication and adoption for module import             sleepinggenius2:issue_9361  about 2 months ago\n</code></pre>"},{"location":"development/git-cheat-sheet/#check-out-a-pr","title":"Check Out a PR","text":"<p>This command will automatically check out the remote branch associated with an open pull request.</p> Command<pre><code>gh pr checkout $number\n</code></pre> Example<pre><code>$ gh pr checkout 10223\nBranch '7503-bulkdevice' set up to track remote branch '7503-bulkdevice' from 'origin'.\nSwitched to a new branch '7503-bulkdevice'\n</code></pre>"},{"location":"development/git-cheat-sheet/#fixing-mistakes","title":"Fixing Mistakes","text":""},{"location":"development/git-cheat-sheet/#modify-the-previous-commit","title":"Modify the Previous Commit","text":"<p>Sometimes you'll find that you've overlooked a necessary change and need to commit again. If you haven't pushed your most recent commit and just need to make a small tweak or two, you can amend your most recent commit instead of creating a new one.</p> <p>First, stage the desired files with <code>git add</code> and verify the changes, the issue the <code>git commit</code> command with the <code>--amend</code> argument. You can also append the <code>--no-edit</code> argument if you would like to keep the previous commit message.</p> Command<pre><code>git commit --amend --no-edit\n</code></pre> Example<pre><code>$ git add -A\n$ git diff --staged\n$ git commit --amend --no-edit\n[testing 239b16921] Added a new file\n Date: Fri Aug 26 16:30:05 2022 -0400\n 2 files changed, 1 insertion(+)\n create mode 100644 newfile.py\n</code></pre> <p>Don't Amend After Pushing</p> <p>Never amend a commit you've already pushed upstream unless you're certain no one else is working on the same branch. Force-pushing will overwrite the change history, which will break any commits from other contributors. When in doubt, create a new commit instead.</p>"},{"location":"development/git-cheat-sheet/#undo-the-last-commit","title":"Undo the Last Commit","text":"<p>The <code>git reset</code> command can be used to undo the most recent commit. (<code>HEAD~</code> is equivalent to <code>HEAD~1</code> and references the commit prior to the current HEAD.) After making and staging your changes, commit using <code>-c ORIG_HEAD</code> to replace the erroneous commit.</p> Command<pre><code>git reset HEAD~\n</code></pre> Example<pre><code>$ git add -A\n$ git commit -m \"Erroneous commit\"\n[testing 09ce06736] Erroneous commit\n Date: Mon Aug 29 15:20:04 2022 -0400\n 1 file changed, 1 insertion(+)\n create mode 100644 BADCHANGE\n$ git reset HEAD~\n$ rm BADFILE\n$ git add -A\n$ git commit -m \"Fixed commit\"\n[testing c585709f3] Fixed commit\n Date: Mon Aug 29 15:22:38 2022 -0400\n 1 file changed, 65 insertions(+), 20 deletions(-)\n</code></pre> <p>Don't Reset After Pushing</p> <p>Resetting only works until you've pushed your local changes upstream. If you've already pushed upstream, use <code>git revert</code> instead. This will create a new commit that reverts the erroneous one, but ensures that the git history remains intact.</p>"},{"location":"development/git-cheat-sheet/#rebase-from-upstream","title":"Rebase from Upstream","text":"<p>If a change has been pushed to the upstream branch since you most recently pulled it, attempting to push a new local commit will fail:</p> <pre><code>$ git push\nTo https://github.com/netbox-community/netbox.git\n ! [rejected]            develop -&gt; develop (fetch first)\nerror: failed to push some refs to 'https://github.com/netbox-community/netbox.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n</code></pre> <p>To resolve this, first fetch the upstream branch to update your local copy, and then rebase your local branch to include the new changes. Once the rebase has completed, you can push your local commits upstream.</p> Commands<pre><code>git fetch\ngit rebase origin/$branchname\n</code></pre> Example<pre><code>$ git fetch\nremote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (1/1), done.\nFrom https://github.com/netbox-community/netbox\n   815b2d8a2..8c35ebbb7  develop    -&gt; origin/develop\n$ git rebase origin/develop\nFirst, rewinding head to replay your work on top of it...\nApplying: Further tweaks to the PR template\nApplying: Changelog for #10176, #10217\n$ git push\nCounting objects: 9, done.\nDelta compression using up to 16 threads.\nCompressing objects: 100% (9/9), done.\nWriting objects: 100% (9/9), 1.02 KiB | 1.02 MiB/s, done.\nTotal 9 (delta 6), reused 0 (delta 0)\nremote: Resolving deltas: 100% (6/6), completed with 5 local objects.\nTo https://github.com/netbox-community/netbox.git\n   8c35ebbb7..ada745324  develop -&gt; develop\n</code></pre>"},{"location":"development/models/","title":"Modelos (Models)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"development/models/#model-types","title":"Model Types","text":"<p>A NetBox model represents a discrete object type such as a device or IP address. Per Django convention, each model is defined as a Python class and has its own SQL table. All NetBox data models can be categorized by type.</p> <p>The Django content types framework can be used to reference models within the database. A ContentType instance references a model by its <code>app_label</code> and <code>name</code>: For example, the Site model is referred to as <code>dcim.site</code>. The content type combined with an object's primary key form a globally unique identifier for the object (e.g. <code>dcim.site:123</code>).</p>"},{"location":"development/models/#features-matrix","title":"Features Matrix","text":"<ul> <li>Change logging - Changes to these objects are automatically recorded in the change log</li> <li>Webhooks - NetBox is capable of generating outgoing webhooks for these objects</li> <li>Custom fields - These models support the addition of user-defined fields</li> <li>Export templates - Users can create custom export templates for these models</li> <li>Tagging - The models can be tagged with user-defined tags</li> <li>Journaling - These models support persistent historical commentary</li> <li>Nesting - These models can be nested recursively to create a hierarchy</li> </ul> Type Change Logging Webhooks Custom Fields Export Templates Tags Journaling Nesting Primary Organizational Nested Group Component Component Template"},{"location":"development/models/#models-index","title":"Models Index","text":""},{"location":"development/models/#primary-models","title":"Primary Models","text":"<ul> <li>circuits.Circuit</li> <li>circuits.Provider</li> <li>circuits.ProviderNetwork</li> <li>dcim.Cable</li> <li>dcim.Device</li> <li>dcim.DeviceType</li> <li>dcim.PowerFeed</li> <li>dcim.PowerPanel</li> <li>dcim.Rack</li> <li>dcim.RackReservation</li> <li>dcim.Site</li> <li>dcim.VirtualChassis</li> <li>dcim.VirtualDeviceContext</li> <li>ipam.Aggregate</li> <li>ipam.ASN</li> <li>ipam.FHRPGroup</li> <li>ipam.IPAddress</li> <li>ipam.IPRange</li> <li>ipam.L2VPN</li> <li>ipam.L2VPNTermination</li> <li>ipam.Prefix</li> <li>ipam.RouteTarget</li> <li>ipam.Service</li> <li>ipam.VLAN</li> <li>ipam.VRF</li> <li>tenancy.Contact</li> <li>tenancy.Tenant</li> <li>virtualization.Cluster</li> <li>virtualization.VirtualMachine</li> <li>wireless.WirelessLAN</li> <li>wireless.WirelessLink</li> </ul>"},{"location":"development/models/#organizational-models","title":"Organizational Models","text":"<ul> <li>circuits.CircuitType</li> <li>dcim.DeviceRole</li> <li>dcim.Manufacturer</li> <li>dcim.Platform</li> <li>dcim.RackRole</li> <li>ipam.RIR</li> <li>ipam.Role</li> <li>ipam.VLANGroup</li> <li>tenancy.ContactRole</li> <li>virtualization.ClusterGroup</li> <li>virtualization.ClusterType</li> </ul>"},{"location":"development/models/#nested-group-models","title":"Nested Group Models","text":"<ul> <li>dcim.Location (formerly RackGroup)</li> <li>dcim.Region</li> <li>dcim.SiteGroup</li> <li>tenancy.ContactGroup</li> <li>tenancy.TenantGroup</li> <li>wireless.WirelessLANGroup</li> </ul>"},{"location":"development/models/#component-models","title":"Component Models","text":"<ul> <li>dcim.ConsolePort</li> <li>dcim.ConsoleServerPort</li> <li>dcim.DeviceBay</li> <li>dcim.FrontPort</li> <li>dcim.Interface</li> <li>dcim.InventoryItem</li> <li>dcim.PowerOutlet</li> <li>dcim.PowerPort</li> <li>dcim.RearPort</li> <li>virtualization.VMInterface</li> </ul>"},{"location":"development/models/#component-template-models","title":"Component Template Models","text":"<ul> <li>dcim.ConsolePortTemplate</li> <li>dcim.ConsoleServerPortTemplate</li> <li>dcim.DeviceBayTemplate</li> <li>dcim.FrontPortTemplate</li> <li>dcim.InterfaceTemplate</li> <li>dcim.PowerOutletTemplate</li> <li>dcim.PowerPortTemplate</li> <li>dcim.RearPortTemplate</li> </ul>"},{"location":"development/release-checklist/","title":"Checklist de Vers\u00f5es (Release)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>This documentation describes the process of packaging and publishing a new NetBox release. There are three types of release:</p> <ul> <li>Major release (e.g. v2.11 to v3.0)</li> <li>Minor release (e.g. v3.2 to v3.3)</li> <li>Patch release (e.g. v3.3.0 to v3.3.1)</li> </ul> <p>While major releases generally introduce some very substantial change to the application, they are typically treated the same as minor version increments for the purpose of release packaging.</p>"},{"location":"development/release-checklist/#minor-version-releases","title":"Minor Version Releases","text":""},{"location":"development/release-checklist/#address-constrained-dependencies","title":"Address Constrained Dependencies","text":"<p>Sometimes it becomes necessary to constrain dependencies to a particular version, e.g. to work around a bug in a newer release or to avoid a breaking change that we have yet to accommodate. (Another common example is to limit the upstream Django release.) For example:</p> <pre><code># https://github.com/encode/django-rest-framework/issues/6053\ndjangorestframework==3.8.1\n</code></pre> <p>These version constraints are added to <code>base_requirements.txt</code> to ensure that newer packages are not installed when updating the pinned dependencies in <code>requirements.txt</code> (see the Update Requirements section below). Before each new minor version of NetBox is released, all such constraints on dependent packages should be addressed if feasible. This guards against the collection of stale constraints over time.</p>"},{"location":"development/release-checklist/#close-the-release-milestone","title":"Close the Release Milestone","text":"<p>Close the release milestone on GitHub after ensuring there are no remaining open issues associated with it.</p>"},{"location":"development/release-checklist/#update-the-release-notes","title":"Update the Release Notes","text":"<p>Check that a link to the release notes for the new version is present in the navigation menu (defined in <code>mkdocs.yml</code>), and that a summary of all major new features has been added to <code>docs/index.md</code>.</p>"},{"location":"development/release-checklist/#manually-perform-a-new-install","title":"Manually Perform a New Install","text":"<p>Start the documentation server and navigate to the current version of the installation docs:</p> <pre><code>mkdocs serve\n</code></pre> <p>Follow these instructions to perform a new installation of NetBox in a temporary environment. This process must not be automated: The goal of this step is to catch any errors or omissions in the documentation, and ensure that it is kept up-to-date for each release. Make any necessary changes to the documentation before proceeding with the release.</p>"},{"location":"development/release-checklist/#merge-the-release-branch","title":"Merge the Release Branch","text":"<p>Submit a pull request to merge the <code>feature</code> branch into the <code>develop</code> branch in preparation for its release. Once it has been merged, continue with the section for patch releases below.</p>"},{"location":"development/release-checklist/#patch-releases","title":"Patch Releases","text":""},{"location":"development/release-checklist/#update-requirements","title":"Update Requirements","text":"<p>Before each release, update each of NetBox's Python dependencies to its most recent stable version. These are defined in <code>requirements.txt</code>, which is updated from <code>base_requirements.txt</code> using <code>pip</code>. To do this:</p> <ol> <li>Upgrade the installed version of all required packages in your environment (<code>pip install -U -r base_requirements.txt</code>).</li> <li>Run all tests and check that the UI and API function as expected.</li> <li>Review each requirement's release notes for any breaking or otherwise noteworthy changes.</li> <li>Update the package versions in <code>requirements.txt</code> as appropriate.</li> </ol> <p>In cases where upgrading a dependency to its most recent release is breaking, it should be constrained to its current minor version in <code>base_requirements.txt</code> with an explanatory comment and revisited for the next major NetBox release (see the Address Constrained Dependencies section above).</p>"},{"location":"development/release-checklist/#update-version-and-changelog","title":"Update Version and Changelog","text":"<ul> <li>Update the <code>VERSION</code> constant in <code>settings.py</code> to the new release version.</li> <li>Update the example version numbers in the feature request and bug report templates under <code>.github/ISSUE_TEMPLATES/</code>.</li> <li>Replace the \"FUTURE\" placeholder in the release notes with the current date.</li> </ul> <p>Commit these changes to the <code>develop</code> branch and push upstream.</p>"},{"location":"development/release-checklist/#verify-ci-build-status","title":"Verify CI Build Status","text":"<p>Ensure that continuous integration testing on the <code>develop</code> branch is completing successfully. If it fails, take action to correct the failure before proceding with the release.</p>"},{"location":"development/release-checklist/#submit-a-pull-request","title":"Submit a Pull Request","text":"<p>Submit a pull request titled \"Release vX.Y.Z\" to merge the <code>develop</code> branch into <code>master</code>. Copy the documented release notes into the pull request's body.</p> <p>Once CI has completed on the PR, merge it. This effects a new release in the <code>master</code> branch.</p>"},{"location":"development/release-checklist/#create-a-new-release","title":"Create a New Release","text":"<p>Create a new release on GitHub with the following parameters.</p> <ul> <li>Tag: Current version (e.g. <code>v3.3.1</code>)</li> <li>Target: <code>master</code></li> <li>Title: Version and date (e.g. <code>v3.3.1 - 2022-08-25</code>)</li> <li>Description: Copy from the pull request body</li> </ul> <p>Once created, the release will become available for users to install.</p>"},{"location":"development/release-checklist/#update-the-development-version","title":"Update the Development Version","text":"<p>On the <code>develop</code> branch, update <code>VERSION</code> in <code>settings.py</code> to point to the next release. For example, if you just released v3.3.1, set:</p> <pre><code>VERSION = 'v3.3.2-dev'\n</code></pre> <p>Commit this change with the comment \"PRVB\" (for post-release version bump) and push the commit upstream.</p>"},{"location":"development/search/","title":"Pesquisa (Search)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>NetBox v3.4 introduced a new global search mechanism, which employs the <code>extras.CachedValue</code> model to store discrete field values from many models in a single table.</p>"},{"location":"development/search/#searchindex","title":"SearchIndex","text":"<p>To enable search support for a model, declare and register a subclass of <code>netbox.search.SearchIndex</code> for it. Typically, this will be done within an app's <code>search.py</code> module.</p> <pre><code>from netbox.search import SearchIndex, register_search\n\n@register_search\nclass MyModelIndex(SearchIndex):\n    model = MyModel\n    fields = (\n        ('name', 100),\n        ('description', 500),\n        ('comments', 5000),\n    )\n</code></pre> <p>A SearchIndex subclass defines both its model and a list of two-tuples specifying which model fields to be indexed and the weight (precedence) associated with each. Guidance on weight assignment for fields is provided below.</p>"},{"location":"development/search/#field-weight-guidance","title":"Field Weight Guidance","text":"Weight Field Role Examples 50 Unique serialized attribute Device.asset_tag 60 Unique serialized attribute (per related object) Device.serial 100 Primary human identifier Device.name, Circuit.cid, Cable.label 110 Slug Site.slug 200 Secondary identifier Provider.account, DeviceType.part_number 300 Highly unique descriptive attribute CircuitTermination.xconnect_id, IPAddress.dns_name 500 Description Site.description 1000 Custom field default - 2000 Other discrete attribute CircuitTermination.port_speed 5000 Comment field Site.comments"},{"location":"development/signals/","title":"Sinais (Signals)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>In addition to Django's built-in signals, NetBox defines some of its own, listed below.</p>"},{"location":"development/signals/#post_clean","title":"post_clean","text":"<p>This signal is sent by models which inherit from <code>CustomValidationMixin</code> at the end of their <code>clean()</code> method.</p>"},{"location":"development/signals/#receivers","title":"Receivers","text":"<ul> <li><code>extras.signals.run_custom_validators()</code></li> </ul>"},{"location":"development/style-guide/","title":"Guia de Estilo (Style Guide)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>NetBox generally follows the Django style guide, which is itself based on PEP 8. Pycodestyle is used to validate code formatting, ignoring certain violations.</p>"},{"location":"development/style-guide/#code","title":"Code","text":""},{"location":"development/style-guide/#general-guidance","title":"General Guidance","text":"<ul> <li> <p>When in doubt, remain consistent: It is better to be consistently incorrect than inconsistently correct. If you notice in the course of unrelated work a pattern that should be corrected, continue to follow the pattern for now and submit a separate bug report so that the entire code base can be evaluated at a later point.</p> </li> <li> <p>Prioritize readability over concision. Python is a very flexible language that typically offers several multiple options for expressing a given piece of logic, but some may be more friendly to the reader than others. (List comprehensions are particularly vulnerable to over-optimization.) Always remain considerate of the future reader who may need to interpret your code without the benefit of the context within which you are writing it.</p> </li> <li> <p>Include a newline at the end of every file.</p> </li> <li> <p>No easter eggs. While they can be fun, NetBox must be considered as a business-critical tool. The potential, however minor, for introducing a bug caused by unnecessary code is best avoided entirely.</p> </li> <li> <p>Constants (variables which do not change) should be declared in <code>constants.py</code> within each app. Wildcard imports from the file are acceptable.</p> </li> <li> <p>Every model must have a docstring. Every custom method should include an explanation of its function.</p> </li> <li> <p>Nested API serializers generate minimal representations of an object. These are stored separately from the primary serializers to avoid circular dependencies. Always import nested serializers from other apps directly. For example, from within the DCIM app you would write <code>from ipam.api.nested_serializers import NestedIPAddressSerializer</code>.</p> </li> </ul>"},{"location":"development/style-guide/#pep-8-exceptions","title":"PEP 8 Exceptions","text":"<p>NetBox ignores certain PEP8 assertions. These are listed below.</p>"},{"location":"development/style-guide/#wildcard-imports","title":"Wildcard Imports","text":"<p>Wildcard imports (for example, <code>from .constants import *</code>) are acceptable under any of the following conditions:</p> <ul> <li>The library being import contains only constant declarations (e.g. <code>constants.py</code>)</li> <li>The library being imported explicitly defines <code>__all__</code></li> </ul>"},{"location":"development/style-guide/#maximum-line-length-e501","title":"Maximum Line Length (E501)","text":"<p>NetBox does not restrict lines to a maximum length of 79 characters. We use a maximum line length of 120 characters, however this is not enforced by CI. The maximum length does not apply to HTML templates or to automatically generated code (e.g. database migrations).</p>"},{"location":"development/style-guide/#line-breaks-following-binary-operators-w504","title":"Line Breaks Following Binary Operators (W504)","text":"<p>Line breaks are permitted following binary operators.</p>"},{"location":"development/style-guide/#enforcing-code-style","title":"Enforcing Code Style","text":"<p>The <code>pycodestyle</code> utility (formerly <code>pep8</code>) is used by the CI process to enforce code style. A pre-commit hook which runs this automatically is included with NetBox. To invoke <code>pycodestyle</code> manually, run:</p> <pre><code>pycodestyle --ignore=W504,E501 netbox/\n</code></pre>"},{"location":"development/style-guide/#introducing-new-dependencies","title":"Introducing New Dependencies","text":"<p>The introduction of a new dependency is best avoided unless it is absolutely necessary. For small features, it's generally preferable to replicate functionality within the NetBox code base rather than to introduce reliance on an external project. This reduces both the burden of tracking new releases and our exposure to outside bugs and supply chain attacks.</p> <p>If there's a strong case for introducing a new dependency, it must meet the following criteria:</p> <ul> <li>Its complete source code must be published and freely accessible without registration.</li> <li>Its license must be conducive to inclusion in an open source project.</li> <li>It must be actively maintained, with no longer than one year between releases.</li> <li>It must be available via the Python Package Index (PyPI).</li> </ul> <p>When adding a new dependency, a short description of the package and the URL of its code repository must be added to <code>base_requirements.txt</code>. Additionally, a line specifying the package name pinned to the current stable release must be added to <code>requirements.txt</code>. This ensures that NetBox will install only the known-good release.</p>"},{"location":"development/style-guide/#written-works","title":"Written Works","text":""},{"location":"development/style-guide/#general-guidance_1","title":"General Guidance","text":"<ul> <li> <p>Written material must always meet a reasonable professional standard, with proper grammar, spelling, and punctuation.</p> </li> <li> <p>Use two line breaks between paragraphs.</p> </li> <li> <p>Use only a single space between sentences.</p> </li> <li> <p>All documentation is to be written in Markdown, with modest amounts of HTML permitted where needed to overcome technical limitations.</p> </li> </ul>"},{"location":"development/style-guide/#branding","title":"Branding","text":"<ul> <li> <p>When referring to NetBox in writing, use the proper form \"NetBox,\" with the letters N and B capitalized. The lowercase form \"netbox\" should be used in code, filenames, etc. but never \"Netbox\" or any other deviation.</p> </li> <li> <p>There is an SVG form of the NetBox logo at docs/netbox_logo.svg. It is preferred to use this logo for all purposes as it scales to arbitrary sizes without loss of resolution. If a raster image is required, the SVG logo should be converted to a PNG image of the prescribed size.</p> </li> </ul>"},{"location":"development/user-preferences/","title":"Prefer\u00eancias do Usu\u00e1rio (User Preferences)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>The <code>users.UserConfig</code> model holds individual preferences for each user in the form of JSON data. This page serves as a manifest of all recognized user preferences in NetBox.</p>"},{"location":"development/user-preferences/#available-preferences","title":"Available Preferences","text":"Name Description data_format Preferred format when rendering raw data (JSON or YAML) pagination.per_page The number of items to display per page of a paginated table pagination.placement Where to display the paginator controls relative to the table tables.${table}.columns The ordered list of columns to display when viewing the table tables.${table}.ordering A list of column names by which the table should be ordered ui.colormode Light or dark mode in the user interface"},{"location":"development/web-ui/","title":"Interface Web (Web UI)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"development/web-ui/#front-end-technologies","title":"Front End Technologies","text":"<p>The NetBox UI is built on languages and frameworks:</p>"},{"location":"development/web-ui/#styling-html-elements","title":"Styling &amp; HTML Elements","text":""},{"location":"development/web-ui/#bootstrap-5","title":"Bootstrap 5","text":"<p>The majority of the NetBox UI is made up of stock Bootstrap components, with some styling modifications and custom components added on an as-needed basis. Bootstrap uses Sass, and NetBox extends Bootstrap's core Sass files for theming and customization.</p>"},{"location":"development/web-ui/#client-side-scripting","title":"Client-side Scripting","text":""},{"location":"development/web-ui/#typescript","title":"TypeScript","text":"<p>All client-side scripting is transpiled from TypeScript to JavaScript and served by Django. In development, TypeScript is an extremely effective tool for accurately describing and checking the code, which leads to significantly fewer bugs, a better development experience, and more predictable/readable code.</p> <p>As part of the bundling process, Bootstrap's JavaScript plugins are imported and bundled alongside NetBox's front-end code.</p> <p>NetBox is jQuery-free</p> <p>Following the Bootstrap team's deprecation of jQuery in Bootstrap 5, NetBox also no longer uses jQuery in front-end code.</p>"},{"location":"development/web-ui/#guidance","title":"Guidance","text":"<p>NetBox generally follows the following guidelines for front-end code:</p> <ul> <li>Bootstrap utility classes may be used to solve one-off issues or to implement singular components, as long as the class list does not exceed 4-5 classes. If an element needs more than 5 utility classes, a custom SCSS class should be added that contains the required style properties.</li> <li>Custom classes must be commented, explaining the general purpose of the class and where it is used.</li> <li>Reuse SCSS variables whenever possible. CSS values should (almost) never be hard-coded.</li> <li>All TypeScript functions must have, at a minimum, a basic JSDoc description of what the function is for and where it is used. If possible, document all function arguments via <code>@param</code> JSDoc block tags.</li> <li>Expanding on NetBox's dependency policy, new front-end dependencies should be avoided unless absolutely necessary. Every new front-end dependency adds to the CSS/JavaScript file size that must be loaded by the client and this should be minimized as much as possible. If adding a new dependency is unavoidable, use a tool like Bundlephobia to ensure the smallest possible library is used.</li> <li>All UI elements must be usable on all common screen sizes, including mobile devices. Be sure to test newly implemented solutions (JavaScript included) on as many screen sizes and device types as possible.</li> <li>NetBox aligns with Bootstrap's supported Browsers and Devices list.</li> </ul>"},{"location":"development/web-ui/#ui-development","title":"UI Development","text":"<p>To contribute to the NetBox UI, you'll need to review the main Getting Started guide in order to set up your base environment.</p>"},{"location":"development/web-ui/#tools","title":"Tools","text":"<p>Once you have a working NetBox development environment, you'll need to install a few more tools to work with the NetBox UI:</p> <ul> <li>NodeJS (the LTS release should suffice)</li> <li>Yarn (version 1)</li> </ul> <p>After Node and Yarn are installed on your system, you'll need to install all the NetBox UI dependencies:</p> <pre><code>$ cd netbox/project-static\n$ yarn\n</code></pre> <p>Check Your Working Directory</p> <p>You need to be in the <code>netbox/project-static</code> directory to run the below <code>yarn</code> commands.</p>"},{"location":"development/web-ui/#bundling","title":"Bundling","text":"<p>In order for the TypeScript and Sass (SCSS) source files to be usable by a browser, they must first be transpiled (TypeScript \u2192 JavaScript, Sass \u2192 CSS), bundled, and minified. After making changes to TypeScript or Sass source files, run <code>yarn bundle</code>.</p> <p><code>yarn bundle</code> is a wrapper around the following subcommands, any of which can be run individually:</p> Command Action <code>yarn bundle</code> Bundle TypeScript and Sass (SCSS) source files. <code>yarn bundle:styles</code> Bundle Sass (SCSS) source files only. <code>yarn bundle:scripts</code> Bundle TypeScript source files only. <p>All output files will be written to <code>netbox/project-static/dist</code>, where Django will pick them up when <code>manage.py collectstatic</code> is run.</p> <p>Remember to re-run <code>manage.py collectstatic</code></p> <p>If you're running the development web server \u2014 <code>manage.py runserver</code> \u2014 you'll need to run <code>manage.py collectstatic</code> to see your changes.</p>"},{"location":"development/web-ui/#linting-formatting-type-checking","title":"Linting, Formatting &amp; Type Checking","text":"<p>Before committing any changes to TypeScript files, and periodically throughout the development process, you should run <code>yarn validate</code> to catch formatting, code quality, or type errors.</p> <p>IDE Integrations</p> <p>If you're using an IDE, it is strongly recommended to install ESLint, TypeScript, and Prettier integrations, if available. Most of them will automatically check and/or correct issues in the code as you develop, which can significantly increase your productivity as a contributor.</p> <p><code>yarn validate</code> is a wrapper around the following subcommands, any of which can be run individually:</p> Command Action <code>yarn validate</code> Run all validation. <code>yarn validate:lint</code> Validate TypeScript code via ESLint only. <code>yarn validate:types</code> Validate TypeScript code compilation only. <code>yarn validate:formatting</code> Validate code formatting of JavaScript &amp; Sass/SCSS files. <code>yarn validate:formatting:styles</code> Validate code formatting Sass/SCSS only. <code>yarn validate:formatting:scripts</code> Validate code formatting TypeScript only. <p>You can also run the following commands to automatically fix formatting issues:</p> Command Action <code>yarn format</code> Format TypeScript and Sass (SCSS) source files. <code>yarn format:styles</code> Format Sass (SCSS) source files only. <code>yarn format:scripts</code> Format TypeScript source files only."},{"location":"features/api-integration/","title":"Integra\u00e7\u00e3o &amp; API","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>NetBox includes a slew of features which enable integration with other tools and resources powering your network.</p>"},{"location":"features/api-integration/#rest-api","title":"REST API","text":"<p>NetBox's REST API, powered by the Django REST Framework, provides a robust yet accessible interface for creating, modifying, and deleting objects. Employing HTTP for transfer and JSON for data encapsulation, the REST API is easily consumed by clients on any platform and extremely well suited for automation tasks.</p> <pre><code>curl -s -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/ \\\n--data '{\"prefix\": \"192.0.2.0/24\", \"site\": {\"name\": \"Branch 12\"}}'\n</code></pre> <p>The REST API employs token-based authentication, which maps API clients to user accounts and their assigned permissions. The API endpoints are fully documented using OpenAPI, and NetBox even includes a convenient browser-based version of the API for exploration. The open source pynetbox and go-netbox API client libraries are also available for Python and Go, respectively.</p> <p>To learn more about this feature, check out the REST API documentation.</p>"},{"location":"features/api-integration/#graphql-api","title":"GraphQL API","text":"<p>NetBox also provides a GraphQL API to complement its REST API. GraphQL enables complex queries for arbitrary objects and fields, enabling the client to retrieve only the specific data it needs from NetBox. This is a special-purpose read-only API intended for efficient queries. Like the REST API, the GraphQL API employs token-based authentication.</p> <p>To learn more about this feature, check out the GraphQL API documentation.</p>"},{"location":"features/api-integration/#webhooks","title":"Webhooks","text":"<p>A webhook is a mechanism for conveying to some external system a change that took place in NetBox. For example, you may want to notify a monitoring system whenever the status of a device is updated in NetBox. This can be done by creating a webhook for the device model in NetBox and identifying the webhook receiver. When NetBox detects a change to a device, an HTTP request containing the details of the change and who made it be sent to the specified receiver. Webhooks are an excellent mechanism for building event-based automation processes.</p> <p>To learn more about this feature, check out the webhooks documentation.</p>"},{"location":"features/api-integration/#napalm","title":"NAPALM","text":"<p>NAPALM is a Python library which enables direct interaction with network devices of various platforms. When configured, NetBox supports fetching live operational and status data directly from network devices to be compared to what has been defined in NetBox. This allows for easily validating the device's operational state against its desired state. Additionally, NetBox's REST API can act as a sort of proxy for NAPALM commands, allowing external clients to interact with network devices by sending HTTP requests to the appropriate API endpoint.</p> <p>To learn more about this feature, check out the NAPALM documentation.</p>"},{"location":"features/api-integration/#prometheus-metrics","title":"Prometheus Metrics","text":"<p>NetBox includes a special <code>/metrics</code> view which exposes metrics for a Prometheus scraper, powered by the open source django-prometheus library. To learn more about this feature, check out the Prometheus metrics documentation.</p>"},{"location":"features/authentication-permissions/","title":"Permiss\u00f5es de Autentica\u00e7\u00e3o","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"features/authentication-permissions/#object-based-permissions","title":"Object-Based Permissions","text":"<p>NetBox boasts a very robust permissions system which extends well beyond the model-based permissions of the underlying Django framework. Assigning permissions in NetBox involves several dimensions:</p> <ul> <li>The type(s) of object to which the permission applies</li> <li>The users and/or groups being granted the permissions</li> <li>The action(s) permitted by the permission (e.g. view, add, change, etc.)</li> <li>Any constraints limiting application of the permission to a particular subset of objects</li> </ul> <p>The implementation of constrains is what enables NetBox administrators to assign per-object permissions: Users can be limited to viewing or interacting with arbitrary subsets of objects based on the objects' attributes. For example, you might restrict a particular user to viewing only those prefixes or IP addresses within a particular VRF. Or you might restrict a group to modifying devices within a particular region.</p> <p>Permission constraints are declared in JSON format when creating a permission, and operate very similarly to Django ORM queries. For instance, here's a constraint that matches reserved VLANs with a VLAN ID between 100 and 199:</p> <pre><code>[\n{\n\"vid__gte\": 100,\n\"vid__lt\": 200\n},\n{\n\"status\": \"reserved\"\n}\n]\n</code></pre> <p>Check out the permissions documentation for more information about permission constraints.</p>"},{"location":"features/authentication-permissions/#ldap-authentication","title":"LDAP Authentication","text":"<p>NetBox includes a built-in authentication backend for authenticating users against a remote LDAP server. The installation documentation provides more detail on this capability.</p>"},{"location":"features/authentication-permissions/#single-sign-on-sso","title":"Single Sign-On (SSO)","text":"<p>NetBox integrates with the open source python-social-auth library to provide myriad options for single sign-on (SSO) authentication. These include:</p> <ul> <li>Cognito</li> <li>GitHub &amp; GitHub Enterprise</li> <li>GitLab</li> <li>Google</li> <li>Hashicorp Vault</li> <li>Keycloak</li> <li>Microsoft Azure AD</li> <li>Microsoft Graph</li> <li>Okta</li> <li>OIDC</li> </ul> <p>...and many others. It's also possible to build your own custom backends as needed using python-social-auth's base OAuth, OpenID, and SAML classes. You can find some examples of configuring SSO in NetBox' authentication documentation.</p>"},{"location":"features/change-logging/","title":"Logging de Mudan\u00e7as (Change Logging)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Every time an object in NetBox is created, updated, or deleted, a serialized copy of that object taken both before and after the change is saved to the database, along with meta data including the current time and the user associated with the change. These records form a persistent record of changes both for each individual object as well as NetBox as a whole. The global change log can be viewed by navigating to Other &gt; Change Log.</p> <p>A serialized representation of the instance being modified is included in JSON format. This is similar to how objects are conveyed within the REST API, but does not include any nested representations. For instance, the <code>tenant</code> field of a site will record only the tenant's ID, not a representation of the tenant.</p> <p>When a request is made, a UUID is generated and attached to any change records resulting from that request. For example, editing three objects in bulk will create a separate change record for each  (three in total), and each of those objects will be associated with the same UUID. This makes it easy to identify all the change records resulting from a particular request.</p> <p>Change records are exposed in the API via the read-only endpoint <code>/api/extras/object-changes/</code>. They may also be exported via the web UI in CSV format.</p>"},{"location":"features/circuits/","title":"Circuitos","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>NetBox is ideal for managing your network's transit and peering providers and circuits. It provides all the flexibility needed to model physical circuits in both data center and enterprise environments, and allows for \"connecting\" circuits directly to device interfaces via cables.</p> <pre><code>flowchart TD\n    ASN --&gt; Provider\n    Provider --&gt; ProviderNetwork &amp; Circuit\n    CircuitType --&gt; Circuit\n\nclick ASN \"../../models/circuits/asn/\"\nclick Circuit \"../../models/circuits/circuit/\"\nclick CircuitType \"../../models/circuits/circuittype/\"\nclick Provider \"../../models/circuits/provider/\"\nclick ProviderNetwork \"../../models/circuits/providernetwork/\"</code></pre>"},{"location":"features/circuits/#providers","title":"Providers","text":"<p>A provider is any organization which provides Internet or private connectivity. Typically, these are large carriers, however they might also include regional providers or even internal services. Each provider can be assigned account and contact details, and may have one or more AS numbers assigned to it.</p> <p>Sometimes you'll need to model provider networks into which you don't have full visibility; these are typically represented on topology diagrams with cloud icons. NetBox facilitates this through its provider network model: A provider network represents a \"black box\" network to which your circuits can connect. A common example is a provider MPLS network connecting multiple sites.</p>"},{"location":"features/circuits/#circuits","title":"Circuits","text":"<p>A circuit is a physical connection between two points, which is installed and maintained by an external provider. For example, an Internet connection delivered as a fiber optic cable would be modeled as a circuit in NetBox.</p> <p>Each circuit is associated with a provider and assigned a circuit ID, which must be unique to that provider. A circuit is also assigned a user-defined type, operational status, and various other operating characteristics.</p> <p>Each circuit may have up to two terminations (A and Z) defined. Each termination can be associated with a particular site or provider network. In the case of the former, a cable can be connected between the circuit termination and a device component to map its physical connectivity.</p> <p>Physical vs. Virtual Circuits</p> <p>The circuit model in NetBox represents physical connections. Don't confuse these with virtual circuits which may be offered by providers overlaid on physical infrastructure. (For example, a VLAN-tagged subinterface would be a virtual circuit.) A good rule of thumb: If you can't point to it, it's not a physical circuit.</p>"},{"location":"features/contacts/","title":"Contatos","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Much like tenancy, contact assignment enables you to track ownership of resources modeled in NetBox. A contact represents an individual responsible for a resource within the context of its assigned role.</p> <pre><code>flowchart TD\n    ContactGroup --&gt; ContactGroup &amp; Contact\n    ContactRole &amp; Contact --&gt; assignment([Assignment])\n    assignment --&gt; Object\n\nclick Contact \"../../models/tenancy/contact/\"\nclick ContactGroup \"../../models/tenancy/contactgroup/\"\nclick ContactRole \"../../models/tenancy/contactrole/\"</code></pre>"},{"location":"features/contacts/#contact-groups","title":"Contact Groups","text":"<p>Contacts can be grouped arbitrarily into a recursive hierarchy, and a contact can be assigned to a group at any level within the hierarchy.</p>"},{"location":"features/contacts/#contact-roles","title":"Contact Roles","text":"<p>A contact role defines the relationship of a contact to an assigned object. For example, you might define roles for administrative, operational, and emergency contacts.</p>"},{"location":"features/contacts/#contacts","title":"Contacts","text":"<p>A contact should represent an individual or permanent point of contact. Each contact must define a name, and may optionally include a title, phone number, email address, and related details.</p> <p>Contacts are reused for assignments, so each unique contact must be created only once and can be assigned to any number of NetBox objects, and there is no limit to the number of assigned contacts an object may have. Most core objects in NetBox can have contacts assigned to them.</p> <p>The following models support the assignment of contacts:</p> <ul> <li>circuits.Circuit</li> <li>circuits.Provider</li> <li>dcim.Device</li> <li>dcim.Location</li> <li>dcim.Manufacturer</li> <li>dcim.PowerPanel</li> <li>dcim.Rack</li> <li>dcim.Region</li> <li>dcim.Site</li> <li>dcim.SiteGroup</li> <li>tenancy.Tenant</li> <li>virtualization.Cluster</li> <li>virtualization.ClusterGroup</li> <li>virtualization.VirtualMachine</li> </ul>"},{"location":"features/context-data/","title":"Dados de Contexto (Context Data)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Configuration context data (or \"config contexts\" for short) is a powerful feature that enables users to define arbitrary data that applies to device and virtual machines based on certain characteristics. For example, suppose you want to define syslog servers for devices assigned to sites within a particular region. In NetBox, you can create a config context instance containing this data and apply it to the desired region. All devices within this region will now include this data when fetched via an API.</p> <pre><code>{\n\"syslog-servers\": [\n\"192.168.43.107\",\n\"192.168.48.112\"\n]\n}\n</code></pre> <p>Config contexts can be computed for objects based on the following criteria:</p> Type Devices Virtual Machines Region Site group Site Location Device type Role Platform Cluster type Cluster group Cluster Tenant group Tenant Tag <p>There are no restrictions around what data can be stored in a configuration context, so long as it can be expressed in JSON.</p>"},{"location":"features/context-data/#hierarchical-rendering","title":"Hierarchical Rendering","text":"<p>While this is handy on its own, the real power of context data stems from its ability to be merged and overridden using multiple instances. For example, perhaps you need to define different syslog servers within the region for a particular device role. You can create a second config context with the appropriate data and a higher weight, and apply it to the desired role. This will override the lower-weight data that applies to the entire region. As you can imagine, this flexibility can cater to many complex use cases.</p> <p>For example, suppose we want to specify a set of syslog and NTP servers for all devices within a region. We could create a config context instance with a weight of 1000 assigned to the region, with the following JSON data:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n],\n\"syslog-servers\": [\n\"172.16.9.100\",\n\"172.16.9.101\"\n]\n}\n</code></pre> <p>But suppose there's a problem at one particular site within this region preventing traffic from reaching the regional syslog server. Devices there need to use a local syslog server instead of the two defined above. We'll create a second config context assigned only to that site with a weight of 2000 and the following data:</p> <pre><code>{\n\"syslog-servers\": [\n\"192.168.43.107\"\n]\n}\n</code></pre> <p>When the context data for a device at this site is rendered, the second, higher-weight data overwrite the first, resulting in the following:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n],\n\"syslog-servers\": [\n\"192.168.43.107\"\n]\n}\n</code></pre> <p>Data from the higher-weight context overwrites conflicting data from the lower-weight context, while the non-conflicting portion of the lower-weight context (the list of NTP servers) is preserved.</p>"},{"location":"features/context-data/#local-context-data","title":"Local Context Data","text":"<p>Devices and virtual machines may also have a local context data defined. This local context will always take precedence over any separate config context objects which apply to the device/VM. This is useful in situations where we need to call out a specific deviation in the data for a particular object.</p> <p>Warning</p> <p>If you find that you're routinely defining local context data for many individual devices or virtual machines, custom fields may offer a more effective solution.</p>"},{"location":"features/customization/","title":"Customiza\u00e7\u00e3o","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>While NetBox strives to meet the needs of every network, the needs of users to cater to their own unique environments cannot be ignored. NetBox was built with this in mind, and can be customized in many ways to better suit your particular needs.</p>"},{"location":"features/customization/#tags","title":"Tags","text":"<p>Most objects in NetBox can be assigned user-created tags to aid with organization and filtering. Tag values are completely arbitrary: They may be used to store data in key-value pairs, or they may be employed simply as labels against which objects can be filtered. Each tag can also be assigned a color for quicker differentiation in the user interface.</p> <p>Objects can be filtered by the tags they have applied. For example, the following API request will retrieve all devices tagged as \"monitored\":</p> <pre><code>GET /api/dcim/devices/?tag=monitored\n</code></pre> <p>The <code>tag</code> filter can be specified multiple times to match only objects which have all the specified tags assigned:</p> <pre><code>GET /api/dcim/devices/?tag=monitored&amp;tag=deprecated\n</code></pre>"},{"location":"features/customization/#custom-fields","title":"Custom Fields","text":"<p>While NetBox provides a rather extensive data model out of the box, the need may arise to store certain additional data associated with NetBox objects. For example, you might need to record the invoice ID alongside an installed device, or record an approving authority when creating a new IP prefix. NetBox administrators can create custom fields on built-in objects to meet these needs.</p> <p>NetBox supports many types of custom field, from basic data types like strings and integers, to complex structures like selection lists or raw JSON. It's even possible to add a custom field which references other NetBox objects. Custom field data is stored directly alongside the object to which it is applied in the database, which ensures minimal performance impact. And custom field data can be written and read via the REST API, just like built-in fields.</p> <p>To learn more about this feature, check out the custom field documentation.</p>"},{"location":"features/customization/#custom-links","title":"Custom Links","text":"<p>Custom links allow you to conveniently reference external resources related to NetBox objects from within the NetBox UI. For example, you might wish to link each virtual machine modeled in NetBox to its corresponding view in some orchestration application. You can do this by creating a templatized custom link for the virtual machine model, specifying something like the following for the link URL:</p> <pre><code>http://server.local/vms/?name={{ object.name }}\n</code></pre> <p>Now, when viewing a virtual machine in NetBox, a user will see a handy button with the chosen title and link (complete with the name of the VM being viewed). Both the text and URL of custom links can be templatized in this manner, and custom links can be grouped together into dropdowns for more efficient display.</p> <p>To learn more about this feature, check out the custom link documentation.</p>"},{"location":"features/customization/#custom-validation","title":"Custom Validation","text":"<p>While NetBox employs robust built-in object validation to ensure the integrity of its database, you might wish to enforce additional rules governing the creation and modification of certain objects. For example, perhaps you require that every device defined in NetBox adheres to a particular naming scheme and includes an asset tag. You can configure a custom validation rule in NetBox to enforce these requirements for the device model:</p> <pre><code>CUSTOM_VALIDATORS = {\n    \"dcim.device\": [\n        {\n            \"name\": {\n                \"regex\": \"[a-z]+\\d{3}\"\n            },\n            \"asset_tag\": {\n                \"required\": True\n            }\n        }\n    ]\n}\n</code></pre> <p>To learn more about this feature, check out the custom validation documentation.</p>"},{"location":"features/customization/#export-templates","title":"Export Templates","text":"<p>Most NetBox objects can be exported in bulk in two built-in CSV formats: The current view (what the user currently sees in the objects list), or all available data. NetBox also provides the capability to define your own custom data export formats via export templates. An export template is essentially Jinja2 template code associated with a particular object type. From the objects list in the NetBox UI, a user can select any of the created export templates to export the objects according to the template logic.</p> <p>An export template doesn't have to render CSV data: Its output can be in any character-based format. For example, you might want to render data using tabs as delimiters, or even create DNS address records directly from the IP addresses list. Export templates are a great way to get the data you need in the format you need quickly.</p> <p>To learn more about this feature, check out the export template documentation.</p>"},{"location":"features/customization/#reports","title":"Reports","text":"<p>NetBox administrators can install custom Python scripts, known as reports, which run within NetBox and can be executed and analyzed within the NetBox UI. Reports are a great way to evaluate NetBox objects against a set of arbitrary rules. For example, you could write a report to check that every router has a loopback interface with an IP address assigned, or that every site has a minimum set of VLANs defined.</p> <p>When a report runs, its logs messages pertaining to the operations being performed, and will ultimately result in either a pass or fail. Reports can be executed via the UI, REST API, or CLI (as a management command). They can be run immediately or scheduled to run at a future time.</p> <p>To learn more about this feature, check out the documentation for reports.</p>"},{"location":"features/customization/#custom-scripts","title":"Custom Scripts","text":"<p>Custom scripts are similar to reports, but more powerful. A custom script can prompt the user for input via a form (or API data), and is built to do much more than just reporting. Custom scripts are generally used to automate tasks, such as the population of new objects in NetBox, or exchanging data with external systems. As with reports, they can be run via the UI, REST API, or CLI, and be scheduled to execute at a future time.</p> <p>The complete Python environment is available to a custom script, including all of NetBox's internal mechanisms: There are no artificial restrictions on what a script can do. As such, custom scripting is considered an advanced feature and requires sufficient familiarity with Python and NetBox's data model.</p> <p>To learn more about this feature, check out the documentation for custom scripts.</p>"},{"location":"features/devices-cabling/","title":"Cabeamento de Dispositivos","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>At its heart, NetBox is a tool for modeling your network infrastructure, and the device object is pivotal to that function. A device can be any piece of physical hardware installed within your network, such as server, router, or switch, and may optionally be mounted within a rack. Within each device, resources such as network interfaces and console ports are modeled as discrete components, which may optionally be grouped into modules.</p> <p>NetBox uses device types to represent unique real-world device models. This allows a user to define a device type and all its components once, and easily replicate an unlimited number of device instances from it.</p> <pre><code>flowchart TD\n    Manufacturer -.-&gt; Platform &amp; DeviceType &amp; ModuleType\n    Manufacturer --&gt; DeviceType &amp; ModuleType\n    DeviceRole &amp; Platform &amp; DeviceType --&gt; Device\n    Device &amp; ModuleType ---&gt; Module\n    Device &amp; Module --&gt; Interface &amp; ConsolePort &amp; PowerPort &amp; ...\n\nclick Device \"../../models/dcim/device/\"\nclick DeviceRole \"../../models/dcim/devicerole/\"\nclick DeviceType \"../../models/dcim/devicetype/\"\nclick Manufacturer \"../../models/dcim/manufacturer/\"\nclick Module \"../../models/dcim/module/\"\nclick ModuleType \"../../models/dcim/moduletype/\"\nclick Platform \"../../models/dcim/platform/\"</code></pre>"},{"location":"features/devices-cabling/#manufacturers","title":"Manufacturers","text":"<p>A manufacturer generally represents an organization which produces hardware devices. These can be defined by users, however they should represent an actual entity rather than some abstract idea.</p>"},{"location":"features/devices-cabling/#device-types","title":"Device Types","text":"<p>A device type represents a unique combination of manufacturer and hardware model which maps to discrete make and model of device which exists in the real world. Each device type typically has a number of components created on it, representing network interfaces, device bays, and so on. New devices of this type can then be created in NetBox, and any associated components will be automatically replicated from the device type. This avoids needing to tediously recreate components for each device as it is added in NetBox.</p> <p>The Device Type Library</p> <p>While users are always free to create their own device types in NetBox, many find it convenient to draw from our community library of pre-defined device types. This is possible because a particular make and model of device is applicable universally and never changes.</p> <p>All the following can be modeled as components:</p> <ul> <li>Interfaces</li> <li>Console ports</li> <li>Console server ports</li> <li>Power ports</li> <li>Power outlets</li> <li>Pass-through ports (front and rear)</li> <li>Module bays (which house modules)</li> <li>Device bays (which house child devices)</li> </ul> <p>For example, a Juniper EX4300-48T device type might have the following component templates defined:</p> <ul> <li>One template for a console port (\"Console\")</li> <li>Two templates for power ports (\"PSU0\" and \"PSU1\")</li> <li>48 templates for 1GE interfaces (\"ge-0/0/0\" through \"ge-0/0/47\")</li> <li>Four templates for 10GE interfaces (\"xe-0/2/0\" through \"xe-0/2/3\")</li> </ul> <p>Once component templates have been created, every new device that you create as an instance of this type will automatically be assigned each of the components listed above.</p> <p>Component Instantiation is not Retroactive</p> <p>The instantiation of components from a device type definition occurs only at the time of device creation. If you modify the components assigned to a device type, it will not affect devices which have already been created. This guards against any inadvertent changes to existing devices. However, you always have the option of adding, modifying, or deleting components on existing devices. (These changes can easily be applied to multiple devices at once using the bulk operations available in the UI.)</p>"},{"location":"features/devices-cabling/#devices","title":"Devices","text":"<p>Whereas a device type defines the make and model of a device, a device itself represents an actual piece of installed hardware somewhere in the real world. A device can be installed at a particular position within an equipment rack, or simply associated with a site (and optionally with a location within that site).</p> <p>Each device can have an operational status, functional role, and software platform assigned. Device components are instantiated automatically from the assigned device type upon creation.</p>"},{"location":"features/devices-cabling/#virtual-chassis","title":"Virtual Chassis","text":"<p>Sometimes it is necessary to model a set of physical devices as sharing a single management plane. Perhaps the most common example of such a scenario is stackable switches. These can be modeled as virtual chassis in NetBox, with one device acting as the chassis master and the rest as members. All components of member devices will appear on the master.</p>"},{"location":"features/devices-cabling/#virtual-device-contexts","title":"Virtual Device Contexts","text":"<p>A virtual device context (VDC) is a logical partition within a device. Each VDC operates autonomously but shares a common pool of resources. Each interface can be assigned to one or more VDCs on its device.</p>"},{"location":"features/devices-cabling/#module-types-modules","title":"Module Types &amp; Modules","text":"<p>Much like device types and devices, module types can instantiate discrete modules, which are hardware components installed within devices. Modules often have their own child components, which become available to the parent device. For example, when modeling a chassis-based switch with multiple line cards in NetBox, the chassis would be created (from a device type) as a device, and each of its line cards would be instantiated from a module type as a module installed in one of the device's module bays.</p> <p>Device Bays vs. Module Bays</p> <p>What's the difference between device bays and module bays? Device bays are appropriate when the installed hardware has its own management plane, isolated from the parent device. A common example is a blade server chassis in which the blades share power but operate independently. In contrast, a module bay holds a module which does not operate independently of its parent device, as with the chassis switch line card example mentioned above.</p> <p>One especially nice feature of modules is that templated components can be automatically renamed according to the module bay into which the parent module is installed. For example, if we create a module type with interfaces named <code>Gi{module}/0/1-48</code> and install a module of this type into module bay 7 of a device, NetBox will create interfaces named <code>Gi7/0/1-48</code>.</p>"},{"location":"features/devices-cabling/#cables","title":"Cables","text":"<p>NetBox models cables as connections among certain types of device components and other objects. Each cable can be assigned a type, color, length, and label. NetBox will enforce basic sanity checks to prevent invalid connections. (For example, a network interface cannot be connected to a power outlet.)</p> <p>Either end of a cable may terminate to multiple objects of the same type. For example, a network interface can be connected via a fiber optic cable to two discrete ports on a patch panel (each port attaching to an individual fiber strand in the patch cable).</p> <pre><code>flowchart LR\n    Interface --&gt; Cable\n    Cable --&gt; fp1[Front Port] &amp; fp2[Front Port]</code></pre>"},{"location":"features/facilities/","title":"Facilities (Instala\u00e7\u00f5es)","text":"<p>Desde regi\u00f5es globais at\u00e9 racks de equipamentos individuais, NetBox permite que voc\u00ea modele toda sua presen\u00e7a de rede. Isso \u00e9 feito atrav\u00e9s do uso de v\u00e1rios modelos constru\u00eddos com prop\u00f3sitos espec\u00edficos. O gr\u00e1fico abaixo ilustra os modelos e suas rela\u00e7\u00f5es.</p> <pre><code>flowchart TB\n    A[Region] --&gt; B[Site]\n    C[SiteGroup] --&gt; B\n    B --&gt; D[Rack]\n    B --&gt; E[Device]\n    B --&gt; F[Location]\n    F --&gt; D\n    F --&gt; E\n    D --&gt; H[RackRole]</code></pre>"},{"location":"features/facilities/#regioes-regions","title":"Regi\u00f5es (Regions)","text":"<p>Regi\u00f5es representam dom\u00ednios geogr\u00e1ficos no qual sua rede e seus clientes t\u00eam presen\u00e7a. S\u00e3o tipicamente utilizadas para modelar pa\u00edses, estados e cidades, embora o NetBox n\u00e3o prescreva qualquer uso e suas necessidades podem diferir do padr\u00e3o.</p> <p>Regi\u00f5es s\u00e3o aninhadas em si mesmas, ent\u00e3o voc\u00ea pode definir regi\u00f5es filhas que tenham uma regi\u00e3o pai, e regi\u00f5es netas que est\u00e3o dentro de regi\u00f5es filhas. Por exemplo, voc\u00ea pode criar uma hierarquia como: - Europa     - Fran\u00e7a     - Alemanha     - Espanha - Am\u00e9rica do Norte (parent/pai)     - Canad\u00e1 (filha/child)     - Estados Unidos         - Calif\u00f3rnia (neta/grandchildren)         - Nova Iorque         - Texas - Am\u00e9rica do Sul     - Brasil     - Argentina     - Paraguai</p> <p>Regi\u00f5es sempre ser\u00e3o listados alfabeticamente pelo nome dentro de cada pai, e n\u00e3o h\u00e1 \"profundidade\" (depth) para a hierarquia.</p>"},{"location":"features/facilities/#grupos-de-sitelocais-site-groups","title":"Grupos de Site/Locais (Site Groups)","text":"<p>Como as regi\u00f5es, grupos de sites podem ser arranjados em uma hierarquia recursiva para agrupar sites/locais. No entanto, enquanto que regi\u00f5es t\u00eam a inten\u00e7\u00e3o de ser uma organiza\u00e7\u00e3o geogr\u00e1fica, grupos de sites podem ser usados para agrupamentos funcionais. Por exemplo, voc\u00ea pode classificar sites como uma corpora\u00e7\u00e3o, filial, ou um local do cliente em adi\u00e7\u00e3o aonde ele est\u00e1 fisicamente localizado.</p> <p>O uso de ambas regi\u00f5es e grupos de sites permitem independentes, mas complementares dimens\u00f5es atrav\u00e9s do qual sites/locais podem ser organizados.</p>"},{"location":"features/facilities/#locais-sites","title":"Locais (Sites)","text":"<p>Um local tipicamente representa um br\u00e9dio dentro de uma regi\u00e3o e/ou grupo de site (site group). Cada local (site) \u00e9 atrelado um estado operacional (status) como active (active) ou planejado (planned) e podem ter um endere\u00e7o de entrega e cordenadas de GPS atribu\u00eddas ao local.</p>"},{"location":"features/facilities/#localizacao-lugar-locations","title":"Localiza\u00e7\u00e3o / Lugar (Locations)","text":"<p>Uma localiza\u00e7\u00e3o pode ser qualquer sub-divis\u00e3o l\u00f3gica dentro de um pr\u00e9dio, como um andar ou uma sala. Como regi\u00f5es e grupos de site, localiza\u00e7\u00f5es podem ser aninhadas em hierarquias aninhadas com flexibilidade m\u00e1xima. E como sites, cada localiza\u00e7\u00e3o tem um estado operacional (status) atrelados a isso.</p>"},{"location":"features/facilities/#racks","title":"Racks","text":"<p>Finalmente, o NetBox modela cada equipamento de rack como um objeto dentro de um site ou localiza\u00e7\u00e3o. Esses s\u00e3o objetos f\u00edsicos nos quais os dispositivos s\u00e3o instalados. Cada rack pode ser atribu\u00eddo a um estado operacional, tipo, ID de instala\u00e7\u00e3o e outros atributos relacionados ao rastreamento de invet\u00e1rio. Cada rack tamb\u00e9m deve definir uma alta (em unidades de rack - U) e largura e podem, opcionalmente, especificar as dimens\u00f5es f\u00edsicas.</p> <p>Cada rack pode ser associado em um site (local), mas essa associa\u00e7\u00e3o em uma localiza\u00e7\u00e3o (location) dentro de um site \u00e9 opcional. Usu\u00e1rios tamb\u00e9m podem criar pap\u00e9is customizados aos quais os racks podem ser relacionados. NetBox suporta rastreamento do espa\u00e7o de um rack com unidades parciais, podendo ser criado um rack de tamanho 2.5.</p> <p>Tip</p> <p>Voc\u00ea vai notar no diagrama acima que um dispositivo pode ser instalado dentro de um site, localiza\u00e7\u00e3o ou rack. Essa abordagem permite uma flexibilidade enorme, como nem todos os sites precisam definir uma localiza\u00e7\u00e3o filha e nem todos os dispositivos est\u00e3o dentro de um rack.</p>"},{"location":"features/ipam/","title":"IPAM (Endere\u00e7amento IP)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>IP address management (IPAM) is one of NetBox's core features. It supports full parity for IP4 and IPv6, advanced VRF assignment, automatic hierarchy formation, and much more.</p>"},{"location":"features/ipam/#ip-hierarchy","title":"IP Hierarchy","text":"<p>NetBox employs several object types to represent a hierarchy of IP resources:</p> <ul> <li>Aggregate - A prefix which represents the root of an addressing hierarchy. This is typically a large swath of public or private address space allocated for use by your organization. Each aggregate is assigned to an authoritative RIR.</li> <li>Prefix - A subnet defined within an aggregate. Prefixes extend the hierarchy by nesting within one another. (For example, 192.168.123.0/24 will appear within 192.168.0.0/16.) Each prefix can be assigned a functional role as well as an operational status.</li> <li>IP Range - An arbitrary range of individual IP addresses within a prefix, all sharing the same mask. Ranges are commonly affiliated with DHCP scopes, but can be used for any similar purpose.</li> <li>IP Address - An individual IP address along with its subnet mask, automatically arranged beneath its parent prefix.</li> </ul> <pre><code>flowchart TD\n    RIR --&gt; Aggregate\n    Aggregate &amp; Role --&gt; Prefix\n    Prefix --&gt; Prefix\n    Prefix --&gt; IPRange &amp; IPAddress\n\nclick Aggregate \"../../models/ipam/aggregate/\"\nclick IPAddress \"../../models/ipam/ipaddress/\"\nclick IPRange \"../../models/ipam/iprange/\"\nclick Prefix \"../../models/ipam/prefix/\"\nclick RIR \"../../models/ipam/rir/\"\nclick Role \"../../models/ipam/role/\"</code></pre> <p>Automatic Hierarchies</p> <p>IP objects in NetBox never need to be manually assigned to the parent objects. The construction of hierarchies is handled automatically by the application according to the inherent rules of IP addressing.</p> <p>An example hierarchy might look like this:</p> <ul> <li>100.64.0.0/10 (aggregate)<ul> <li>100.64.0.0/20 (prefix)</li> <li>100.64.16.0/20 (prefix)<ul> <li>100.64.16.0/24 (prefix)<ul> <li>100.64.16.1/24 (address)</li> <li>100.64.16.2/24 (address)</li> <li>100.64.16.3/24 (address)</li> </ul> </li> <li>100.64.16.9/24 (prefix)</li> </ul> </li> <li>100.64.32.0/20 (prefix)<ul> <li>100.64.32.1/24 (address)</li> <li>100.64.32.10-99/24 (range)</li> </ul> </li> </ul> </li> </ul>"},{"location":"features/ipam/#utilization-stats","title":"Utilization Stats","text":"<p>The utilization rate for each prefix is calculated automatically depending on its status. Container prefixes are those which house child prefixes; their utilization rate is determined based on how much of their available IP space is consumed by child prefixes. The utilization rate for any other type of prefix is determined by the aggregate usage of any child IP addresses and/or ranges defined.</p> <p>Similarly, utilization rates for aggregates is determined based on the space consumed by their child prefixes.</p>"},{"location":"features/ipam/#vrf-tracking","title":"VRF Tracking","text":"<p>NetBox supports the modeling of discrete virtual routing and forwarding (VRF) instances to represent multiple routing tables, including those with overlapping address space. Each type of IP object within an aggregate - prefix, IP range, and IP address - can be assigned to a particular VRF. Consequently, each VRF maintains its own isolated IP hierarchy. This makes it very easy to track overlapping IP space.</p> <p>VRF modeling in NetBox very closely follows what you find in real-world network configurations, with each VRF assigned a standards-compliant route distinguisher. You can even create route targets to manage the import and export of routing information among VRFs.</p> <p>Enforcing Unique IP Space</p> <p>Each VRF can be independently configured to permit or prohibit duplicate IP objects. For example, a VRF which has been configured to enforce unique IP space will not allow the creation of two 192.0.2.0/24 prefixes. The ability to toggle this restriction per VRF affords the user maximum flexibility in modeling their IP space.</p>"},{"location":"features/ipam/#as-numbers","title":"AS Numbers","text":"<p>An often overlooked component of IPAM, NetBox also tracks autonomous system (AS) numbers and their assignment to sites. Both 16- and 32-bit AS numbers are supported, and like aggregates each ASN is assigned to an authoritative RIR.</p>"},{"location":"features/ipam/#service-mapping","title":"Service Mapping","text":"<p>NetBox models network applications as discrete service objects associated with devices and/or virtual machines, and optionally with specific IP addresses attached to those parent objects. These can be used to catalog the applications running on your network for reference by other objects or integrated tools.</p> <p>To model services in NetBox, begin by creating a service template defining the name, protocol, and port number(s) on which the service listens. This template can then be easily instantiated to \"attach\" new services to a device or virtual machine. It's also possible to create new services by hand, without a template, however this approach can be tedious.</p>"},{"location":"features/journaling/","title":"Journaling","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>All primary and organizational models in NetBox support journaling. A journal is a collection of human-generated notes and comments about an object maintained for historical context. It supplements NetBox's change log to provide additional information about why changes have been made or to convey events which occur outside NetBox. Unlike the change log, in which records typically expire after a configurable period of time, journal entries persist for the life of their associated object.</p> <p>Each journal entry has a selectable kind (info, success, warning, or danger) and a user-populated <code>comments</code> field. Each entry automatically records the date, time, and associated user upon being created.</p>"},{"location":"features/l2vpn-overlay/","title":"L2VPN &amp; Overlay","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>L2VPN and overlay networks, such as VXLAN and EVPN, can be defined in NetBox and tied to interfaces and VLANs. This allows for easy tracking of overlay assets and their relationships with underlay resources.</p> <p>Each L2VPN instance has a type and optional unique identifier. Like VRFs, L2VPNs can also have import and export route targets assigned to them. Terminations can then be created to assign VLANs and/or device and virtual machine interfaces to the overlay.</p>"},{"location":"features/power-tracking/","title":"Rastreamento de Energia","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>As part of its DCIM feature set, NetBox supports modeling facility power as discrete power panels and feeds. These are most commonly used to document power distribution within a data center, but can serve more traditional environments as well.</p> <p></p>"},{"location":"features/power-tracking/#power-panels","title":"Power Panels","text":"<p>A power panel is the furthest upstream power element modeled in NetBox. It typically represents a power distribution panel (or breaker panel) where facility power is split into multiple discrete circuits, which are modeled as feeds.</p> <p>Each power panel is associated with a site, and may optionally be associated with a particular location within that site. There is no limit to how many power feeds a single panel can supply, however both of these object types should map to real-world objects.</p>"},{"location":"features/power-tracking/#power-feeds","title":"Power Feeds","text":"<p>A power feed represents a discrete power circuit originating from an upstream power panel. Each power feed can be assigned a name, operational status, and various electrical characteristics such as supply (AC or DC), voltage, amperage, and so on.</p> <p>A device power port can be connected to a power feed via a cable. Only one port can be connected to a feed: Where multiple devices draw power from the same feed, a power distribution unit (PDU) must be modeled as an individual device mapping a power port to multiple power outlets to which the downstream devices can connect (as in the example above).</p> <p>Primary and Redundant Power</p> <p>Each power feed in NetBox is assigned a type: primary or redundant. This allows easily modeling redundant power distribution topologies. In scenarios involving only a single, non-redundant power supply, mark all power feeds as primary.</p>"},{"location":"features/search/","title":"Pesquisa (Search)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"features/search/#global-search","title":"Global Search","text":"<p>NetBox includes a powerful global search engine, providing a single convenient interface to search across its complex data model. Relevant fields on each model are indexed according to their precedence, so that the most relevant results are returned first. When objects are created or modified, the search index is updated immediately, ensuring real-time accuracy.</p> <p>When entering a search query, the user can choose a specific lookup type: exact match, partial match, etc. When a partial match is found, the matching portion of the applicable field value is included with each result so that the user can easily determine its relevance.</p> <p>Custom fields defined by NetBox administrators are also included in search results if configured with a search weight. Additionally, NetBox plugins can register their own custom models for inclusion alongside core models.</p>"},{"location":"features/search/#saved-filters","title":"Saved Filters","text":"<p>Each type of object in NetBox is accompanied by an extensive set of filters, each tied to a specific attribute, which enable the creation of complex queries. Often you'll find that certain queries are used routinely to apply some set of prescribed conditions to a query. Once a set of filters has been applied, NetBox offers the option to save it for future use.</p> <p>For example, suppose you often need to locate all planned devices of a certain type within a region. The applicable filters can be applied and then saved as custom named filter for reuse, such that</p> <pre><code>?status=planned&amp;device_type_id=78&amp;region_id=12\n</code></pre> <p>becomes</p> <pre><code>?filter=my-custom-filter\n</code></pre> <p>These saved filters can be used both within the UI and for API queries.</p>"},{"location":"features/tenancy/","title":"Loca\u00e7\u00e3o (Tenancy)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Most core objects within NetBox's data model support tenancy. This is the association of an object with a particular tenant to convey ownership or dependency. For example, an enterprise might represent its internal business units as tenants, whereas a managed services provider might create a tenant in NetBox to represent each of its customers.</p> <pre><code>flowchart TD\n    TenantGroup --&gt; TenantGroup &amp; Tenant\n    Tenant --&gt; Site &amp; Device &amp; Prefix &amp; Circuit &amp; ...\n\nclick Tenant \"../../models/tenancy/tenant/\"\nclick TenantGroup \"../../models/tenancy/tenantgroup/\"</code></pre>"},{"location":"features/tenancy/#tenant-groups","title":"Tenant Groups","text":"<p>Tenants can be grouped by any logic that your use case demands, and groups can be nested recursively for maximum flexibility. For example, You might define a parent \"Customers\" group with child groups \"Current\" and \"Past\" within it. A tenant can be assigned to a group at any level within the hierarchy.</p>"},{"location":"features/tenancy/#tenants","title":"Tenants","text":"<p>Typically, the tenant model is used to represent a customer or internal organization, however it can be used for whatever purpose meets your needs.</p> <p>Most core objects within NetBox can be assigned to particular tenant, so this model provides a very convenient way to correlate ownership across object types. For example, each of your customers might have its own racks, devices, IP addresses, circuits and so on: These can all be easily tracked via tenant assignment.</p> <p>The following objects can be assigned to tenants:</p> <ul> <li>Sites</li> <li>Racks</li> <li>Rack reservations</li> <li>Devices</li> <li>VRFs</li> <li>Prefixes</li> <li>IP addresses</li> <li>VLANs</li> <li>Circuits</li> <li>Clusters</li> <li>Virtual machines</li> </ul> <p>Tenant assignment is used to signify the ownership of an object in NetBox. As such, each object may only be owned by a single tenant. For example, if you have a firewall dedicated to a particular customer, you would assign it to the tenant which represents that customer. However, if the firewall serves multiple customers, it doesn't belong to any particular customer, so tenant assignment would not be appropriate.</p>"},{"location":"features/virtualization/","title":"Virtualiza\u00e7\u00e3o (Virtualization)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Virtual machines and clusters can be modeled in NetBox alongside physical infrastructure. IP addresses and other resources are assigned to these objects just like physical objects, providing a seamless integration between physical and virtual networks.</p> <pre><code>flowchart TD\n    ClusterGroup &amp; ClusterType --&gt; Cluster\n    Cluster --&gt; VirtualMachine\n    Platform --&gt; VirtualMachine\n    VirtualMachine --&gt; VMInterface\n\nclick Cluster \"../../models/virtualization/cluster/\"\nclick ClusterGroup \"../../models/virtualization/clustergroup/\"\nclick ClusterType \"../../models/virtualization/clustertype/\"\nclick Platform \"../../models/dcim/platform/\"\nclick VirtualMachine \"../../models/virtualization/virtualmachine/\"\nclick VMInterface \"../../models/virtualization/vminterface/\"</code></pre>"},{"location":"features/virtualization/#clusters","title":"Clusters","text":"<p>A cluster is one or more physical host devices on which virtual machines can run. Each cluster must have a type and operational status, and may be assigned to a group. (Both types and groups are user-defined.) Each cluster may designate one or more devices as hosts, however this is optional.</p>"},{"location":"features/virtualization/#virtual-machines","title":"Virtual Machines","text":"<p>A virtual machine is a virtualized compute instance. These behave in NetBox very similarly to device objects, but without any physical attributes. For example, a VM may have interfaces assigned to it with IP addresses and VLANs, however its interfaces cannot be connected via cables (because they are virtual). Each VM may also define its compute, memory, and storage resources as well.</p>"},{"location":"features/vlan-management/","title":"Gerenciamento de VLANs","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Complementing its IPAM capabilities, NetBox also tracks VLAN information to assist with layer two network configurations. VLANs are defined per IEEE 802.1Q and related standards, and can be assigned to groups and functional roles.</p> <pre><code>flowchart TD\n    VLANGroup &amp; Role --&gt; VLAN\n\nclick Role \"../../models/ipam/role/\"\nclick VLAN \"../../models/ipam/vlan/\"\nclick VLANGroup \"../../models/ipam/vlangroup/\"</code></pre>"},{"location":"features/vlan-management/#vlan-groups","title":"VLAN Groups","text":"<p>A VLAN group is a collection of VLANs defined within a particular scope. Each VLAN group can be associated with a particular site, location, rack, or similar object to indicate its domain, and designates a minimum and maximum VLAN ID within the group. (By default, these are the standard minimum and maximum values of 1 and 4094, respectively.)</p> <p>Within a group, each VLAN must have a unique ID and name. There is no limit to how many groups can be created per scope.</p>"},{"location":"features/vlan-management/#vlans","title":"VLANs","text":"<p>NetBox models VLANs according to their definition under IEEE 802.1Q, with a 12-bit VLAN ID and a name. Each VLAN also has an operational status, and may be assigned a function role, just like prefixes. Each VLAN can be assigned to a VLAN group or site to convey the domain in which the VLAN exists.</p> <p>Once defined, VLANs can be associated with device and virtual machine interfaces. Each interface can be assigned an 802.1Q mode (access or tagged), and the relevant VLANs can be applied as tagged or untagged.</p>"},{"location":"features/wireless/","title":"Wireless (Wi-Fi)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Just as NetBox provides robust modeling for physical cable plants, it also supports modeling wireless LANs and point-to-point links.</p>"},{"location":"features/wireless/#wireless-lans","title":"Wireless LANs","text":"<pre><code>flowchart TD\n    WirelessLANGroup --&gt; WirelessLANGroup &amp; WirelessLAN\n\nclick WirelessLAN \"../../models/wireless/wirelesslan/\"\nclick WirelessLANGroup \"../../models/wireless/wirelesslangroup/\"</code></pre> <p>A wireless LAN is a multi-access network shared by multiple wireless clients, identified by a common service set identifier (SSID) and authentication parameters. Wireless LANs can be organized into self-nesting groups, and each wireless LAN may optionally be bound to a particular VLAN. This allows easily mapping wireless networks to their wired counterparts.</p> <p>Authentication attributes for wireless LANs include:</p> <ul> <li>Type - Open, WEP, WPA, etc.</li> <li>Cipher - Auto, TKIP, or AES</li> <li>Pre-shared key (PSK) - The secret key configured on all participating clients</li> </ul> <p>The definition of authentication parameters is optional.</p>"},{"location":"features/wireless/#wireless-links","title":"Wireless Links","text":"<p>Whereas a wireless LAN represents a physical multi-access segment with any number of clients, a wireless link is a point-to-point connection between exactly two stations. These links behave much like cables, but more accurately model the nature of wireless communications.</p> <p>Like wireless LANs, wireless links also have an SSID and (optional) authentication attributes.</p>"},{"location":"getting-started/planning/","title":"Planejamento seus Passos","text":"<p>Esse guia resume os passos necess\u00e1rios para fazer o planejamento de migra\u00e7\u00e3o para o NetBox. Embora \u00e9 feito sobre o contexto de uma instala\u00e7\u00e3o nova, a abordagem geral esbo\u00e7ada aqui funciona normalmente para a adi\u00e7\u00e3o de novos dados ao deploy (instala\u00e7\u00e3o) existente do NetBox.</p>"},{"location":"getting-started/planning/#identifique-as-atuais-fontes-de-verdade-current-source-of-truth","title":"Identifique as Atuais Fontes de Verdade (Current Source of Truth)","text":"<p>Antes de come\u00e7ar o uso do NetBox para os seus pr\u00f3prios dados, \u00e9 crucial primeiro entender onde est\u00e3o as fontes de verdade (dados) existentes. Uma \"fonte de verdade\" (source of truth) \u00e9 justamente qualquer reposit\u00f3rio de dados que \u00e9 autoridade para aquele dom\u00ednio espec\u00edfico. Por exemplo, voc\u00ea pode ter uma planilha que mapeia todos os endere\u00e7os IP em uso na sua rede. Enquanto todo mundo concordar que essa planilha \u00e9 autoritativa para a rede inteira, isso se torna a fonte de verdade (source of truth) para os prefixos de IP de sua rede.</p> <p>Qualquer coisa pode ser a fonte de verdade (source of truth), se estas duas condi\u00e7\u00f5es existirem:</p> <ol> <li>Existe um acordo entre todos os participantes relevantes que essa fonte de verdade est\u00e1 correta.</li> <li>O dom\u00ednio que ela est\u00e1 aplica \u00e9 definido.</li> </ol> <p>Dedique algum tempo para mapear todas as suas fontes de verdades atuais de sua infraestrutura. Na entativa de catalogar e categorizar essas fontes de verdade, voc\u00ea provavelmente ter\u00e1 alguns desafios, como:</p> <ul> <li>M\u00faltiplas fontes conflitantes para um dom\u00ednio espec\u00edfico. Por exemplo, devem existir m\u00faltiplas vers\u00f5es de sua planilha circulando entre as pessoas, odne cada uma tem um grupo de dados conflitantes, provavelmente.</li> <li>Fontes com dom\u00ednios espec\u00edficos. Voc\u00ea pode encontrar um time diferente dentro de sua organiza\u00e7\u00e3o que utiliza ferramentas para o mesmo prop\u00f3sito, com uma defini\u00e7\u00e3o de quando deve ser utilizada.</li> <li>Formatos de dados inacess\u00edveis. Algumas ferramentas servem melhor para um uso program\u00e1tico que outras. Por exemplo, planilhas s\u00e3o normalmente f\u00e1cies de fazer o \"parse\" e exportar, no enquanto p\u00e1ginas em wikis ou aplica\u00e7\u00f5es similares s\u00e3o normalmente dif\u00edceis de \"consumir\".</li> <li>N\u00e3o h\u00e1 nenhuma fonte de verdade. \u00c0s vezes voc\u00ea ir\u00e1 encontrar uam fonte de verdade que simplesmente n\u00e3o existe para um dom\u00ednio espec\u00edfico. Por exemplo, ao configurar endere\u00e7os IP, operadores podem apenas presumir que existe um IP dispon\u00edvel de certa subrede sem nunca registrar o uso deste mesmo endere\u00e7o IP.</li> </ul> <p>Veja se voc\u00ea consegue identificar cada dom\u00ednio de dados da infraestrutura da sua organiza\u00e7\u00e3o, e a fonte de verdade de cada. Uma vez que voc\u00ea tenha juntado isso, voc\u00ea precisar\u00e1 detarminar quais dados pertencem ao NetBox.</p>"},{"location":"getting-started/planning/#determine-os-dados-para-migrar","title":"Determine os Dados para Migrar","text":"<p>Como regra geral, para determinar os dados que ser\u00e3o movidos para o NetBox baseiam-se em: se existe um modelo (model) para isso, esse dado pertence ao NetBox. Por exemplo, o NetBox tem modelos relacionados a racks, dispositivos (devices), cabos, prefixos IP, VLANs e por a\u00ed vai. Eles t\u00eam o uso bem \"direto\". No entanto, voc\u00ea inveitavelmente ir\u00e1 chegar nos limites do modelo de dados do NetBox e questionar quais dados adicionais podem fazer sentido registrar no NetBox. Por exemplo, voc\u00ea pode querer que o NetBox sirva como fonte de verdade para registros DNS e servidores DHCP, ainda que n\u00e3o necessariamente esteja no escopo nativo do projeto.</p> <p>O NetBox fornece dois mecanismos para extender seu modelo de dados (data model). O primeiro \u00e9 os campos customizados (custom fields): A maioria dos modelos suportam campos de dados adicionais para armazenar informa\u00e7\u00f5es adicionais aos campos nativos. Por exemplo, voc\u00ea pode querer adicionar um campo de \"inventory ID\" (ID do invent\u00e1ri) para o modelo do dispositivo (device model).</p> <p>Dito isso, n\u00e3o faz sentido migrar todos os dom\u00ednios de dados par ao NetBox. Por exemplo, muitas organiza\u00e7\u00f5es optam por usar somente os componentes IPAM ou somente os componentes DCIM do NetBox, e integrar as outras fontes de verdade de diferentes dom\u00ednios. Isso \u00e9 uma abordagem muito v\u00e1lida (desde que todos os envolvidos concordem quais ferramentas s\u00e3o autoritativas (possuem autoridade) para cada dom\u00ednio de dados.). Por fim, voc\u00ea ir\u00e1 precisar pesar o valor de ter modelos de dados n\u00e3o nativos no NetBox contra o esfor\u00e7o necess\u00e1rio para definir e manter esses modelos.</p> <p>Considere que o NetBox est\u00e1 sob constante desenvolvimento. Embora a vers\u00e3o atual possa n\u00e3o suportar um tipo particular de objeto, existem planos para adicionar suporte a isso em vers\u00f5es futuras. (E mesmo que n\u00e3o haja, considere criar uma requisi\u00e7\u00e3o de fun\u00e7\u00e3o/caracter\u00edstica (feature request) citando o seu caso de uso, em particular).</p>"},{"location":"getting-started/planning/#validando-dados-externos","title":"Validando Dados Externos","text":"<p>O \u00faltimo passo antes de migrar os dados para o NetBox \u00e9 a valida\u00e7\u00e3o mais crucial. O princ\u00edpio GIGO (garbage in, garbage out) est\u00e1 no seu efeito m\u00e1ximo: A sua foonte de verdade \u00e9 t\u00e3o boa quanto os dados que ela armazena. Enquanto que o NetBox \u00e9 uma ferramenta de valida\u00e7\u00e3o de dados poderosa (incluindo o suporte de regras de valida\u00e7\u00e3o customizada), oque ir\u00e1 decidir seu poder \u00e9 o operador humano adicionando e dando a manuten\u00e7\u00e3o correta aos dados. Por exemplo, o NetBox pode validar a conex\u00e3o de cabo entre duas interfaces, mas n\u00e3o pode dizer se o cabo deveria ou n\u00e3o existir.</p> <p>Aqui est\u00e1 algumas dicas para ajudar na garantia que somente dados v\u00e1lidos ser\u00e3o importados ao NetBox:</p> <ul> <li>Garanta que voc\u00ea est\u00e1 come\u00e7ando com um dado completo e bem formatado. JSON ou CSV s\u00e3o altamente recomendados para uma melhor portabilidade.</li> <li>Considere definir regras de valida\u00e7\u00e3o customizados dentro do NetBox antes de realizara importa\u00e7\u00e3o. (Por exemplo, formar o esquema de nomes dos dispositivos.)</li> <li>Utilize scripts customizados para auomaticamente popular dados padronizados. (Por exemplo, para automaticamente criar um grupo de VLANs padr\u00f5es pada cada site.)</li> </ul> <p>H\u00e1 v\u00e1rios m\u00e9todos dispon\u00edveis para a importa\u00e7\u00e3o de dados no NetBox, os quais n\u00f3s iremos cobrir na pr\u00f3xima se\u00e7\u00e3o. There are several methods available to import data into NetBox, which we'll cover in the next section.</p>"},{"location":"getting-started/planning/#ordem-das-operacoes","title":"Ordem das Opera\u00e7\u00f5es","text":"<p>Ao come\u00e7ar com um banco de dados limpo, pode n\u00e3o ser claro logo de in\u00edcio por onde come\u00e7ar. Muitos modelos dentro do NetBox dependem da cria\u00e7\u00e3o de outros tipos. Por exemplo, voc\u00ea n\u00e3o pode criar um tipo de dispositivo (device type) at\u00e9 que tenha criado seu fabricante (manufacturer).</p> <p>Abaixo est\u00e1 a ordem recomendada pela qual os objetos do NetBox devem ser criados ou importados. Enquanto que n\u00e3o \u00e9 necess\u00e1rio seguir essa lista na ordem exata, fazer desta maneira ir\u00e1 ajudar a ter um trabalho flu\u00eddo. </p> <ol> <li>Grupos de Loca\u00e7\u00e3o (Tenant Groups) e Locat\u00e1rios (Tenants)</li> <li>Regi\u00f5es, Grupos de Locais (Site Groups), Locais (Sites) e Localiza\u00e7\u00f5es (Locations)</li> <li>Fun\u00e7\u00f5es de cada Rack (Rack Roles) e Racks em si</li> <li>Fabricantes (Manufacturers), Tipos de Dispositivos (Device Types), Tipos de M\u00f3dulos (Module Types)</li> <li>Plataformas (Sistemas), Fun\u00e7\u00f5es do Dispositivo (Device Roles)</li> <li>Dispositivos e M\u00f3dulos</li> <li>Fornecedores (Provider) e Redes de Fornecedor </li> <li>Tipos de Circuitos e Circuitos</li> <li>Grupos de Wireless LAN (WiFi) e Wireless</li> <li>Route targets &amp; VRFs</li> <li>RIRs e Agregados (aggregates)</li> <li>Fun\u00e7\u00f5es de cada IP/VLAN</li> <li>Prefixos, Ranges de IP e endere\u00e7os IP</li> <li>Grupos de VLAN &amp; VLANs</li> <li>Tipos de Clusters, Grupos de Cluster e Clusters</li> <li>M\u00e1quinas Virtuais (Virtual Machines) e interfaces de VMs</li> </ol> <p>Isso n\u00e3o \u00e9 uma lista que inclui tudo, mas deve ser suficiente para iniciar a importa\u00e7\u00e3o de dados. Al\u00e9m disso, a ordem pela qual os objetos s\u00e3o adicionados n\u00e3o tem qualquer impacto.</p> <p>Os gr\u00e1ficos abaixo ilustram algumas das depend\u00eancias principais entre os diferentes modelos do NetBox, para refer\u00eancia.</p> <p>!!! note Modelos Auto-Aninhados (Self-Nesting)</p> <pre><code>Cada modelo no gr\u00e1fico abaixo que mostra uma flecha em looping apontando para si mesmo pode ser aninhado em uma hierarquia recursiva. Por exemplo, voc\u00ea pode ter regi\u00f5es que representam tanto pa\u00edses, quanto cidades, que posteriormente pode ser uma aninhada (atrelada) \u00e0 outra.\n</code></pre>"},{"location":"getting-started/planning/#tenancy-locacao","title":"Tenancy (Loca\u00e7\u00e3o)","text":"<pre><code>flowchart TD\n    TenantGroup --&gt; TenantGroup &amp; Tenant\n    Tenant --&gt; Site &amp; Device &amp; Prefix &amp; VLAN &amp; ...\n\nclick Device \"../../models/dcim/device/\"\nclick Prefix \"../../models/ipam/prefix/\"\nclick Site \"../../models/dcim/site/\"\nclick Tenant \"../../models/tenancy/tenant/\"\nclick TenantGroup \"../../models/tenancy/tenantgroup/\"\nclick VLAN \"../../models/ipam/vlan/\"</code></pre>"},{"location":"getting-started/planning/#locais-sites-racks-dispositivos-racks","title":"Locais (Sites) &amp; Racks &amp; Dispositivos (Racks)","text":"<pre><code>flowchart TD\n    Region --&gt; Region\n    SiteGroup --&gt; SiteGroup\n    DeviceRole &amp; Platform --&gt; Device\n    Region &amp; SiteGroup --&gt; Site\n    Site --&gt; Location &amp; Device\n    Location --&gt; Location\n    Location --&gt; Rack &amp; Device\n    Rack --&gt; Device\n    Manufacturer --&gt; DeviceType &amp; ModuleType\n    DeviceType  --&gt; Device\n    Device &amp; ModuleType ---&gt; Module\n    Device &amp; Module --&gt; Interface\n\nclick Device \"../../models/dcim/device/\"\nclick DeviceRole \"../../models/dcim/devicerole/\"\nclick DeviceType \"../../models/dcim/devicetype/\"\nclick Interface \"../../models/dcim/interface/\"\nclick Location \"../../models/dcim/location/\"\nclick Manufacturer \"../../models/dcim/manufacturer/\"\nclick Module \"../../models/dcim/module/\"\nclick ModuleType \"../../models/dcim/moduletype/\"\nclick Platform \"../../models/dcim/platform/\"\nclick Rack \"../../models/dcim/rack/\"\nclick RackRole \"../../models/dcim/rackrole/\"\nclick Region \"../../models/dcim/region/\"\nclick Site \"../../models/dcim/site/\"\nclick SiteGroup \"../../models/dcim/sitegroup/\"</code></pre>"},{"location":"getting-started/planning/#vrfs-prefixos-ip-addresses-and-vlans","title":"VRFs, Prefixos, IP Addresses, and VLANs","text":"<pre><code>flowchart TD\n    VLANGroup --&gt; VLAN\n    Role --&gt; VLAN &amp; IPRange &amp; Prefix\n    RIR --&gt; Aggregate\n    RouteTarget --&gt; VRF\n    Aggregate &amp; VRF --&gt; Prefix\n    VRF --&gt; IPRange &amp; IPAddress\n    Prefix --&gt; VLAN &amp; IPRange &amp; IPAddress\n\nclick Aggregate \"../../models/ipam/aggregate/\"\nclick IPAddress \"../../models/ipam/ipaddress/\"\nclick IPRange \"../../models/ipam/iprange/\"\nclick Prefix \"../../models/ipam/prefix/\"\nclick RIR \"../../models/ipam/rir/\"\nclick Role \"../../models/ipam/role/\"\nclick VLAN \"../../models/ipam/vlan/\"\nclick VLANGroup \"../../models/ipam/vlangroup/\"\nclick VRF \"../../models/ipam/vrf/\"</code></pre>"},{"location":"getting-started/planning/#circuitos","title":"Circuitos","text":"<pre><code>flowchart TD\n    Provider &amp; CircuitType --&gt; Circuit\n    Provider --&gt; ProviderNetwork\n    Circuit --&gt; CircuitTermination\n\nclick Circuit \"../../models/circuits/circuit/\"\nclick CircuitTermination \"../../models/circuits/circuittermination/\"\nclick CircuitType \"../../models/circuits/circuittype/\"\nclick Provider \"../../models/circuits/provider/\"\nclick ProviderNetwork \"../../models/circuits/providernetwork/\"</code></pre>"},{"location":"getting-started/planning/#clusters-maquinas-virtuais","title":"Clusters &amp; M\u00e1quinas Virtuais","text":"<pre><code>flowchart TD\n    ClusterGroup &amp; ClusterType --&gt; Cluster\n    Cluster --&gt; VirtualMachine\n    Site --&gt; Cluster &amp; VirtualMachine\n    Device &amp; Platform --&gt; VirtualMachine\n    VirtualMachine --&gt; VMInterface\n\nclick Cluster \"../../models/virtualization/cluster/\"\nclick ClusterGroup \"../../models/virtualization/clustergroup/\"\nclick ClusterType \"../../models/virtualization/clustertype/\"\nclick Device \"../../models/dcim/device/\"\nclick Platform \"../../models/dcim/platform/\"\nclick VirtualMachine \"../../models/virtualization/virtualmachine/\"\nclick VMInterface \"../../models/virtualization/vminterface/\"</code></pre>"},{"location":"getting-started/populating-data/","title":"Populando NetBox com Dados","text":"<p>Essa p\u00e1gina cobre os mecanismos que est\u00e3o dispon\u00edveis para popular os dados dentro do NetBox.</p>"},{"location":"getting-started/populating-data/#criacao-de-objeto-manual","title":"Cria\u00e7\u00e3o de Objeto Manual","text":"<p>A forma mais simples e direta de popular dados dentro do NetBox \u00e9 utilizar a cria\u00e7\u00e3o de objetos via formul\u00e1rio dentro da interface do usu\u00e1rio.</p> <p>Warning</p> <p>Enquanto \u00e9 conveniente e acess\u00edvel para at\u00e9 mesmo os mais novos usu\u00e1rios, criar objetos um por um manualmente completando esses formul\u00e1rios obviamente n\u00e3o escalam bem. Para importa\u00e7\u00f5es grandes, voc\u00ea provavelmente estar\u00e1 bem servido ao usar um dos outros m\u00e9todos discutidos nessa se\u00e7\u00e3o.</p> <p>Para criar um novo objeto dentro do NetBox, encontre o tipo de objeto dentro do menu de navega\u00e7\u00e3o e clique no bot\u00e3o verde de \"Add\" (Adicionar)</p> <p>!!! info N\u00e3o est\u00e1 achando o Bot\u00e3o?</p> <pre><code>Se voc\u00ea n\u00e3o encontrar o bot\u00e3o de \"Add\" em alguns tipos de objeto, \u00e9 porque sua conta n\u00e3o tem permiss\u00f5es suficientes para criar esses tipos. Pe\u00e7a ao administrador do seu NetBox para que lhe atribua as permiss\u00f5es necess\u00e1rias.\n\nNote tamb\u00e9m que para alguns tipos de objetos, como os componentes de dispositivos, voc\u00ea n\u00e3o pode cri\u00e1-los diretamente do menu de navega\u00e7\u00e3o. Eles devem ser criados dentro do contexto de um objeto pai (como no dispositivo pai).\n</code></pre>"},{"location":"getting-started/populating-data/#importacao-em-grupo-csvyaml","title":"Importa\u00e7\u00e3o em Grupo (CSV/YAML)","text":"<p>O NetBox suporta uma importa\u00e7\u00e3o em grupo de novos objetos e a atualiza\u00e7\u00e3o existente dos objetos utilizando dados formatados em CSV. Esse m\u00e9todo pode ser o ideal para a importa\u00e7\u00e3o de planilhas, que s\u00e3o facilmente convertidas para CSV. Dados em CSV podem ser importados, seja como um campo de formul\u00e1rio, ou fazendo o upload pr\u00f3prio do arquivo em CSV j\u00e1 formatado.</p> <p>Ao visualizar o formul\u00e1tio de importa\u00e7\u00e3o do CSV de um tipo de objeto, voc\u00ea ir\u00e1 notar cabe\u00e7alhos (headers) para as colunas obrigat\u00f3rios foram pr\u00e9-populadas. Cada formul\u00e1rio tem uma tabela abaixo com o t\u00edtulo de \"CSV Field Options\", que lista todas as colunas suportadas para ser utilizada de refer\u00eancia. (Geralmente, isso mapeia os campos que voc\u00ea v\u00ea no formul\u00e1rio de cria\u00e7\u00e3o correspondente para cada objeto individual.)</p> <p>Se o campo \"id\" \u00e9 adicionado aos dados da planilha CSV, esses dados ser\u00e3o utilizados para atualizar os registros existentes e n\u00e3o importar novos objetos.</p> <p>Note que alguns modelos (como os device types &amp; module types) n\u00e3o suportam a importa\u00e7\u00e3o do CSV. No lugar, eles aceitam dados formatados em YAML para facilitar a importa\u00e7\u00e3o de ambos objetos pai quando os componentes filho.</p>"},{"location":"getting-started/populating-data/#scripting","title":"Scripting","text":"<p>\u00c0s vezes voc\u00ea ir\u00e1 encontrar dados que precisam ser populados no NetBox de forma facilmente reduzida em um padr\u00e3o (pattern). Por exemplo, suponha que voc\u00ea tem 100 locais (branch sites) e cada local tem 05 VLANs, numeradas de 101 at\u00e9 105. Enquanto que \u00e9 certamente poss\u00edvel de explicitamente definir cada uma dessas 500 VLANs dentro da importa\u00e7\u00e3o de um arquivo CSV, pode ser rapidamente rascunhado em um simples script para automaticamente criar essas VLANs de acordo com um padr\u00e3o definido. Isso garante um alto n\u00edvel de confian\u00e7a na valida\u00e7\u00e3o dos dados, j\u00e1 que \u00e9 imposs\u00edvel para um script \"esquecer\" uma VLAN ou outra.</p> <p>Tip</p> <p>\u00c0s vezes, voc\u00ea pode talvez possa querer escrever um script para popular os objetos mesmo que voc\u00ea tenha os dados necess\u00e1rios prontos para importa\u00e7\u00e3o. Isso \u00e9 porque ao utilizar um script, \u00e9 eliminada a necessidade de manualmente verificar se os dados existem antes da importa\u00e7\u00e3o.</p>"},{"location":"getting-started/populating-data/#rest-api","title":"REST API","text":"<p>Voc\u00ea pode usar a API REST para facilitar na popula\u00e7\u00e3o de dados dentro do NetBox. A API REST oferece um controle completo e program\u00e1tico para a cria\u00e7\u00e3o de objetos, sujeitos as mesmas regras de valida\u00e7\u00e3o for\u00e7adas pelos formul\u00e1rios da interface do usu\u00e1rio (UI). Al\u00e9m disso, a API REST suporta a cria\u00e7\u00e3o em grupos de m\u00faltiplos objetos usando somente uma requisi\u00e7\u00e3o (single request).</p> <p>Para mais informa\u00e7\u00f5es sobre essa op\u00e7\u00e3o, veja a documenta\u00e7\u00e3o sobre API REST.</p>"},{"location":"installation/","title":"Instala\u00e7\u00e3o","text":"<p>As instru\u00e7\u00f5es de instala\u00e7\u00e3o fornecidas aqui foram testadas para funcionar no Ubuntu 20.04 e CentOS 8.3. Comandos necess\u00e1rios em particular para instalar depend\u00eancias em outras distribui\u00e7\u00f5es podem variar de forma significativa. Infelizmente, isto est\u00e1 fora do controle dos mantenedores do NetBox. Por favor, consulte a documenta\u00e7\u00e3o da sua distribui\u00e7\u00e3o caso precise de assist\u00eancia para qualquer erro que pode ocorrer.</p> <p>As se\u00e7\u00f5es abaixo detalham como configurar uma inst\u00e2ncia nova do NetBox:</p> <ol> <li>Banco de Dados PostgreSQL</li> <li>Redis</li> <li>Componentes do NetBox</li> <li>Gunicorn</li> <li>Servidor HTTP</li> <li>Autentica\u00e7\u00e3o via LDAP (optional)</li> </ol>"},{"location":"installation/#dependencias-requirements","title":"Depend\u00eancias (Requirements)","text":"Depend\u00eancia Vers\u00e3o M\u00ednima Python 3.8 PostgreSQL 11 Redis 4.0 <p>Abaixo est\u00e1 uma vis\u00e3o geral simplificada da stack de aplica\u00e7\u00f5es do NetBox para refer\u00eancia:</p> <p></p>"},{"location":"installation/#fazendo-o-upgrade","title":"Fazendo o Upgrade","text":"<p>Se voc\u00ea estiver fazendo o upgrade de uma instala\u00e7\u00e3o existente, por gentileza consulte o Guia de Upgrade.</p>"},{"location":"installation/1-postgresql/","title":"Instala\u00e7\u00e3o do Banco de Dados PostgreSQL","text":"<p>Essa se\u00e7\u00e3o detalha o processo de configura\u00e7\u00e3o e instala\u00e7\u00e3o do banco de dados PostgreSQL locamente. Se voc\u00ea j\u00e1 tem um banco de dados PostgreSQL configurado, pode passar para a pr\u00f3xima se\u00e7\u00e3o.</p> <p>PostgreSQL 11 ou maior \u00e9 necess\u00e1ria</p> <p>O NetBox exige uma vers\u00e3o igual ou maior a PostgreSQL 11. Note que o MySQL ou outros bancos de dados relacionais n\u00e3o s\u00e3o suportados.</p>"},{"location":"installation/1-postgresql/#instalacao","title":"Instala\u00e7\u00e3o","text":"UbuntuCentOS <pre><code>sudo apt update\nsudo apt install -y postgresql\n</code></pre> <pre><code>sudo yum install -y postgresql-server\nsudo postgresql-setup --initdb\n</code></pre> <p>CentOS configura a autentica\u00e7\u00e3o baseada em host com ident para o PostgreSQL por padr\u00e3o. Porque o NetBox ir\u00e1 precisar autenticar com o usu\u00e1rio e senha, modifique <code>/var/lib/pgsql/data/pg_hba.conf</code> para suportar a autentica\u00e7\u00e3o MD5 ao mudar <code>ident</code> to <code>md5</code> seguindo as linhas abaixo:</p> <pre><code>host    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\n</code></pre> <p>Uma vez que o PostgreSQL foi instalado, inicie (start) o servi\u00e7o e habilite-o para iniciar no boot:</p> <pre><code>sudo systemctl start postgresql\nsudo systemctl enable postgresql\n</code></pre> <p>Antes de continuar, verifique que voc\u00ea tenha instalado a vers\u00e3o 11 do PostgreSQL ou uma maior:</p> <pre><code>psql -V\n</code></pre>"},{"location":"installation/1-postgresql/#criacao-do-banco-de-dados","title":"Cria\u00e7\u00e3o do Banco de Dados","text":"<p>No m\u00ednimo, n\u00f3s preciamos criar um banco de dados para o NetBox e associar o usu\u00e1rio e senha para autentica\u00e7\u00e3o. Comece com o shell do PostgreSQL como o usu\u00e1rio de sistema do Postgres.</p> <pre><code>sudo -u postgres psql\n</code></pre> <p>Dentro do shell, utilize os seguintes comandos para criar o banco de dados e usuario (fun\u00e7\u00e3o / role), substituindo seu pr\u00f3prio valor pela senha:</p> <pre><code>CREATE DATABASE netbox;\nCREATE USER netbox WITH PASSWORD 'J5brHrAXFLQSif0K';\nALTER DATABASE netbox OWNER TO netbox;\n</code></pre> <p>Use a strong password</p> <p>N\u00e3o use a senha desse exemplo. Escolhe uma senha forte e aleat\u00f3rio para garantir uma autentica\u00e7\u00e3o segura do banco de dados para a instala\u00e7\u00e3o do seu NetBox.</p> <p>Uma vez completa, pressione <code>\\q</code> para sair do shell do PostgreSQL.</p>"},{"location":"installation/1-postgresql/#verifique-o-status-do-servico","title":"Verifique o Status do Servi\u00e7o","text":"<p>Voc\u00ea pode verificar que a autentica\u00e7\u00e3o funciona ao executar o comando <code>psql</code> passando o usu\u00e1rio e senha configurados. (Substitua <code>localhost</code> com o banco de dados do servidor se voc\u00ea estiver utilizando um banco de dados remoto.)</p> <pre><code>$ psql --username netbox --password --host localhost netbox\nPassword for user netbox: \npsql (12.5 (Ubuntu 12.5-0ubuntu0.20.04.1))\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nnetbox=&gt; \\conninfo\nYou are connected to database \"netbox\" as user \"netbox\" on host \"localhost\" (address \"127.0.0.1\") at port \"5432\".\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nnetbox=&gt; \\q\n</code></pre> <p>Se tiver sucesso, voc\u00ea pode executar <code>netbox</code> no prompt. Escreva <code>\\conninfo</code> para confirmar sua conex\u00e3o, ou <code>\\q</code> para sair.</p>"},{"location":"installation/2-redis/","title":"Instala\u00e7\u00e3o do Redis","text":""},{"location":"installation/2-redis/#instalar-o-redis","title":"Instalar o Redis","text":"<p>Redis \u00e9 armazena os valores no formato chave-valor na mem\u00f3ria (in-memory), onde o NetBox utiliza para fins de cache e queuing (enfileiramento). Essa se\u00e7\u00e3o descreve a configura\u00e7\u00e3o e instala\u00e7\u00e3o de uma inst\u00e2ncia local do Redis. Se voc\u00ea tiver um servi\u00e7o Redis configurado, pode pular para a pr\u00f3xima se\u00e7\u00e3o.</p> <p>Redis v4.0 or later required</p> <p>NetBox v2.9.0 ou maior requer o Redis v4.0 ou maior. Se sua distribui\u00e7\u00e3o n\u00e3o oferece uma vers\u00e3o recente o suficiente, voc\u00ea ir\u00e1 precisar fazer o build do Redis utilizando o c\u00f3digo fonte (source code). Verifique a documenta\u00e7\u00e3o de instala\u00e7\u00e3o do Redis para mais detalhes.</p> UbuntuCentOS <pre><code>sudo apt install -y redis-server\n</code></pre> <pre><code>sudo yum install -y redis\nsudo systemctl start redis\nsudo systemctl enable redis\n</code></pre> <p>Antes de continuar, verifique que voc\u00ea instalou ao menos a vers\u00e3o do Redis v4.0:</p> <pre><code>redis-server -v\n</code></pre> <p>Voc\u00ea talvez queira modificar a configura\u00e7\u00e3o do Redis em <code>/etc/redis.conf</code> ou <code>/etc/redis/redis.conf</code>, no entanto, na maioria dos casos, a configura\u00e7\u00e3o padr\u00e3o \u00e9 suficiente.</p>"},{"location":"installation/2-redis/#verifique-o-status-do-servico","title":"Verifique o Status do Servi\u00e7o","text":"<p>Utilize o utilit\u00e1rio <code>redis-cli</code> para garantir que o servi\u00e7o Redis \u00e9 funcional:</p> <pre><code>redis-cli ping\n</code></pre> <p>Se houver sucesso, voc\u00ea deve receber uma resposta <code>PONG</code> do servidor.</p>"},{"location":"installation/3-netbox/","title":"Instala\u00e7\u00e3o do NetBox","text":""},{"location":"installation/3-netbox/#instale-os-pacotes-do-sistema","title":"Instale os Pacotes do Sistema","text":"<p>Comece instalando todos os pacotes do sistema exigidos pelo NetBox e suas depend\u00eancias.</p> <p>Python 3.8 ou maior \u00e9 necess\u00e1rio!</p> <p>NetBox requer a vers\u00e3o 3.8, 3.9, 3.10 ou 3.11 do Python.</p> UbuntuCentOS <pre><code>sudo apt install -y python3 python3-pip python3-venv python3-dev build-essential libxml2-dev libxslt1-dev libffi-dev libpq-dev libssl-dev zlib1g-dev\n</code></pre> <pre><code>sudo yum install -y gcc libxml2-devel libxslt-devel libffi-devel libpq-devel openssl-devel redhat-rpm-config\n</code></pre> <p>Antes de continuar, verifique que voc\u00ea instalou uma vers\u00e3o do Python ao menos na v3.8:</p> <pre><code>python3 -V\n</code></pre>"},{"location":"installation/3-netbox/#download-netbox","title":"Download NetBox","text":"<p>Essa documenta\u00e7\u00e3o forn+ece duas op\u00e7\u00f5es de instala\u00e7\u00e3o do NetBox: pelo download de um arquivo ou de um reposit\u00f3rio git. Instalar pelo pacote (op\u00e7\u00e3o A abaixo) requer um fetching (sincroniza\u00e7\u00e3o) manual e download do arquivo para todos os updates e atualiza\u00e7\u00f5es, enquanto que a op\u00e7\u00e3o de instala\u00e7\u00e3o pelo git (op\u00e7\u00e3o B) permite um upgrade ininterrupto ao simplesmente dar um pull (fazer o download) novamente do ramo (branch) <code>master</code>.</p>"},{"location":"installation/3-netbox/#opcao-a-realizar-o-download-do-arquivo-com-a-versao-desejada","title":"Op\u00e7\u00e3o A: Realizar o Download do Arquivo com a vers\u00e3o desejada","text":"<p>Fa\u00e7a o download d\u00e1 \u00faltima vers\u00e3o est\u00e1vel do GitHub como um arquivo tarball ou ZIP e extraia-o para o caminho (local) desejado. Nesse exemplo, n\u00f3s vamos usar o <code>/opt/netbox</code> como root do NetBox.</p> <pre><code>sudo wget https://github.com/netbox-community/netbox/archive/refs/tags/vX.Y.Z.tar.gz\nsudo tar -xzf vX.Y.Z.tar.gz -C /opt\nsudo ln -s /opt/netbox-X.Y.Z/ /opt/netbox\n</code></pre> <p>Note</p> <p>\u00c9 recomendado instalr o NetBox em um diret\u00f3rio nomeado com seu n\u00famero de vers\u00e3o. Por exemplo, NetBox v3.0.0 seria instalado em <code>/opt/netbox-3.0.0</code>, e um link simb\u00f3lico (symlink) de <code>/opt/netbox</code> apontaria para essa localiza\u00e7\u00e3o. (Voc\u00ea pode verificar essa configura\u00e7\u00e3o com o comando <code>ls -l /opt | grep netbox</code>.) Isso permite que vers\u00f5es futuras possam ser instaladas em paralelo sem interromper a instala\u00e7\u00e3o atual. Ao mudar para uma vers\u00e3o nova, apenas atualize o link simb\u00f3lico.</p>"},{"location":"installation/3-netbox/#opcao-b-clone-o-repositorio-git","title":"Op\u00e7\u00e3o B: Clone o reposit\u00f3rio Git","text":"<p>Criar um diret\u00f3rio base para a instala\u00e7\u00e3o do NetBox. Para esse guia, n\u00f3s iremos utilizar <code>/opt/netbox</code>.</p> <pre><code>sudo mkdir -p /opt/netbox/\ncd /opt/netbox/\n</code></pre> <p>Se o <code>git</code> n\u00e3o estiver instalado, instale-o:</p> UbuntuCentOS <pre><code>sudo apt install -y git\n</code></pre> <pre><code>sudo yum install -y git\n</code></pre> <p>Agora, clone o ramo (branch) master do reposit\u00f3rio do NetBox no GitHub para o diret\u00f3rio atual. (Essa branch sempre ter\u00e1 a vers\u00e3o est\u00e1vel atual.)</p> <pre><code>sudo git clone -b master --depth 1 https://github.com/netbox-community/netbox.git .\n</code></pre> <p>Note</p> <p>O comando <code>git clone</code> acima utiliza um \"shadow clone\" para obter somente o commit mais recente. Se voc\u00ea precisa fazer o downlaod do hist\u00f3rico inteiro, omita o argumento <code>--depth 1</code>.</p> <p>O comando <code>git clone</code> deve gerar uma sa\u00edda (output) similar conforme a seguinte:</p> <pre><code>Cloning into '.'...\nremote: Enumerating objects: 996, done.\nremote: Counting objects: 100% (996/996), done.\nremote: Compressing objects: 100% (935/935), done.\nremote: Total 996 (delta 148), reused 386 (delta 34), pack-reused 0\nReceiving objects: 100% (996/996), 4.26 MiB | 9.81 MiB/s, done.\nResolving deltas: 100% (148/148), done.\n</code></pre> <p>Note</p> <p>Instala\u00e7\u00e3o atrav\u00e9s do git tamb\u00e9m permite que voc\u00ea facilmente tente diferentes vers\u00f5es do NetBox. Para verificar uma vers\u00e3o espec\u00edfica do NetBox, utilize o comando <code>git checkout</code> com a tag de vers\u00e3o desejada. Por exemplo, <code>git checkout v3.0.8</code>.</p>"},{"location":"installation/3-netbox/#crie-o-usuario-de-sistema-do-netbox","title":"Crie o Usu\u00e1rio de Sistema do NetBox","text":"<p>Crie a conta do usu\u00e1rio do sistema nomeado de <code>netbox</code>. N\u00f3s iremos configurar os servi\u00e7os WSGI e HTTP para rodar em cima desta conta. N\u00f3s vamos associar o usu\u00e1rio para ser dono do diret\u00f3rio media. Isso garante que o NetBox ir\u00e1 poder salvar os arquivos que foram feito upload ao NetBox.</p> UbuntuCentOS <pre><code>sudo adduser --system --group netbox\nsudo chown --recursive netbox /opt/netbox/netbox/media/\n</code></pre> <pre><code>sudo groupadd --system netbox\nsudo adduser --system -g netbox netbox\nsudo chown --recursive netbox /opt/netbox/netbox/media/\n</code></pre>"},{"location":"installation/3-netbox/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Mova o diret\u00f3rio de configura\u00e7\u00e3o do NetBox e fa\u00e7a uma c\u00f3pia de <code>configuration_example.py</code> para <code>configuration.py</code>. Esse arquivo ir\u00e1 conter todos os par\u00e2metros de configura\u00e7\u00e3o da sua inst\u00e2ncia local do NetBox.</p> <pre><code>cd /opt/netbox/netbox/netbox/\nsudo cp configuration_example.py configuration.py\n</code></pre> <p>Open <code>configuration.py</code> with your preferred editor to begin configuring NetBox. NetBox offers many configuration parameters, but only the following four are required for new installations:</p> <ul> <li><code>ALLOWED_HOSTS</code></li> <li><code>DATABASE</code></li> <li><code>REDIS</code></li> <li><code>SECRET_KEY</code></li> </ul>"},{"location":"installation/3-netbox/#allowed_hosts","title":"ALLOWED_HOSTS","text":"<p>\u00c9 uma lista dos hostnames v\u00e1lidos e endere\u00e7o IP que o servidor pode ser alcan\u00e7ado. Voc\u00ea deve especificar ao menos um ou mais nomes ou endere\u00e7os IP. (Observe que isso n\u00e3o restringe os locais que o NetBox pode ser acessado: \u00e9 meramente utilizado para a valida\u00e7\u00e3o de host no cabe\u00e7alho do HTTP)</p> <pre><code>ALLOWED_HOSTS = ['netbox.example.com', '192.0.2.123']\n</code></pre> <p>Se voc\u00ea ainda n\u00e3o tem certeza do nome de dom\u00ednio ou endere\u00e7o IP que a instala\u00e7\u00e3o do NetBox ir\u00e1 utilizar, voc\u00ea pode definir um wildcard (asterisco) para permitir todos os valores de host:</p> <pre><code>ALLOWED_HOSTS = ['*']\n</code></pre>"},{"location":"installation/3-netbox/#database","title":"DATABASE","text":"<p>Esse par\u00e2metro armazena os detalhes de configura\u00e7\u00e3o do banco de dados. Voc\u00ea deve definir o usu\u00e1rio e senha utilizados quando voc\u00ea configurou o PostgreSQL. Se o servi\u00e7o est\u00e1 rodando em um host remoto, atualize os par\u00e2metros <code>HOST</code> e <code>PORT</code> para estarem de acordo. Veja a documenta\u00e7\u00e3o da configura\u00e7\u00e3o para ter mais detalhes de par\u00e2metros individuais.</p> <pre><code>DATABASE = {\n    'NAME': 'netbox',               # Database name\n    'USER': 'netbox',               # PostgreSQL username\n    'PASSWORD': 'J5brHrAXFLQSif0K', # PostgreSQL password\n    'HOST': 'localhost',            # Database server\n    'PORT': '',                     # Database port (leave blank for default)\n    'CONN_MAX_AGE': 300,            # Max database connection age (seconds)\n}\n</code></pre>"},{"location":"installation/3-netbox/#redis","title":"REDIS","text":"<p>O Rediz armazena valores no formato chave-valor dentro da mem\u00f3ria (e somente nela) e \u00e9 utilizado pelo NetBox para caching e tasks de background enfileiradas. Redis tipicamente requer configura\u00e7\u00f5es m\u00ednimas; os valores abaixo s\u00e3o suficientes para a maioria das instala\u00e7\u00f5es. Acesse a documenta\u00e7\u00e3o da configura\u00e7\u00e3o para mais detalhes sobre par\u00e2metros individuais.</p> <p>Observe que o NetBox exige uma especifica\u00e7\u00e3o de dois bancos de dados separados do Redis: <code>tasks</code> e <code>caching</code>. Esses s\u00e3o ambos fornecidos pelo mesmo servi\u00e7o de Redis, no entanto cada um deve ter um \u00fanico ID n\u00famero do banco de dados.</p> <pre><code>REDIS = {\n    'tasks': {\n        'HOST': 'localhost',      # Servidor Redis\n        'PORT': 6379,             # Porta do Redis\n        'PASSWORD': '',           # Senha do Redis (opcional)\n        'DATABASE': 0,            # Database ID\n        'SSL': False,             # Usar SSL (opcional)\n    },\n    'caching': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'PASSWORD': '',\n        'DATABASE': 1,            # ID \u00fanico para o segundo banco de dados\n        'SSL': False,\n    }\n}\n</code></pre>"},{"location":"installation/3-netbox/#secret_key","title":"SECRET_KEY","text":"<p>This parameter must be assigned a randomly-generated key employed as a salt for hashing and related cryptographic functions. (Note, however, that it is never directly used in the encryption of secret data.) This key must be unique to this installation and is recommended to be at least 50 characters long. It should not be shared outside the local system.</p> <p>Esse par\u00e2metro deve ser associado com uma chave (key) rand\u00f4micamente gerada e \u00e9 utilizada como um salt para hashing e fun\u00e7\u00f5es de criptografia relacionados. (Note, no entanto, que isso nunca deve ser utilizada na encripta\u00e7\u00e3o de dados secretos.) Essa chave deve ser \u00fanica para a instala\u00e7\u00e3o e \u00e9 recomendado que tenha ao menos 50 caracteres. N\u00e3o deve ser compartilhada fora do sistema local.</p> <p>Um simples script em Python com o nome de <code>generate_secret_key.py</code> \u00e9 fornecido no diret\u00f3rio pai para auxiliar na gera\u00e7\u00e3o desta key:</p> <pre><code>python3 ../generate_secret_key.py\n</code></pre> <p>SECRET_KEY values must match</p> <p>No caso de uma instala\u00e7\u00e3o com alta disponibilidade com diferentes servidores web, <code>SECRET_KEY</code> deve ser id\u00eantico entre os servidores para manter uma persist\u00eancia de estado da sess\u00e3o do usu\u00e1rio.</p> <p>Quando voc\u00ea terminar de modificar a configura\u00e7\u00e3o, lembre de salvar o arquivo.</p>"},{"location":"installation/3-netbox/#pacotes-e-dependencias-opcionais","title":"Pacotes e Depend\u00eancias Opcionais","text":"<p>Todos os pacotes Python exigidos pelo NetBox est\u00e3o listados em <code>requirements.txt</code> e ser\u00e3o instalados automaticamente. NetBox tamb\u00e9m suporta pacotes opcionais. Se desejar, esses pacotes devem ser listados em <code>local_requirements.txt</code> dentro do diret\u00f3rio root do NetBox.</p>"},{"location":"installation/3-netbox/#napalm","title":"NAPALM","text":"<p>A integra\u00e7\u00e3o com a biblioteca de automa\u00e7\u00e3o via NAPALM permite que o NetBox obtenha dados de produ\u00e7\u00e3o e atuais dos dispositivos e retorne para o requisitor atrav\u00e9s de API REST. A configura\u00e7\u00e3o dos par\u00e2metros <code>NAPALM_USERNAME</code> e <code>NAPALM_PASSWORD</code> definem as credenciais para serem utilizadas ao se conectar com o dispositivo.</p> <pre><code>sudo sh -c \"echo 'napalm' &gt;&gt; /opt/netbox/local_requirements.txt\"\n</code></pre>"},{"location":"installation/3-netbox/#armazenamento-de-arquivos-storage-remoto","title":"Armazenamento de Arquivos (Storage) Remoto","text":"<p>Por padr\u00e3o, o NetBox ir\u00e1 utilizar o sistema de arquivos local para realizar o upload de arquivos. Para utilizar um sistema de arquivos remoto, instale a biblioteca <code>django-storages</code> e configure seu backend de armazenamento desejado dentro de <code>configuration.py</code>.</p> <pre><code>sudo sh -c \"echo 'django-storages' &gt;&gt; /opt/netbox/local_requirements.txt\"\n</code></pre>"},{"location":"installation/3-netbox/#rodando-o-script-de-upgrade","title":"Rodando o Script de Upgrade","text":"<p>Uma vez que o NetBox foi configurado, estamos prontos para prosseguir com a instala\u00e7\u00e3o em si. N\u00f3s iremos rodar o script de upgrade (<code>upgrade.sh</code>) para realizar as seguintes a\u00e7\u00f5es:</p> <ul> <li>Criar um ambiente virtual do Python (virtual environment)</li> <li>Instala todos os pacote do Python necess\u00e1rios</li> <li>Roda as migra\u00e7\u00f5es de esquema (schema) do banco de dados</li> <li>Faz o build da documenta\u00e7\u00e3o localmente (para uso offline)</li> <li>Agrega os recursos de arquivos no disco</li> </ul> <p>Warning</p> <p>Se voc\u00ea ainda tiver um ambiente virtual do Python ativo do passo de instala\u00e7\u00e3o anterior, desabilite-o rodando o comando <code>deactivate</code>. Esse comando evita erros no sistema onde o <code>sudo</code> foi configurado para preservar o ambiente atual do usu\u00e1rio.</p> <pre><code>sudo /opt/netbox/upgrade.sh\n</code></pre> <p>Observe que o Python 3.8 ou maior \u00e9 necess\u00e1rio para o NetBox v3.2 ou vers\u00f5es maiores. Se a instala\u00e7\u00e3o padr\u00e3o do Python no seu servidor for uma menor que a exigida, passe o caminho (path) para a instala\u00e7\u00e3o suportada como uma vari\u00e1vel de ambiente com o nome de <code>PYTHON</code>. (Note que a vari\u00e1vel de ambiente deve ser passada depois depois do comando <code>sudo</code>.)</p> <pre><code>sudo PYTHON=/usr/bin/python3.8 /opt/netbox/upgrade.sh\n</code></pre> <p>Note</p> <p>Uma vez completa, o script de upgrade pode retornar um aviso que existe um ambiente virtual detectado. Como \u00e9 uma instala\u00e7\u00e3o nova, esse aviso pode ser seguramente ignorado.</p>"},{"location":"installation/3-netbox/#criar-um-usuario-super","title":"Criar um Usu\u00e1rio Super","text":"<p>O NetBox n\u00e3o vem com contas de usu\u00e1rios pr\u00e9-definidas. Voc\u00ea vai precisar criar um usu\u00e1rio super (conta administrativa) para habilitar o login ao NetBox. Primeiro, entre no ambiente virtual do Python (venv) criado pelo script de upgrade:</p> <pre><code>source /opt/netbox/venv/bin/activate\n</code></pre> <p>Uma vez que o ambiente virtual foi ativado, voc\u00ea vai notar que o texto <code>(venv)</code> vai estar no in\u00edcio (prefixo) do prompt do console.</p> <p>Agora, vamos criar uma conta de superuser (usu\u00e1rio super) utilizando o comando de ger\u00eancia do Django <code>createsuperuser</code> (atrav\u00e9s do <code>manage.py</code>). Especificando um endere\u00e7o de email para o usu\u00e1rio n\u00e3o \u00e9 obrigat\u00f3rio, mas tenha certeza de usar uma senha forte.</p> <pre><code>cd /opt/netbox/netbox\npython3 manage.py createsuperuser\n</code></pre>"},{"location":"installation/3-netbox/#agendar-uma-tarefa-de-housekeeping","title":"Agendar uma Tarefa de Housekeeping","text":"<p>O NetBox inclui um comando de ger\u00eancia de <code>housekeeping</code> que lida com algumas tarefas recorrentes de limpeza, como limpar as sess\u00f5es velhas ou expiradas de registros de mudan\u00e7as. Embora esse comando pode ser rodado manualmente, \u00e9 recomendado configurar uma tarefa agendada utilizando o daemon do sistema <code>cron</code> ou uma ferramenta similar.</p> <p>O script em shell que invoca esse comando est\u00e1 em <code>contrib/netbox-housekeeping.sh</code> Ele pode ser copiado ou linkado do seu diret\u00f3rio de tarefas di\u00e1rias do cron, ou incluso dentro do diret\u00f3rio do crontab diretamente. (Se estiver instalando o NetBox em um caminho n\u00e3o padr\u00e3o (nonstandard path), certifique-se de atualizar os caminhos (paths) do sistema dentro do script primeiro.)</p> <pre><code>sudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping\n</code></pre> <p>Olhe a documenta\u00e7\u00e3o de housekeeping para mais detalhes.</p>"},{"location":"installation/3-netbox/#testar-a-aplicacao","title":"Testar a Aplica\u00e7\u00e3o","text":"<p>At this point, we should be able to run NetBox's development server for testing. We can check by starting a development instance locally.</p> <p>Tip</p> <p>Verifique que o ambiente virtual do Python ainda est\u00e1 ativo antes de tentar rodar o servidor.</p> <pre><code>python3 manage.py runserver 0.0.0.0:8000 --insecure\n</code></pre> <p>Se houver sucesso, voc\u00ea deve ter uma sa\u00edda (output) similar ao:</p> <pre><code>Watching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nAugust 30, 2021 - 18:02:23\nDjango version 3.2.6, using settings 'netbox.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</code></pre> <p>Agora, conecte-se ao nome ou endere\u00e7o IP do servidor (como foi definido em <code>ALLOWED_HOSTS</code>) na porta 8000; por exemplo http://127.0.0.1:8000. Voc\u00ea deve ser recebido com uma mensagem de boas-vindas da p\u00e1gina inicial do NetBox. Tente logar com o usu\u00e1rio e senha especificados ao criar o usu\u00e1rio super (superuser).</p> <p>Note</p> <p>Por padr\u00e3o, distribui\u00e7\u00f5es baseadas no RHEL v\u00e3o provavelmente bloquear suas tentativas de teste com o firewalld. A porta de desenvolvimento do servidor pode ser aberta com <code>firewall-cmd</code> (adicione <code>--permanent</code> se voc\u00ea quiser que a regra se mantenha ap\u00f3s o servidor ser reiniciado)</p> <pre><code>firewall-cmd --zone=public --add-port=8000/tcp\n</code></pre> <p>!!! danger N\u00e3o utilize em produ\u00e7\u00e3o!</p> <pre><code>O servidor de desenvolvimento deve ser utilizando somente para desenvolvimento e testes. N\u00e3o \u00e9 nem perfom\u00e1tico ou seguro suficiente para ser utilizado em produ\u00e7\u00e3o. **N\u00e3o utilize-o em produ\u00e7\u00e3o!**\n</code></pre> <p>Warning</p> <p>Se o servi\u00e7o de teste n\u00e3o funcionar, ou voc\u00ea n\u00e3o conseguiu acessar a p\u00e1gina inicial (homepage) do NetBox, alguma coisa deu errado. N\u00e3o siga com o resto guia at\u00e9 que a instala\u00e7\u00e3o tenha sido corrigida.</p> <p>Escreva <code>Ctrl+C</code> para parar com o servidor de desenvolvimento.</p>"},{"location":"installation/4-gunicorn/","title":"Gunicorn","text":"<p>Como a maioria das aplica\u00e7\u00f5es Django, o NetBox roda como uma aplica\u00e7\u00e3o WSGI. Essa documenta\u00e7\u00e3o mostra como instalar e configurar o gunicorn (que \u00e9 automaticamente instalado com o NetBox) para ese papel, no entanto outros servidores WSGI est\u00e3o dispon\u00edveis e devem funcionar de forma similar. uWSGI \u00e9 alternativa mais popular.</p>"},{"location":"installation/4-gunicorn/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>NetBox possui um arquivo de configura\u00e7\u00e3o padr\u00e3o para o gunicorn. Para utiliz\u00e1-lo, copie <code>/opt/netbox/contrib/gunicorn.py</code> para <code>/opt/netbox/gunicorn.py</code>. (N\u00f3s fazemos uma c\u00f3pia desse arquivo al\u00e9m de apenas apontar para o diret\u00f3rio diretamente para garantir que qualquer mudan\u00e7a local feita n\u00e3o seja sobscrita por um upgrade futuro.)</p> <pre><code>sudo cp /opt/netbox/contrib/gunicorn.py /opt/netbox/gunicorn.py\n</code></pre> <p>Enquanto que a configura\u00e7\u00e3o fornecida \u00e9 suficiente para a maioria das instala\u00e7\u00f5es inicias, voc\u00ea pode querer editar esse arquivo e alterar o endere\u00e7o IP e n\u00famero de porta do Gunicorn, ou ainda realizar ajustes relacionados com a performance. Veja a documenta\u00e7\u00e3o do Gunicorn para os par\u00e2metros de configura\u00e7\u00e3o dispon\u00edveis.</p>"},{"location":"installation/4-gunicorn/#configuracao-do-systemd","title":"Configura\u00e7\u00e3o do systemd","text":"<p>We'll use systemd to control both gunicorn and NetBox's background worker process. First, copy <code>contrib/netbox.service</code> and <code>contrib/netbox-rq.service</code> to the <code>/etc/systemd/system/</code> directory and reload the systemd daemon.</p> <p>N\u00f3s iremos utilizar o systemd para controlar tanto o gunicorn quanto os processos de fundo (background) do NetBox, copie <code>contrib/netbox.service</code> e <code>contrib/netbox-rq.service</code> para o diret\u00f3rio <code>/etc/systemd/system</code> e recarregue o deamon do systemd.</p> <p>Warning</p> <p>Os arquivos de configura\u00e7\u00e3o de servi\u00e7o empacotados com o NetBox assumem que o servi\u00e7o ir\u00e1 rodar com tanto o usu\u00e1rio e grupo nomeado de <code>netbox</code>. Se isso difere da sua instala\u00e7\u00e3o, certifique de atualizar os arquivos de servi\u00e7o para estarem em conformidade com seu ambiente.</p> <pre><code>sudo cp -v /opt/netbox/contrib/*.service /etc/systemd/system/\nsudo systemctl daemon-reload\n</code></pre> <p>Ent\u00e3o, inicie os servi\u00e7os <code>netbox</code> e o <code>netbox-rq</code> e habilite-os para initiar no momento do boot:</p> <pre><code>sudo systemctl start netbox netbox-rq\nsudo systemctl enable netbox netbox-rq\n</code></pre> <p>Pode pode utilizar o comando <code>systemctl status netbox</code>para verificar que o servi\u00e7o WSGI est\u00e1 rodando:</p> <pre><code>systemctl status netbox.service\n</code></pre> <p>Voc\u00ea deve ver uma sa\u00edda (output) similar a:</p> <pre><code>\u25cf netbox.service - NetBox WSGI Service\n     Loaded: loaded (/etc/systemd/system/netbox.service; enabled; vendor preset: enabled)\n     Active: active (running) since Mon 2021-08-30 04:02:36 UTC; 14h ago\n       Docs: https://docs.netbox.dev/\n   Main PID: 1140492 (gunicorn)\n      Tasks: 19 (limit: 4683)\n     Memory: 666.2M\n     CGroup: /system.slice/netbox.service\n             \u251c\u25001140492 /opt/netbox/venv/bin/python3 /opt/netbox/venv/bin/gunicorn --pid /va&gt;\n             \u251c\u25001140513 /opt/netbox/venv/bin/python3 /opt/netbox/venv/bin/gunicorn --pid /va&gt;\n             \u251c\u25001140514 /opt/netbox/venv/bin/python3 /opt/netbox/venv/bin/gunicorn --pid /va&gt;\n...\n</code></pre> <p>Note</p> <p>Se o servi\u00e7o do NetBox falhar para iniciar, utilize o comando <code>journalctl -eu netbox</code> para verificar as mensagens de log que indicam qual \u00e9 o problema.</p> <p>Uma vez que voc\u00ea tenha verificado que os workers do WSGI est\u00e3o online e rodando corretamente, prossiga para a configura\u00e7\u00e3o do servidor HTTP.</p>"},{"location":"installation/5-http-server/","title":"Configura\u00e7\u00e3o do Servidor HTTP","text":"<p>Essa documenta\u00e7\u00e3o fornece exemplos de configura\u00e7\u00e3o para tanto o nginx quanto o Apache, embora qualquer servidor HTTP que suporte WSGI deve ser compat\u00edvel.</p> <p>Info</p> <p>Para sermos breve, somente as instru\u00e7\u00f5es para o Ubuntu 20.04 s\u00e3o fornecidas nesse tutorial. Essas tarefas n\u00e3o s\u00e3o exclusivas do NetBox e devem serem port\u00e1veis para outras distribui\u00e7\u00f5es com altera\u00e7\u00f5es m\u00ednimas. Consulte a documenta\u00e7\u00e3o da sua distribui\u00e7\u00e3o caso precise de uma assist\u00eancia adicional.</p>"},{"location":"installation/5-http-server/#obtendo-o-certificado-ssl","title":"Obtendo o Certificado SSL","text":"<p>Para habilitar o acesso HTTPS ao NetBox, voc\u00ea precisar\u00e1 de um certificado SSL v\u00e1lido. Voc\u00ea pode comprar um certificado de uma fornecedora comercial confi\u00e1vel, ou obter um de gra\u00e7a da Let's Encrypt, ou ainda gerar o seu pr\u00f3prio (embora certificados auto-assinados / self-signed s\u00e3o geralmente n\u00e3o confi\u00e1veis). Ambos os arquivos p\u00fablico e privado precisam ser instalados no servidor NetBox em um local que seja lido pelo usu\u00e1rio <code>netbox</code>.</p> <p>The command below can be used to generate a self-signed certificate for testing purposes, however it is strongly recommended to use a certificate from a trusted authority in production. Two files will be created: the public certificate (<code>netbox.crt</code>) and the private key (<code>netbox.key</code>). The certificate is published to the world, whereas the private key must be kept secret at all times.</p> <p>O comando abaixo pode ser utilizado para gerar um certificado self-signed (auto-assinado) para finalidade de teste, no entato, \u00e9 fortemente recomendado que se use um certificado emitido por uma autoridade confi\u00e1vel em um ambiente de produ\u00e7\u00e3o. Os arquivos que ser\u00e3o criados s\u00e3o: certificado p\u00fablico (<code>netbox.crt</code>) e a chave privada (<code>netbox.key</code>). O certificado \u00e9 publicado para o mundo, enquanto que a chave privada deve ser guardada em segredo para sempre.</p> <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n-keyout /etc/ssl/private/netbox.key \\\n-out /etc/ssl/certs/netbox.crt\n</code></pre> <p>O comando acima ir\u00e1 pedir detalhes adicionais para o certificado, mas todos eles s\u00e3o opcionais.</p>"},{"location":"installation/5-http-server/#instalacao-do-servidor-http","title":"Instala\u00e7\u00e3o do Servidor HTTP","text":""},{"location":"installation/5-http-server/#opcao-a-nginx","title":"Op\u00e7\u00e3o A: nginx","text":"<p>Comece a instala\u00e7\u00e3o do nginx com:</p> <pre><code>sudo apt install -y nginx\n</code></pre> <p>Uma vez que o nginx foi instalado, copie o arquivo de configura\u00e7\u00e3o fornecido pelo NetBox para <code>etc/nginx/sites-available/netbox</code>. Certifique-se de substituir <code>netbox.example.com</code> com o dom\u00ednio ou endere\u00e7o IP da sua pr\u00f3pria instala\u00e7\u00e3o. (Esses valores devem estar em conformidade com a vari\u00e1vel <code>ALLOWED_HOSTS</code> em <code>configuration.py</code>) Once nginx is installed, copy the nginx configuration file provided by NetBox to <code>/etc/nginx/sites-available/netbox</code>. Be sure to replace <code>netbox.example.com</code> with the domain name or IP address of your installation. (This should match the value configured for <code>ALLOWED_HOSTS</code> in <code>configuration.py</code>.)</p> <pre><code>sudo cp /opt/netbox/contrib/nginx.conf /etc/nginx/sites-available/netbox\n</code></pre> <p>Ent\u00e3o, dele <code>/etc/nginx/sites-enabled/default</code> e crie um link simb\u00f3lico no diret\u00f3rio <code>sites-enabled</code> do arquivo de configura\u00e7\u00e3o que voc\u00ea acabou de criar.</p> <pre><code>sudo rm /etc/nginx/sites-enabled/default\nsudo ln -s /etc/nginx/sites-available/netbox /etc/nginx/sites-enabled/netbox\n</code></pre> <p>Finalmente, reinicie o servi\u00e7o <code>nginx</code> para que utilize a nova configura\u00e7\u00e3o.</p> <pre><code>sudo systemctl restart nginx\n</code></pre>"},{"location":"installation/5-http-server/#opcao-b-apache","title":"Op\u00e7\u00e3o B: Apache","text":"<p>Comece a insta\u00e7\u00e3o do Apache com:</p> <pre><code>sudo apt install -y apache2\n</code></pre> <p>Agora, copie o arquivo de configura\u00e7\u00e3o padr\u00e3o (default) para <code>/etc/apache2/sites-available/</code>. Ceritique-se de modificar o par\u00e2metro <code>ServerName</code> apropriado.</p> <pre><code>sudo cp /opt/netbox/contrib/apache.conf /etc/apache2/sites-available/netbox.conf\n</code></pre> <p>Agora, garanta que os m\u00f3dulos do Apache exigidos est\u00e3o habilitados para habilitar o site do <code>netbox</code> e recarregue o Apache:</p> <pre><code>sudo a2enmod ssl proxy proxy_http headers rewrite\nsudo a2ensite netbox\nsudo systemctl restart apache2\n</code></pre>"},{"location":"installation/5-http-server/#confirme-a-conectividade","title":"Confirme a Conectividade","text":"<p>At\u00e9 aqui, voc\u00ea j\u00e1 tem que conseguir conectar-se ao servi\u00e7o do HTTP com o nome do servidor e endere\u00e7o IP que forneceu nos passos anteriores.</p> <p>Info</p> <p>Tenha em mente que as configura\u00e7\u00f5es fornecidas aqui s\u00e3o apenas pra instala\u00e7\u00f5es com requisitos m\u00ednimos para ter o NetBox up e rodando. Voc\u00ea talvez queira realizar alguns ajustes para melhor servir o seu ambiente de produ\u00e7\u00e3o.</p> <p>Warning</p> <p>Certos componentes do NetBox (como a exibi\u00e7\u00e3o dos diagramas de eleva\u00e7\u00e3o do rack) dependem do uso de objetos embutidos. Garanta que a configura\u00e7\u00e3o do servidor HTTP n\u00e3o sobescreve o cabe\u00e7alho de resposta <code>X-Frame-Options</code> definido pelo NetBox.</p>"},{"location":"installation/5-http-server/#resolvendo-possiveis-problemas","title":"Resolvendo poss\u00edveis Problemas","text":"<p>Se n\u00e3o voc\u00ea n\u00e3o conseguiu conectar-se ao servidor HTTP, verifique:</p> <ul> <li>Nginx/Apache est\u00e1 rodando e configurado para escutar na porta correta.</li> <li>Acesso n\u00e3o est\u00e1 sendo bloqueado pelo firewall em algum lugar pelo caminho. (Tente conectar-se localmente pelo servidor em si, talvez seja \u00fatil utilizar o <code>curl</code>)</li> </ul> <p>Se voc\u00ea conseguiu se conectar mas recebeu um erro de c\u00f3digo HTTP 502 (bad gateway), verifique:</p> <ul> <li>O processo worker do WSGI (gunicorn) est\u00e1 rodando (<code>systemctl status netbox</code> deve mostrar o status de \"active (running)\")</li> <li>Nginx/Apache est\u00e1 configurado para conectar-se na porta que o gunicorn est\u00e1 escutando (porta padr\u00e3o \u00e9 8001).</li> <li>SELinux n\u00e3o est\u00e1 previnindo conex\u00e3o com proxy reverso. Voc\u00ea talvez precise habilitar conex\u00f5es de rede via HTTP com o comando <code>setsebool -P httpd_can_network_connect 1</code></li> </ul>"},{"location":"installation/6-ldap/","title":"Configura\u00e7\u00e3o do LDAP","text":"<p>Esse guia explica como implementar a autentica\u00e7\u00e3o via LDAP utilizando um servidor externo. Autentica\u00e7\u00e3o do usu\u00e1rio ir\u00e1 ser via usu\u00e1rios do Django no caso do LDAP retornar falha.</p>"},{"location":"installation/6-ldap/#instalando-os-pacotes-necessarios","title":"Instalando os Pacotes necess\u00e1rios","text":""},{"location":"installation/6-ldap/#instalando-pacote-do-sistema","title":"Instalando Pacote do Sistema","text":"<p>No Ubuntu:</p> <pre><code>sudo apt install -y libldap2-dev libsasl2-dev libssl-dev\n</code></pre> <p>No CentOS:</p> <pre><code>sudo yum install -y openldap-devel\n</code></pre>"},{"location":"installation/6-ldap/#instalando-django-auth-ldap","title":"Instalando django-auth-ldap","text":"<p>Ative o ambiente virtual do Python e instale o pacote <code>django-auth-ldap</code> utilizando o pip:</p> <pre><code>source /opt/netbox/venv/bin/activate\npip3 install django-auth-ldap\n</code></pre> <p>Uma vez instalado, adicione os pacotes em <code>local_requirements.txt</code> para garantir que seja re-instalado durante rebuilds futuros (como Upgrades) do ambiente virutal: Once installed, add the package to <code>local_requirements.txt</code> to ensure it is re-installed during future rebuilds of the virtual environment:</p> <pre><code>sudo sh -c \"echo 'django-auth-ldap' &gt;&gt; /opt/netbox/local_requirements.txt\"\n</code></pre>"},{"location":"installation/6-ldap/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Primeiro, habilite o backend de autentica\u00e7\u00e3o do LDAP em <code>configuration.py</code>. (Tenha certeza de n\u00e3o sobescrever essa defini\u00e7\u00e3o caso j\u00e1 tenha configurado o <code>RemoteUserBackend</code>.)</p> <pre><code>REMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend'\n</code></pre> <p>Agora, crie o arquivo no mesmo diret\u00f3rio do <code>configuration.py</code> (normalmente <code>/opt/netbox/netbox/netbox/</code>) com o nome de <code>ldap_config.py</code>. Defina todos os par\u00e2metros necess\u00e1rios abaixo em <code>ldap_config.py</code>. Documenta\u00e7\u00e3o completa de todas as op\u00e7\u00f5es de configura\u00e7\u00e3o do <code>django-auth-ldap</code> est\u00e3o inclusos na documenta\u00e7\u00e3o oficial do projeto.</p>"},{"location":"installation/6-ldap/#configuracao-geral-do-servidor","title":"Configura\u00e7\u00e3o Geral do Servidor","text":"<p>Info</p> <p>When using Active Directory you may need to specify a port on <code>AUTH_LDAP_SERVER_URI</code> to authenticate users from all domains in the forest. Use <code>3269</code> for secure, or <code>3268</code> for non-secure access to the GC (Global Catalog).</p> <p>Quando o Active Directory for utilizado, voc\u00ea talvez queria especificar a porta em <code>AUTH_LDAP_SERVER_URI</code> para autenticar os usu\u00e1rios de todos os dom\u00ednios na forest (floresta). Use a porta <code>3269</code> para uso seguro, ou <code>3268</code> para acesso n\u00e3o seguro ao GC (Global Catalog).</p> <pre><code>import ldap\n\n# URI do Servidor\nAUTH_LDAP_SERVER_URI = \"ldaps://ad.example.com\"\n\n# A configura\u00e7\u00e3o abaixo pode ser necess\u00e1ria se voc\u00ea estiver associando com o Active Directory.\nAUTH_LDAP_CONNECTION_OPTIONS = {\n    ldap.OPT_REFERRALS: 0\n}\n\n# Configure a senha e DN para conta de servi\u00e7o do NetBox\nAUTH_LDAP_BIND_DN = \"CN=NETBOXSA, OU=Service Accounts,DC=example,DC=com\"\nAUTH_LDAP_BIND_PASSWORD = \"demo\"\n\n# Inclua essa configura\u00e7\u00e3o se voc\u00ea quiser ignorar os erros de certificado. Isso talvez seja necess\u00e1rio para aceitar arquivos self-signed (auto-assinados).\n# Observe que isso \u00e9 uma configura\u00e7\u00e3o espec\u00edfica do NetBox que define:\n#     ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)\nLDAP_IGNORE_CERT_ERRORS = True\n\n# Inclua essa configura\u00e7\u00e3o se voc\u00ea quiser validar os certificados do servidor LDAP contra o diret\u00f3rio de certificado CA no seu servidor\n# Observe que isso \u00e9 uma configura\u00e7\u00e3o espec\u00edfica do NetBox que define:\n#     ldap.set_option(ldap.OPT_X_TLS_CACERTDIR, LDAP_CA_CERT_DIR)\nLDAP_CA_CERT_DIR = '/etc/ssl/certs'\n\n# Inclua essa configura\u00e7\u00e3o se voc\u00ea quiser validar os certificados do servidor LDAP contra sua pr\u00f3pria CA (Certificate Authority).\n# Observe que isso \u00e9 uma configura\u00e7\u00e3o espec\u00edfica do NetBox que define:\n#     ldap.set_option(ldap.OPT_X_TLS_CACERTFILE, LDAP_CA_CERT_FILE)\nLDAP_CA_CERT_FILE = '/path/to/example-CA.crt'\n</code></pre> <p>STARTTLS pode ser configurado pela configura\u00e7\u00e3o <code>AUTH_LDAP_START_TLS = True</code> e usando o esquema da URI <code>ldap://</code>.</p>"},{"location":"installation/6-ldap/#autenticacao-do-usuario","title":"Autentica\u00e7\u00e3o do Usu\u00e1rio","text":"<p>Info</p> <p>Quando estiver utilizando um Windows Server 2012+, <code>AUTH_LDAP_USER_DN_TEMPLATE</code> deve ser <code>None</code>.</p> <pre><code>from django_auth_ldap.config import LDAPSearch\n\n# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's\n# username is not in their DN (Active Directory).\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\"ou=Users,dc=example,dc=com\",\n                                    ldap.SCOPE_SUBTREE,\n                                    \"(sAMAccountName=%(user)s)\")\n\n# If a user's DN is producible from their username, we don't need to search.\nAUTH_LDAP_USER_DN_TEMPLATE = \"uid=%(user)s,ou=users,dc=example,dc=com\"\n\n# You can map user attributes to Django attributes as so.\nAUTH_LDAP_USER_ATTR_MAP = {\n    \"first_name\": \"givenName\",\n    \"last_name\": \"sn\",\n    \"email\": \"mail\"\n}\n</code></pre>"},{"location":"installation/6-ldap/#user-groups-for-permissions","title":"User Groups for Permissions","text":"<p>Info</p> <p>When using Microsoft Active Directory, support for nested groups can be activated by using <code>NestedGroupOfNamesType()</code> instead of <code>GroupOfNamesType()</code> for <code>AUTH_LDAP_GROUP_TYPE</code>. You will also need to modify the import line to use <code>NestedGroupOfNamesType</code> instead of <code>GroupOfNamesType</code> .</p> <pre><code>from django_auth_ldap.config import LDAPSearch, GroupOfNamesType\n\n# Essa pesquisa deve retornar todos os grupos que o usu\u00e1rio pertence. django_auth_ldap usa isso para determinar a hier\u00e1rquia do grupo.\nAUTH_LDAP_GROUP_SEARCH = LDAPSearch(\"dc=example,dc=com\", ldap.SCOPE_SUBTREE,\n                                    \"(objectClass=group)\")\nAUTH_LDAP_GROUP_TYPE = GroupOfNamesType()\n\n# Define o grupo exigido para logar.\nAUTH_LDAP_REQUIRE_GROUP = \"CN=NETBOX_USERS,DC=example,DC=com\"\n\n# Espelha a associa\u00e7\u00e3o de grupos do LDAP\nAUTH_LDAP_MIRROR_GROUPS = True\n\n# Defien tipos especiais de grupos de usu\u00e1rios. Tenha bastante cuidado ao atrelar status de superuser.\nAUTH_LDAP_USER_FLAGS_BY_GROUP = {\n    \"is_active\": \"cn=active,ou=groups,dc=example,dc=com\",\n    \"is_staff\": \"cn=staff,ou=groups,dc=example,dc=com\",\n    \"is_superuser\": \"cn=superuser,ou=groups,dc=example,dc=com\"\n}\n\n# Para permiss\u00f5es mais granulares, n\u00f3s podemos mapear os grupos do LDAP com os grupos do Django.\nAUTH_LDAP_FIND_GROUP_PERMS = True\n\n# Realiza o cache de grupos por uma hora para reduzir o tr\u00e1fego LDAP\nAUTH_LDAP_CACHE_TIMEOUT = 3600\n</code></pre> <ul> <li><code>is_active</code> - Todos os usu\u00e1rios devem ser mapeados com ao menos esse grupo para habilitar autentica\u00e7\u00e3o. Sem isso, usu\u00e1rios n\u00e3o podem realizar o login.</li> <li><code>is_staff</code> - Os usu\u00e1rios mapeados com esse grupo t\u00eam a permiss\u00e3o de ferramentas de administra\u00e7\u00e3o; isso \u00e9 o equivalete a habilitar o box de \"staff status\" manualmente ao criar um usu\u00e1rio. Isso n\u00e3o garante qualquer permiss\u00e3o espec\u00edfica.</li> <li><code>is_superuser</code> - Usu\u00e1rios mapeados com esse grupo receber\u00e3o o status de superuser. Superuses tem todas as permiss\u00f5es garantidas de forma impl\u00edcita.</li> </ul> <p>Warning</p> <p>A autentica\u00e7\u00e3o ir\u00e1 falhar se os grupos (com os nomes diferentes) n\u00e3o existirem no diret\u00f3rio LDAP.</p>"},{"location":"installation/6-ldap/#resolvendo-problemas-do-ldap","title":"Resolvendo Problemas do LDAP","text":"<p><code>systemctl restart netbox</code> reinicia o servi\u00e7o do NetBox e ativa quaisquer altera\u00e7\u00f5es feitas em <code>ldap_config.py</code>. Se houver erros de sintaxe, o processo do NetBox n\u00e3o ir\u00e1 criar uma inst\u00e2ncia e erros ser\u00e3o registrados como mensagens de log em <code>/var/log/messages</code>.</p> <p>Para resolver os problemas de busca/pesquisa do LDAP, adicione e una (merge) a seguinte confiugra\u00e7\u00e3o logging em <code>configuration.py</code></p> <pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'netbox_auth_log': {\n            'level': 'DEBUG',\n            'class': 'logging.handlers.RotatingFileHandler',\n            'filename': '/opt/netbox/local/logs/django-ldap-debug.log',\n            'maxBytes': 1024 * 500,\n            'backupCount': 5,\n        },\n    },\n    'loggers': {\n        'django_auth_ldap': {\n            'handlers': ['netbox_auth_log'],\n            'level': 'DEBUG',\n        },\n    },\n}\n</code></pre> <p>Garanta que o arquivo e caminho (path) especificados no arquivo de log existem e s\u00e3o \"grav\u00e1veis\" (writable) e execut\u00e1veis pela conta de servi\u00e7o da aplica\u00e7\u00e3o. Reinicie o servi\u00e7o do NetBox para tentar realizar o login ao site para registrar entradas de log ao arquivo.</p>"},{"location":"installation/upgrading/","title":"Fazendo Upgrade do NetBox para \u00daltima Vers\u00e3o","text":"<p>Fazer o upgrade do NetBox para uma nova vers\u00e3o \u00e9 bem simples, no entanto usu\u00e1rios devem ter cautela para sempre analisar as notas das vers\u00f5es e salvar o backup do seu ambiente atual de produ\u00e7\u00e3o antes de iniciar o upgrade.</p> <p>NetBox can generally be upgraded directly to any newer release with no interim steps, with the one exception being incrementing major versions. This can be done only from the most recent minor release of the major version. For example, NetBox v2.11.8 can be upgraded to version 3.3.2 following the steps below. However, a deployment of NetBox v2.10.10 or earlier must first be upgraded to any v2.11 release, and then to any v3.x release. (This is to accommodate the consolidation of database schema migrations effected by a major version change).</p> <p>O NetBox geralmente pode ser atualizado diretamente para qualquer nova vers\u00e3o sem passos intermedi\u00e1rios, com uma exce\u00e7\u00e3o sendo quando vers\u00f5es incremetais major. Essa atualiza\u00e7\u00e3o direta pode ser feita da vers\u00e3o minor mais recente para a vers\u00e3o major. Por exemplo, NetBox v2.11.8 pode ser atualizado para a vers\u00e3o 3.3.2 seguindo os passos abaixo. No entanto, o deployment de uma vers\u00e3o v2.10.10 do NetBoux ou mais atngai deve primeiro ser atualizada para qualqeur vers\u00e3o v2.11 e ent\u00e3o para qualquer vers\u00e3o v3.x. (Isso \u00e9 para acomodar a consolida\u00e7\u00e3o do esquema de migra\u00e7\u00f5es do banco de dados que foram afetadas por uma mudan\u00e7\u00e3 de vers\u00e3o grande (major)).</p> <p></p> <p>Warning</p> <p>Sempre tenha certeza de ser um backup salvo do seu NetBox de produ\u00e7\u00e3o atual antes de come\u00e7ar o processo de backup.</p>"},{"location":"installation/upgrading/#1-avalisando-as-notas-de-versoes-release-notes","title":"1. Avalisando as Notas de Vers\u00f5es (Release Notes)","text":"<p>Antes de realizar o upgrade da sua inst\u00e2ncia do NetBox, certifique-se de cuidadosamente ler todos os release notes que foram publicados desde sua vers\u00e3o atual. Embora o processo de upgrade normalmente n\u00e3o envolva trabalho adicional, certas vers\u00f5es podem introduzir mudan\u00e7as que quebram alguma coisa ou que removem compatibilidade com vers\u00f5es muito antigas. Essas mudan\u00e7as s\u00e3o registradas no release notes abaixo da vers\u00e3o em que ela afeta.</p>"},{"location":"installation/upgrading/#2-atualizando-as-dependencias-para-as-versoes-exigidas","title":"2. Atualizando as Depend\u00eancias para as Vers\u00f5es Exigidas","text":"<p>NetBox v3.0 ou maior exige as seguintes vers\u00f5es de depend\u00eancias:</p> Depend\u00eancia Vers\u00e3o M\u00ednima Python 3.8 PostgreSQL 11 Redis 4.0"},{"location":"installation/upgrading/#3-instalando-a-versao-mais-atual","title":"3. Instalando a Vers\u00e3o mais Atual","text":"<p>Assim como na instala\u00e7\u00e3o inicial, voc\u00ea pode fazer o upgrade do NetBox seja fazendo o download do pacote com a \u00faltima vers\u00e3o ou fazendo o clone do ramo (branch) <code>master</code> do reposit\u00f3rio git.</p> <p>Warning</p> <p>Utilize o mesmo m\u00e9todo como voc\u00ea usou para instalar o NetBox originalmente</p> <p>Se voc\u00ea n\u00e3o tem certeza de que como instalou o NetBox, verifique com esse comando:</p> <pre><code>ls -ld /opt/netbox /opt/netbox/.git\n</code></pre> <p>Se voc\u00ea instalou de um pacote, ent\u00e3o <code>/opt/netbox</code> ser\u00e1 um link simb\u00f3lico apontando para a vers\u00e3o atual e <code>/opt/netbox/.git</code> n\u00e3o ir\u00e1 existir. Se voc\u00ea instalou do git, ent\u00e3o <code>/opt/netbox</code> e <code>/opt/netbox/.git</code> existir\u00e3o como diret\u00f3rios normais.</p>"},{"location":"installation/upgrading/#opcao-a-fazendo-o-download-da-versao-release","title":"Op\u00e7\u00e3o A: Fazendo o Download da Vers\u00e3o (Release)","text":"<p>Fa\u00e7a o download da \u00faltima vers\u00e3o est\u00e1vel do GitHub como um arquivo tarball ou ZIP. Extraia-o no caminho (path) desejado. Nesse exemplo, utilizaremos <code>/opt/netbox</code>.</p> <p>Fazendo o download e extraindo para a \u00faltima vers\u00e3o:</p> <pre><code>wget https://github.com/netbox-community/netbox/archive/vX.Y.Z.tar.gz\nsudo tar -xzf vX.Y.Z.tar.gz -C /opt\nsudo ln -sfn /opt/netbox-X.Y.Z/ /opt/netbox\n</code></pre> <p>Copie <code>local_requirements.txt</code>, <code>configuration.py</code> e <code>ldap_config.py</code> (se existir) da instala\u00e7\u00e3o atual para a nova vers\u00e3o:</p> <pre><code>sudo cp /opt/netbox-X.Y.Z/local_requirements.txt /opt/netbox/\nsudo cp /opt/netbox-X.Y.Z/netbox/netbox/configuration.py /opt/netbox/netbox/netbox/\nsudo cp /opt/netbox-X.Y.Z/netbox/netbox/ldap_config.py /opt/netbox/netbox/netbox/\n</code></pre> <p>Tenha certeza de replicar as m\u00eddias que subiu ao sistema tamb\u00e9m. (A a\u00e7\u00e3o necess\u00e1ria ir\u00e1 depender de como voc\u00ea escolheu armazenar as m\u00eddias, mas em geral mover ou copiar os arquivos do diret\u00f3rio de media (m\u00eddia) \u00e9 suficiente).</p> <pre><code>sudo cp -pr /opt/netbox-X.Y.Z/netbox/media/ /opt/netbox/netbox/\n</code></pre> <p>Tamb\u00e9m certifique-se de copiar ou fazer o link de qualquer script customizado que voc\u00ea tenha feito. Observe que se estiverem armazenados fora do root do projeto, voc\u00ea n\u00e3o precisar copi\u00e1-los. (Verifique os par\u00e2metros <code>SCRIPTS_ROOT</code> e <code>REPORTS_ROOT</code> no arquivo de configura\u00e7\u00e3o acima se estiver incerto.)</p> <pre><code>sudo cp -r /opt/netbox-X.Y.Z/netbox/scripts /opt/netbox/netbox/\nsudo cp -r /opt/netbox-X.Y.Z/netbox/reports /opt/netbox/netbox/\n</code></pre> <p>Se voc\u00ea seguiu o guia de instala\u00e7\u00e3o original para configurar o gunicor, tenha certeza de copiar sua configura\u00e7ao tamb\u00e9m:</p> <pre><code>sudo cp /opt/netbox-X.Y.Z/gunicorn.py /opt/netbox/\n</code></pre>"},{"location":"installation/upgrading/#opcao-b-clonando-o-repositorio-git","title":"Op\u00e7\u00e3o B: Clonando o reposit\u00f3rio Git","text":"<p>Esse guia assume que o NetBox foi instalado em <code>/opt/netbox</code>. Puxe (pull) a intera\u00e7\u00e3o mais recente do ramo (branch0) master:</p> <pre><code>cd /opt/netbox\nsudo git checkout master\nsudo git pull origin master\n</code></pre> <p>Info</p> <p>Se voc\u00ea precisa fazer o upgrade de uma vers\u00e3o mais antiga ao inv\u00e9s da vers\u00e3o atual est\u00e1vel, voc\u00ea pode verificar por qualquer tag do git v\u00e1lida, cada uma representa uma vers\u00e3o. Por exemplo, para mudar (checkout) o c\u00f3digo para a vers\u00e3o v2.11.11 do NetBox, use:</p> <pre><code>sudo git checkout v2.11.11\n</code></pre>"},{"location":"installation/upgrading/#4-rodando-o-script-de-upgrade","title":"4. Rodando o Script de Upgrade","text":"<p>Uma vez que novo c\u00f3digo esteja no lugar, verifique qualquer pacote Python opcional exigido pelo seu deployment em espec\u00edfico (como <code>napalm</code> ou <code>django-auth-ldap</code>) est\u00e3o listados dentro de <code>local_requirements.txt</code>.</p> <pre><code>sudo ./upgrade.sh\n</code></pre> <p>Warning</p> <p>Se a vers\u00e3o padr\u00e3o do Python n\u00e3o for ao menos a 3.8, voc\u00ea precisar passar o caminho (path) para uma vers\u00e3o Python suportada como uma vari\u00e1vel de ambiente quando for utilizar o script de upgrade.</p> <pre><code>sudo PYTHON=/usr/bin/python3.8 ./upgrade.sh\n</code></pre> <p>Esse script realiza as seguintes a\u00e7\u00f5es:</p> <ul> <li>Destr\u00f3i e rebuilda o ambiente virtual do Python (venv)</li> <li>Instala todos os pacotes necess\u00e1rios do Python (listados em <code>requirements.txt</code>)</li> <li>Instala qualquer pacote Python adicional listado em <code>local_requirements.txt</code></li> <li>Aplica qualquer migra\u00e7\u00e3o do banco de dados inclusa nessa vers\u00e3o</li> <li>Faz o build da documenta\u00e7\u00e3o localmente (para uso em offline)</li> <li>Coleta (collects) todos os arquivos est\u00e1ticos (static files) para serem servidos pelo servi\u00e7o HTTP</li> <li>Deleta tipos de conte\u00fado velhos (stales) do banco de dados</li> <li>Deleta todas as sess\u00f5es de usu\u00e1rio expiradas do banco de dados.</li> </ul> <p>Note</p> <p>Se o script de upgrade alertar sobre migra\u00e7\u00f5es do banco de dados n\u00e3o realizadas, isso indica que algumas mudan\u00e7as foram feitas no seu banco de dados local e deve ser investigado. Nunca tente criar novas migra\u00e7\u00f5es ao menos que voc\u00ea intencionalmente esteja modificando o esquema do banco de dados.</p>"},{"location":"installation/upgrading/#5-reiniciando-o-servico-do-netbox","title":"5. Reiniciando o Servi\u00e7o do NetBox","text":"<p>Warning</p> <p>Se voc\u00ea estiver fazendo o upgrade de uma instala\u00e7\u00e3o que n\u00e3o usa o ambiente virtual do Python (venv), ou seja, qualquer vers\u00e3o anterior a v2.7.9, voc\u00ea precisar\u00e1 atualizar os arquivos de servi\u00e7o do systemd para referenciar os execut\u00e1veis novos do Python e do gunicorn antes de reiniciar os servi\u00e7os. Eles est\u00e3o localizados em <code>/opt/netbox/venv/bin</code>. Veja o arquivo de servi\u00e7o em <code>/opt/netbox/contrib</code> como refer\u00eancia.</p> <p>Finalmente, reinicie os servi\u00e7os do gunicorn e RQ:</p> <pre><code>sudo systemctl restart netbox netbox-rq\n</code></pre>"},{"location":"installation/upgrading/#6-verificando-o-agendamento-de-housekeeping-limpeza","title":"6. Verificando o Agendamento de Housekeeping (Limpeza)","text":"<p>Se estiver atualizando de uma vers\u00e3o anterior a v3.0, verifique a tarefa do cron (ou um processo agendado similar) que foi configurado para rodar o comando noturno de housekeeping. Um shell script que utiliza o comando est\u00e1 incluso em <code>contrib/netbox-housekeeping.sh</code>. Ele pode ser linkado do seu diret\u00f3rio de tarefas di\u00e1rias, ou configurado dentro do diret\u00f3rio do crontab diretamente. (Se o NetBox foi instalado em um caminho (path) n\u00e3o padr\u00e3o (nonstandard), ceritique-se de atualizar os caminhos (paths) do sistema dentro do script primeiro.)</p> <pre><code>sudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping\n</code></pre> <p>Verifique a documenta\u00e7\u00e3o de housekeeping para mais detalhes.</p>"},{"location":"integrations/graphql-api/","title":"Vis\u00e3o Geral sobre a API GraphQL","text":"<p>O NetBox fornece uma API GraphQL de leitura (read-only) para complementar a API REST. A API \u00e9 fornecida pela biblioteca Graphene e Graphene-Django.</p>"},{"location":"integrations/graphql-api/#buscas-queries","title":"Buscas (Queries)","text":"<p>O GraphQL permite que o cliente especifique uma lista aninhada arbitr\u00e1ria de campos para serem inclusos na resposta. Todas as queries s\u00e3o feitas para o endpoint root da API <code>/graphql</code>. Por exemplo, para retornar o ID do circuito e o nome do fornecedor (provider) de cada circuito com um status active (ativo), voc\u00ea pode utilizar uma requisi\u00e7\u00e3o como a abaixo:</p> <pre><code>curl -H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\nhttp://netbox/graphql/ \\\n--data '{\"query\": \"query {circuit_list(status:\\\"active\\\") {cid provider {name}}}\"}'\n</code></pre> <p>A resposta incluir\u00e1 os dados requisitados formatados em JSON:</p> <pre><code>{\n\"data\": {\n\"circuits\": [\n{\n\"cid\": \"1002840283\",\n\"provider\": {\n\"name\": \"CenturyLink\"\n}\n},\n{\n\"cid\": \"1002840457\",\n\"provider\": {\n\"name\": \"CenturyLink\"\n}\n}\n]\n}\n}\n</code></pre> <p>Note</p> <p>\u00c9 recomendado passar os dados retornados atrav\u00e9s de um parser JSON como o <code>jq</code> para uma melhor leitura.</p> <p>O NetBox fornece tanto uma query singular ou plural de campos para cada tipo de objeto:</p> <ul> <li><code>$OBJECT</code>: Retorna um objeto \u00fanico. Deve especificar o ID \u00fanico do objeto como <code>(id: 123)</code>.</li> <li><code>$OBJECT_list</code>: Retorna uma lista de objetos, opcionalmente filtrados pelos par\u00e2metros fornecidos.</li> </ul> <p>Por exemplo, utilize <code>device(id:123)</code> para obter um dispositivo espec\u00edfico (identificado pelo seu ID \u00fanico, e busque por <code>device_list</code> (com um grupo de filtros opcionais) para obter todos os dispositivos.</p> <p>Para mais detalhes sobre a constru\u00e7\u00e3o de queries GraphQL, veja a documenta\u00e7\u00e3o do Graphene, assim como a documenta\u00e7\u00e3o de queries do GraphQL.</p>"},{"location":"integrations/graphql-api/#filtrando","title":"Filtrando","text":"<p>A API do GraphQL utiliza a mesma l\u00f3gica de filtros como a interface web (UI) e a API REST. Filtros podem especificados por pares de chave-valor (key-value) dentro de par\u00eanteses imediatamente seguido do nome da busca (query name). Por exemplo, o exemplo abaixo ir\u00e1 retornar somente os sites dentro da regi\u00e3o North Carolina com o status de active:</p> <pre><code>{\"query\": \"query {site_list(region:\\\"north-carolina\\\", status:\\\"active\\\") {name}}\"}\n</code></pre> <p>Al\u00e9m disso, filtros podem ser feitos em uma lista de objetos relacionados como mostrado na query abaixo:</p> <pre><code>{\n  device_list {\n    id\n    name\n    interfaces(enabled: true) {\n      name\n    }\n  }\n}\n</code></pre>"},{"location":"integrations/graphql-api/#multiplos-tipos-de-retorno-return-types","title":"M\u00faltiplos Tipos de Retorno (Return Types)","text":"<p>Certas queries podem retornar m\u00faltiplos tipos de objetos, por exemplo, a termina\u00e7\u00e3o de cabos podem retornar a termina\u00e7\u00e3o de circuitos, portas console e muitas outras. Elas podem ser buscadas utilizando inline fragments como mostrado abaixo:</p> <pre><code>{\n    cable_list {\n      id\n      a_terminations {\n        ... on CircuitTerminationType {\n          id\n          class_type\n        }\n        ... on ConsolePortType {\n          id\n          class_type\n        }\n        ... on ConsoleServerPortType {\n          id\n          class_type\n        }\n      }\n    }\n}\n</code></pre> <p>O campo \"class_type\" \u00e9 uma maneira f\u00e1cil de distinguir qual tipo de objeto est\u00e1 sendo utilizado ao visualizar os dados retornados, ou quando estiver filtrando. Cont\u00e9m o nome da classe, por exemplo \"CircuitTermination\" ou \"ConsoleServerPort\".</p>"},{"location":"integrations/graphql-api/#autenticacao-authentication","title":"Autentica\u00e7\u00e3o (Authentication)","text":"<p>A API do GraphQL utiliza os mesmos tokens de autentica\u00e7\u00e3o que a API REST. Tokens de autentica\u00e7\u00e3o s\u00e3o incluidos dentro da requisi\u00e7\u00e3o ao colocar o cabe\u00e7alho HTTP <code>Authorization</code> dentro do formul\u00e1rio a seguir:</p> <pre><code>Authorization: Token $TOKEN\n</code></pre>"},{"location":"integrations/graphql-api/#desabilitando-a-api-graphql","title":"Desabilitando a API GraphQL","text":"<p>Se n\u00e3o necess\u00e1ria, a API do GraphQL pode ser desabilitada ao configurar o par\u00e2metro de configura\u00e7\u00e3o <code>GRAPHQL_ENABLED</code> para <code>False</code> e reiniciar o NetBox.</p>"},{"location":"integrations/napalm/","title":"NAPALM","text":"<p>O NetBox suporta integra\u00e7\u00e3o com a biblioteca de automa\u00e7\u00e3o NAPALM. O NAPALM permite que o NetBox sirva como um proxy de dados operacionais, obtendo os dados \"ao vivo\" (live data) dos dispositivos da rede, retornando ao requisitor via API REST. Observe que o NetBox n\u00e3o suporta qualquer dados NAPALM localmente.</p> <p>O NetBox UI (interface web) mostra tabs para o status, vizinhos LLDP e a configura\u00e7\u00e3o abaixo a visualiza\u00e7\u00e3o do dispositivo se as seguintes condi\u00e7\u00f5es estiverem em conformidade:</p> <ul> <li>O status do Dispositivo est\u00e1 como \"Active\"</li> <li>Um endere\u00e7o IP prim\u00e1rio foi atribu\u00eddo ao dispositivo</li> <li>Uma plataforma com driver NAPALM foi atribu\u00eddo</li> <li>O usu\u00e1rio est\u00e1 autenticado com a permiss\u00e3o <code>dcim.napalm_read_device</code></li> </ul> <p>Note</p> <p>Para habilitar essa integra\u00e7\u00e3o, a biblioteca do NAPALM deve estar instalada. Verifique o processo de instala\u00e7\u00e3o para mais informa\u00e7\u00f5es.</p> <p>Abaixo est\u00e1 um exemplo de requisi\u00e7\u00e3o via API REST e sua resposta:</p> <pre><code>GET /api/dcim/devices/1/napalm/?method=get_environment\n\n{\n    \"get_environment\": {\n        ...\n    }\n}\n</code></pre> <p>Note</p> <p>Para realizar uma requisi\u00e7\u00e3o NAPALM utilizando a API REST, um usu\u00e1rio do NetBox deve ter atrelado a permiss\u00e3o de a\u00e7\u00e3o <code>napalm_read</code> para o tipo de dispositivo. </p>"},{"location":"integrations/napalm/#autenticacao-authentication","title":"Autentica\u00e7\u00e3o (Authentication)","text":"<p>Por padr\u00e3o, os par\u00e2metros de configura\u00e7\u00e3o <code>NAPALM_USERNAME</code> e <code>NAPALM_PASSWORD</code> ser\u00e3o usados para autentica\u00e7\u00e3o do NAPALM. Eles podem sobrepor uma chamada de API individual especificando os cabe\u00e7alhos <code>X-NAPALM-Username</code> e <code>X-NAPALM-Password</code>.</p> <pre><code>$ curl \"http://localhost/api/dcim/devices/1/napalm/?method=get_environment\" \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\n-H \"X-NAPALM-Username: foo\" \\\n-H \"X-NAPALM-Password: bar\"\n</code></pre>"},{"location":"integrations/napalm/#suporte-de-metodo-method-support","title":"Suporte de M\u00e9todo (Method Support)","text":"<p>A lista de m\u00e9todos NAPALM suportados dependem do driver do NAPALM configurados para a plataforma (platform) do dispositivo. Porque n\u00e3o existe um mecanismo granular para limitar requisi\u00e7\u00f5es com potenciais disruptivos (que podem prejudicar a rede), o NetBox suporta somente m\u00e9todo do tipo get (somente leitura / read-only).</p>"},{"location":"integrations/napalm/#multiplos-metodos","title":"M\u00faltiplos M\u00e9todos","text":"<p>\u00c9 poss\u00edvel requisitar a sa\u00edda (output) de m\u00faltiplos m\u00e9todos NAPALM em uma \u00fanica requisi\u00e7\u00e3o API ao passar diversos par\u00e2metros <code>method</code>. Por exemplo:</p> <pre><code>GET /api/dcim/devices/1/napalm/?method=get_ntp_servers&amp;method=get_ntp_peers\n\n{\n    \"get_ntp_servers\": {\n        ...\n    },\n    \"get_ntp_peers\": {\n        ...\n    }\n}\n</code></pre>"},{"location":"integrations/napalm/#argumentos-opcionais","title":"Argumentos Opcionais","text":"<p>O comportamento dos drivers do NAPALM podem ser justados de acordo os argumentos opcionais. NetBox exp\u00f5e esses argumentos utilizando os cabe\u00e7alhos prefixados com <code>X-NAPALM-</code>. Por exemplo, a porta SSH \u00e9 mudada para 2222 nesta chamada API:</p> <pre><code>$ curl \"http://localhost/api/dcim/devices/1/napalm/?method=get_environment\" \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\n-H \"X-NAPALM-port: 2222\"\n</code></pre>"},{"location":"integrations/prometheus-metrics/","title":"M\u00e9tricas do Prometheus","text":"<p>O NetBox suporta opcionalmente export as m\u00e9tricas do Prometheus nativas da aplica\u00e7\u00e3o. Prometheus \u00e9 uma plataforma de m\u00e9trica popular de time series utilizada para monitoramento.</p> <p>O NetBox exp\u00f5e m\u00e9tricas no endpoint HTTP <code>/metrics</code>, por exemplo: <code>https://netbox.local/metrics</code>. A exposi\u00e7\u00e3o de m\u00e9tricas podem ser habilitadas atrav\u00e9s da configura\u00e7\u00e3o <code>METRICS_ENABLED</code>. M\u00e9tricas n\u00e3o s\u00e3o expostas por padr\u00e3o.</p>"},{"location":"integrations/prometheus-metrics/#tipos-de-metricas","title":"Tipos de M\u00e9tricas","text":"<p>O NetBox utiliza a biblioteca django-prometheus para exportar um n\u00famero de diferentes tipos de m\u00e9tricas, incluindo:</p> <ul> <li>Contadores de inser\u00e7\u00e3o, atualiza\u00e7\u00e3o e remo\u00e7\u00e3o por modelo</li> <li>Contadores de requisi\u00e7\u00e3o por view (p\u00e1gina)</li> <li>Histograma de lat\u00eancia por requisi\u00e7\u00e3o de view (p\u00e1gina)</li> <li>Histograma do tamanho do corpo (body) da requisi\u00e7\u00e3o</li> <li>Histograma do tamanho do corpo (body) da resposta</li> <li>Contadores de c\u00f3digo de resposta</li> <li>Conex\u00e3o com o banco de dados, execu\u00e7\u00e3o e contadores de erros</li> <li>Cache hit (uso de cache), miss (perda) e contadores de invalida\u00e7\u00e3o (invalidation)</li> <li>Histogramas da lat\u00eancia do middleware Django</li> <li>Outras m\u00e9tricas de metadados relacionadas com o Django</li> </ul> <p>Para uma lista completa das m\u00e9tricas expostas, visite o endpoint <code>/metrics</code> na sua inst\u00e2ncia do NetBox.</p>"},{"location":"integrations/prometheus-metrics/#observacoes-sobre-multi-processamento","title":"Observa\u00e7\u00f5es Sobre Multi Processamento","text":"<p>Ao subir o NetBox de uma maneira multi-processo (como ao rodar m\u00faltiplos workers do Gunicorn), a biblioteca cliente do Prometheus exige o uso de um diret\u00f3rio compartilhado para a coleta das m\u00e9tricas de todos os processos de workers. Para configurar isso, primeiro crie ou designe um diret\u00f3rio local no qual os processos de worker tem permiss\u00e3o de leitura, ent\u00e3o configure seu servi\u00e7o WSGI (como o Gunicorn) para definir o caminho (path) do diret\u00f3rio na vari\u00e1vel de ambiente <code>prometheus_multiproc_dir</code>.</p> <p>Warning</p> <p>Se n\u00e3o ter m\u00e9tricas de longo prazo com precis\u00e3o for crucial para o seu ambiente, \u00e9 recomendando utilizar a biblioteca <code>uwsgi</code> no lugar de <code>gunicorn</code>. O problema ocorre na forma como o <code>gunicorn</code> acompanha os processos dos workers (versus o <code>uwsgi</code>) que ajuda gerenciar os arquivos de m\u00e9tricas criados pelas configura\u00e7\u00f5es acima. Se voc\u00ea estiver usando o NetBox com o gunicorn em um ambiente que utiliza containers seguindo a metodologia um-processo-por-container (one-proccess-per-container), ent\u00e3o provavelmente n\u00e3o n\u00e3o precisa mudar para <code>uwsgi</code>. Mais detalhes podem ser encontrados em issue #3779.</p>"},{"location":"integrations/rest-api/","title":"Vis\u00e3o Geral da API REST","text":""},{"location":"integrations/rest-api/#o-que-e-uma-api-rest","title":"O que \u00e9 uma API REST?","text":"<p>REST significa representational state transfer (estado representacional de transfer\u00eancia). \u00c9 um tipo particular de API que utiliza as requisi\u00e7\u00f5es HTTP e JavaScript Object Notation (JSON) para facilitar as opera\u00e7\u00f5es de cria\u00e7\u00e3o, obten\u00e7\u00e3o, atualiza\u00e7\u00e3 oe remo\u00e7\u00e3o (CRUD) em objetos dentro de uma aplica\u00e7\u00e3o. Cada tipo de opera\u00e7\u00e3o \u00e9 associado com um verbo particular do HTTP:</p> <ul> <li><code>GET</code>: Obter um objeto ou lista de objetos</li> <li><code>POST</code>: Criar um objeto</li> <li><code>PUT</code> / <code>PATCH</code>: Modificar um objeto existente. <code>PUT</code> exige que todos os campos obrigat\u00f3rios sejam especificados, enquanto que <code>PATCH</code> apenas espera que somente os campos que est\u00e3o sendo modificados sejam especificados.</li> <li><code>DELETE</code>: Deletar um objeto existente</li> </ul> <p>Adicionalmente, o verbo <code>OPTIONS</code> podem ser usados para inspecionar um endpoint em particular da API REST e retornar todas as a\u00e7\u00f5es suportadas e seus par\u00e2metros dispon\u00edveis.</p> <p>Um dos benef\u00f3cios prim\u00e1rios de uma API REST \u00e9 ser amig\u00e1vel para ser utilizada por humanos. Porque utiliza HTTP e JSON, que s\u00e3o muito f\u00e1ceis de interagir com os dados do NetBox na linha de comando usando ferramentas conhecidas. Por exemplo, n\u00f3s podemos requisitar um endere\u00e7o IP do NetBox e obter a saida em JSON usando <code>curl</code> e <code>jq</code>. O comando seguinte faz uma requisi\u00e7\u00e3o HTTP do tipo <code>GET</code> para requisitar informa\u00e7\u00f5es sobre um endere\u00e7o IP em particular, identificado pela sua chave prim\u00e1ria, enquanto utiliza <code>jq</code> para apresentar os dados JSON \"puros\" retornados em um formato mais amig\u00e1vel. (Passar os dados em <code>jq</code> n\u00e3o \u00e9 estritamente obrigat\u00f3rio, mas torna os dados bem mais leg\u00edveis.)</p> <pre><code>curl -s http://netbox/api/ipam/ip-addresses/2954/ | jq '.'\n</code></pre> <pre><code>{\n\"id\": 2954,\n\"url\": \"http://netbox/api/ipam/ip-addresses/2954/\",\n\"family\": {\n\"value\": 4,\n\"label\": \"IPv4\"\n},\n\"address\": \"192.168.0.42/26\",\n\"vrf\": null,\n\"tenant\": null,\n\"status\": {\n\"value\": \"active\",\n\"label\": \"Active\"\n},\n\"role\": null,\n\"assigned_object_type\": \"dcim.interface\",\n\"assigned_object_id\": 114771,\n\"assigned_object\": {\n\"id\": 114771,\n\"url\": \"http://netbox/api/dcim/interfaces/114771/\",\n\"device\": {\n\"id\": 2230,\n\"url\": \"http://netbox/api/dcim/devices/2230/\",\n\"name\": \"router1\",\n\"display_name\": \"router1\"\n},\n\"name\": \"et-0/1/2\",\n\"cable\": null,\n\"connection_status\": null\n},\n\"nat_inside\": null,\n\"nat_outside\": null,\n\"dns_name\": \"\",\n\"description\": \"Example IP address\",\n\"tags\": [],\n\"custom_fields\": {},\n\"created\": \"2020-08-04\",\n\"last_updated\": \"2020-08-04T14:12:39.666885Z\"\n}\n</code></pre> <p>Cada atributo do endere\u00e7o IP \u00e9 expressado como um atributo de um objeto JSON. Campos podem incluir seus pr\u00f3prios objetos aninhados, como \u00e9 no caso do campo <code>assigned_object</code> acima. Todo objeto inclui uma chave prim\u00e1ria nomeada de <code>id</code> que unicamente identifica-o dentro do banco de dados.</p>"},{"location":"integrations/rest-api/#documentacao-interativa","title":"Documenta\u00e7\u00e3o Interativa","text":"<p>Uma documenta\u00e7\u00e3o completa e interativa de todos os endpoints da API REST est\u00e3o disnp\u00f3veis em uma inst\u00e2ncia rodando do NetBox em <code>/api/docs</code>. Essa interface fornece um sandbox conveniente para pesquisa e experimenta\u00e7\u00e3o de endpoints espec\u00edficos e os tipos de requsi\u00e7\u00e3o (request types). A API em si pode ser explorada utilizando um navegador ao navegar pelo root <code>/api/</code>.</p>"},{"location":"integrations/rest-api/#hierarquia-de-endpoints","title":"Hierarquia de Endpoints","text":"<p>A API REST inteira do NetBox \u00e9 hospedada abaixo do root da API em <code>https://&lt;hostname&gt;/&lt;api&gt;</code>. Essa estrutura de URL \u00e9 dividida no n\u00edvel root da aplica\u00e7\u00e3o: circuits, DCIM, extras, IPAM, plugins, tenancy, users, and virtualization. Dentro de cada aplica\u00e7\u00e3o, existe um caminho (path) separado de cada modelo.  Por exemplo, os objetos de provider e circuits est\u00e3o localizados abaixo da aplica\u00e7\u00e3o \"circuits\":</p> <ul> <li><code>/api/circuits/providers/</code></li> <li><code>/api/circuits/circuits/</code></li> </ul> <p>Da mesma forma, objetos de site, rack e device est\u00e3o localizados abaixo ad aplica\u00e7\u00e3o \"DCIM\":</p> <ul> <li><code>/api/dcim/sites/</code></li> <li><code>/api/dcim/racks/</code></li> <li><code>/api/dcim/devices/</code></li> </ul> <p>A hierarquia completa de endpoints dispon\u00edveis podem ser visualizadas ao navegar pelo root da API no navegador.</p> <p>Cada modelo geralmente tem duas visualiza\u00e7\u00f5es (views) associadas: a visualiza\u00e7\u00e3o de lista e a visualiza\u00e7\u00e3o detalhada. A visualiza\u00e7\u00e3o de lista \u00e9 utilizada para obter m\u00faltiplos objetos e criar novos objetos. A visualiza\u00e7\u00e3o detalhada \u00e9 utilizada para obter, atualizar ou deletar um objeto \u00fanico existente. Todos os objetos s\u00e3o referenciados pelo seu valor n\u00famero de chave prim\u00e1ria (primary key) nomeado de <code>id</code> ou <code>pk</code>.</p> <ul> <li><code>/api/dcim/devices/</code> - Lista os dispositivos existentes ou cria um novo dispositivo</li> <li><code>/api/dcim/devices/123/</code> - Obt\u00e9m, atualiza ou deleta um dispositivo com o ID 123</li> </ul> <p>Listas de objetos podem ser filtradas utilizando um grupo de par\u00e2metros de busca (query parameters). Por exemplo, para buscar todas as interfaces que pertencem ao dispositivo com ID 123:</p> <pre><code>GET /api/dcim/interfaces/?device_id=123\n</code></pre> <p>Veja a documenta\u00e7\u00e3o completa de filtros para mais detalhes.</p>"},{"location":"integrations/rest-api/#serializacao-serialization","title":"Serializa\u00e7\u00e3o (Serialization)","text":"<p>A API REST utiliza dois tipos de serializadores para representar cada modelo de dados: serializadores base e serializados aninhados. O serializador base \u00e9 utilizado para apresentar uma visualiza\u00e7\u00e3o completa de um modelo. Isso inclui todos os campos da tabela do banco de dados do modelo em espec\u00edfico, enquanto pode incluir metadado adicional. Um serializador base inclui relacionamento de objetos pais, mas n\u00e3o inclui objetos filhos. Por exemplo, <code>VLANSerializer</code> inclui uma representa\u00e7\u00e3o aninhada (nested) de seu <code>VLANGroup</code> pai (se houver um), mas n\u00e3o inclui qualquer <code>Prefixes</code> atrelado.</p> <pre><code>{\n\"id\": 1048,\n\"site\": {\n\"id\": 7,\n\"url\": \"http://netbox/api/dcim/sites/7/\",\n\"name\": \"Corporate HQ\",\n\"slug\": \"corporate-hq\"\n},\n\"group\": {\n\"id\": 4,\n\"url\": \"http://netbox/api/ipam/vlan-groups/4/\",\n\"name\": \"Production\",\n\"slug\": \"production\"\n},\n\"vid\": 101,\n\"name\": \"Users-Floor1\",\n\"tenant\": null,\n\"status\": {\n\"value\": 1,\n\"label\": \"Active\"\n},\n\"role\": {\n\"id\": 9,\n\"url\": \"http://netbox/api/ipam/roles/9/\",\n\"name\": \"User Access\",\n\"slug\": \"user-access\"\n},\n\"description\": \"\",\n\"display_name\": \"101 (Users-Floor1)\",\n\"custom_fields\": {}\n}\n</code></pre>"},{"location":"integrations/rest-api/#objetos-relacionados","title":"Objetos Relacionados","text":"<p>Objetos relacionados (como os campos de <code>ForeignKey</code>) s\u00e3o representados utilizando serializadores aninhados. E um serializador aninhado fornece uma representa\u00e7\u00e3o m\u00ednima de u m objeto, incluindo a URL direta e informa\u00e7\u00f5es suficientes para exibir o objeto ao usu\u00e1rio. Ao performar a\u00e7\u00f5es de escrita (write) na API (<code>POST</code>, <code>PUT</code> &amp; <code>PATCH</code>), objetos relacionados podem ser especificados seja pelo ID num\u00e9rico (primary key), ou por um grupo de atributos que s\u00e3o suficientemente \u00fanicos para retornar o objeto desejado.</p> <p>Por exemplo, ao criar um novo dispositivo, o rack pode ser especificado pelo ID do NetBox (PK):</p> <pre><code>{\n\"name\": \"MyNewDevice\",\n\"rack\": 123,\n...\n}\n</code></pre> <p>Ou por um grupo de atributos aninhados que identifica de forma \u00fanica o rack:</p> <pre><code>{\n\"name\": \"MyNewDevice\",\n\"rack\": {\n\"site\": {\n\"name\": \"Equinix DC6\"\n},\n\"name\": \"R204\"\n},\n...\n}\n</code></pre> <p>Observe que se os par\u00e2metros fornecidos n\u00e3o retornarem exatamente um \u00fanico objeto, um erro de valida\u00e7\u00e3o \u00e9 acionado.</p>"},{"location":"integrations/rest-api/#relacoes-genericas","title":"Rela\u00e7\u00f5es Gen\u00e9ricas","text":"<p>Alguns objetos dentro do NetBox t\u00eam atributos que podem referenciar um objeto de m\u00faltiplos tipos, conhecido como generic relations (relacionamento gen\u00e9rico). Por exemplo, um endere\u00e7o IP pode ser atribu\u00eddo para tanto para a interface de um dispositivo ou para a interface de uma m\u00e1quina virtual. Ao criar essa associa\u00e7\u00e3o pela API REST, n\u00f3s devemos especificar dois atributos:</p> <ul> <li><code>assigned_object_type</code> - O tipo do conte\u00fado do objeto atribu\u00eddo, definido como <code>&lt;app&gt;.&lt;model&gt;</code></li> <li><code>assigned_object_id</code> - O ID n\u00famerico e \u00fanico do objeto associado</li> </ul> <p>Juntos, esses valores identificam um objeto \u00fanico dentro do NetBox. O objeto associado (se houver) \u00e9 representado pelo atributo <code>assigned_object</code> no modelo do endere\u00e7o IP.</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox/api/ipam/ip-addresses/ \\\n--data '{\n    \"address\": \"192.0.2.1/24\",\n    \"assigned_object_type\": \"dcim.interface\",\n    \"assigned_object_id\": 69023\n}'\n</code></pre> <pre><code>{\n\"id\": 56296,\n\"url\": \"http://netbox/api/ipam/ip-addresses/56296/\",\n\"assigned_object_type\": \"dcim.interface\",\n\"assigned_object_id\": 69000,\n\"assigned_object\": {\n\"id\": 69000,\n\"url\": \"http://netbox/api/dcim/interfaces/69023/\",\n\"device\": {\n\"id\": 2174,\n\"url\": \"http://netbox/api/dcim/devices/2174/\",\n\"name\": \"device105\",\n\"display_name\": \"device105\"\n},\n\"name\": \"ge-0/0/0\",\n\"cable\": null,\n\"connection_status\": null\n},\n...\n}\n</code></pre> <p>Se queremos associar esse endere\u00e7o IP para a interface de uma m\u00e1quina virtual, ao inv\u00e9s, devemos mudar <code>assigned_object_type</code> para <code>virtualization.vminterface</code> e o ID do objeto que foi atualizado propriamente.</p>"},{"location":"integrations/rest-api/#formato-resumido-brief","title":"Formato Resumido (Brief)","text":"<p>A maioria dos endpoints da API suportam um formato opcional resumido (ou \"brief\") que retorna somente uma representa\u00e7\u00e3o m\u00ednima de cada objeto na resposta. Isso \u00e9 \u00fatil quando voc\u00ea precisa somente uma lista de objetos dispon\u00edveis sem seus dados relacioandos, como quando estiver populando uma lista drop-down em um formul\u00e1rio. Por exemplo, o formato padr\u00e3o (completo) de um endere\u00e7o IP \u00e9 algo como:</p> <pre><code>GET /api/ipam/prefixes/13980/\n\n{\n    \"id\": 13980,\n    \"url\": \"http://netbox/api/ipam/prefixes/13980/\",\n    \"family\": {\n        \"value\": 4,\n        \"label\": \"IPv4\"\n    },\n    \"prefix\": \"192.0.2.0/24\",\n    \"site\": {\n        \"id\": 3,\n        \"url\": \"http://netbox/api/dcim/sites/17/\",\n        \"name\": \"Site 23A\",\n        \"slug\": \"site-23a\"\n    },\n    \"vrf\": null,\n    \"tenant\": null,\n    \"vlan\": null,\n    \"status\": {\n        \"value\": \"container\",\n        \"label\": \"Container\"\n    },\n    \"role\": {\n        \"id\": 17,\n        \"url\": \"http://netbox/api/ipam/roles/17/\",\n        \"name\": \"Staging\",\n        \"slug\": \"staging\"\n    },\n    \"is_pool\": false,\n    \"description\": \"Example prefix\",\n    \"tags\": [],\n    \"custom_fields\": {},\n    \"created\": \"2018-12-10\",\n    \"last_updated\": \"2019-03-01T20:02:46.173540Z\"\n}\n</code></pre> <p>O formato resumido \u00e9 algo muito mais conciso:</p> <pre><code>GET /api/ipam/prefixes/13980/?brief=1\n\n{\n    \"id\": 13980,\n    \"url\": \"http://netbox/api/ipam/prefixes/13980/\",\n    \"family\": 4,\n    \"prefix\": \"10.40.3.0/24\"\n}\n</code></pre> <p>O formato resumido \u00e9 suportado para tanto lista de objetos ou objetos individuais.</p>"},{"location":"integrations/rest-api/#tirando-as-configuracoes-de-contexto","title":"Tirando as Configura\u00e7\u00f5es de Contexto","text":"<p>Ao obter os dispositivos e m\u00e1quinas virutais pela API REST, cada uma inclui sua pr\u00f3pria configura\u00e7\u00e3o de dados de contexto, por padr\u00e3o. Usu\u00e1rios com uma grande quantidade de dados de contexto (context data) normalmente enfrentar\u00e1 uma performance prejudicada quando estiver retornando m\u00faltiplos objetos, particularmente com p\u00e1ginas com grandes tamanhos. Para contornar isso, dados de contexto podem ser exclu\u00eddos dos dados de resposta ao incluir o par\u00e2metro <code>?exclude=config_context</code> na requisi\u00e7\u00e3o. Esse par\u00e2emtro funciona tanto com visualiza\u00e7\u00f5es de listas, quanto com visualiza\u00e7\u00f5es detalhadas.</p>"},{"location":"integrations/rest-api/#paginacao-pagination","title":"Pagina\u00e7\u00e3o (Pagination)","text":"<p>Respostas de API quem cont\u00e9m uma lista de objetos ser\u00e3o paginadas para efici\u00eancia. O objeto root do JSON retornado por um endpoint de lista cont\u00e9m os seguintes atributos:</p> <ul> <li><code>count</code>: N\u00famero total de todos os objetos que d\u00e3o match na query utilizada</li> <li><code>next</code>: Um hyperlink para os resultados da pr\u00f3xima p\u00e1gina (se houver)</li> <li><code>previous</code>: Um hyperlink para os resultados da p\u00e1gina anterior (se houver)</li> <li><code>results</code>: A lista de objetos da p\u00e1gina atual</li> </ul> <p>Aqui est\u00e1 um exemplo de resposta p\u00e1gina:</p> <pre><code>HTTP 200 OK\nAllow: GET, POST, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n{\n    \"count\": 2861,\n    \"next\": \"http://netbox/api/dcim/devices/?limit=50&amp;offset=50\",\n    \"previous\": null,\n    \"results\": [\n        {\n            \"id\": 231,\n            \"name\": \"Device1\",\n            ...\n        },\n        {\n            \"id\": 232,\n            \"name\": \"Device2\",\n            ...\n        },\n        ...\n    ]\n}\n</code></pre> <p>A p\u00e1gina padr\u00e3o \u00e9 determinada pelo par\u00e2metro de configura\u00e7\u00e3o <code>PAGINATE_COUNT</code>, que por padr\u00e3o \u00e9 50. No entanto, isso pode ser sobreposto pela requisi\u00e7\u00e3o ao especificar os par\u00e2metros da busca (query) em <code>offset</code> e <code>limit</code>. Por exemplo, se voc\u00ea quiser obter 100 dispositivos ao mesmo tempo, voc\u00ea vai fazer uma requisi\u00e7\u00e3o:</p> <pre><code>http://netbox/api/dcim/devices/?limit=100\n</code></pre> <p>O resposta retornar\u00e1 os dispositivos de 1 \u00e0 100. A URL fornecida no atributo <code>next</code> da resposta ir\u00e1 retornar os dispositivos de 101 at\u00e9 200:</p> <pre><code>{\n\"count\": 2861,\n\"next\": \"http://netbox/api/dcim/devices/?limit=100&amp;offset=100\",\n\"previous\": null,\n\"results\": [...]\n}\n</code></pre> <p>O n\u00famero m\u00e1ximo de objetos que podem ser retornados \u00e9 limitado pelo par\u00e2metros de configura\u00e7\u00e3o <code>MAX_PAGE_SIZE</code>, que \u00e9 1000, por padr\u00e3o. Configurar para <code>0</code> ou <code>None</code> ir\u00e1 remover o limite m\u00e1ximo. O consumor da API pode passar <code>?limit=0</code> para obter todos os objetos dando match com uma \u00fanica requisi\u00e7\u00e3o.</p> <p>Warning</p> <p>Desabilitando o tamanho m\u00e1ximo da p\u00e1gina introduz um potencial para requisi\u00e7\u00f5es que utilizam os recursos de forma muito intensiva, j\u00e1 que uma \u00fanica requisi\u00e7\u00e3o API pode obter uma tabela inteira de um banco de dados.</p>"},{"location":"integrations/rest-api/#interagindo-com-objetos","title":"Interagindo com Objetos","text":""},{"location":"integrations/rest-api/#obtendo-multiplos-objetos","title":"Obtendo M\u00faltiplos Objetos","text":"<p>Para buscar (query) por uma lista de objetos no NetBox, realize uma requisi\u00e7\u00e3o do tipo <code>GET</code> para o endpoint de list (lista) do modelo. Objetos s\u00e3o listados abaixo do par\u00e2metro <code>results</code> do objeto.</p> <pre><code>curl -s -X GET http://netbox/api/ipam/ip-addresses/ | jq '.'\n</code></pre> <pre><code>{\n\"count\": 42031,\n\"next\": \"http://netbox/api/ipam/ip-addresses/?limit=50&amp;offset=50\",\n\"previous\": null,\n\"results\": [\n{\n\"id\": 5618,\n\"address\": \"192.0.2.1/24\",\n...\n},\n{\n\"id\": 5619,\n\"address\": \"192.0.2.2/24\",\n...\n},\n{\n\"id\": 5620,\n\"address\": \"192.0.2.3/24\",\n...\n},\n...\n]\n}\n</code></pre>"},{"location":"integrations/rest-api/#obtendo-um-unico-objeto","title":"Obtendo um \u00danico Objeto","text":"<p>Para buscar (query) por um objeto individual no NetBox, realize uma requisi\u00e7\u00e3o do tipo <code>GET</code> para o ednpoint detail (detalhado) do modelo, especificando seu ID num\u00e9rico \u00fanico.</p> <p>Note</p> <p>Observe que a \"trailing slash\" \u00e9 obrigat\u00f3ria. Ocult\u00e1-la retornada um redirecionamento HTTP 302 (redirect).</p> <pre><code>curl -s -X GET http://netbox/api/ipam/ip-addresses/5618/ | jq '.'\n</code></pre> <pre><code>{\n\"id\": 5618,\n\"address\": \"192.0.2.1/24\",\n...\n}\n</code></pre>"},{"location":"integrations/rest-api/#criando-um-novo-objeto","title":"Criando um Novo Objeto","text":"<p>Para criar um novo objeto, fa\u00e7a uma requisi\u00e7\u00e3o do tipo <code>POST</code> para o endpoint list do modelo com dados em JSON pertencentes ao objeto sendo criado. Observe que o token da API REST \u00e9 necess\u00e1rio para todas as opera\u00e7\u00f5es de escrita (write); veja a se\u00e7\u00e3o de autentica\u00e7\u00e3o para mais informa\u00e7\u00f5es. Tamb\u00e9m certifique-se de definir o cabe\u00e7alho HTTP <code>Content-Type</code> para <code>application/json</code>.</p> <pre><code>curl -s -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/ \\\n--data '{\"prefix\": \"192.0.2.0/24\", \"site\": 6}' | jq '.'\n</code></pre> <pre><code>{\n\"id\": 18691,\n\"url\": \"http://netbox/api/ipam/prefixes/18691/\",\n\"family\": {\n\"value\": 4,\n\"label\": \"IPv4\"\n},\n\"prefix\": \"192.0.2.0/24\",\n\"site\": {\n\"id\": 6,\n\"url\": \"http://netbox/api/dcim/sites/6/\",\n\"name\": \"US-East 4\",\n\"slug\": \"us-east-4\"\n},\n\"vrf\": null,\n\"tenant\": null,\n\"vlan\": null,\n\"status\": {\n\"value\": \"active\",\n\"label\": \"Active\"\n},\n\"role\": null,\n\"is_pool\": false,\n\"description\": \"\",\n\"tags\": [],\n\"custom_fields\": {},\n\"created\": \"2020-08-04\",\n\"last_updated\": \"2020-08-04T20:08:39.007125Z\"\n}\n</code></pre>"},{"location":"integrations/rest-api/#criand-multiplos-objetos","title":"Criand M\u00faltiplos Objetos","text":"<p>Para criar inst\u00e2ncias m\u00faltiplas de modelos utilizando uma \u00fanica requisi\u00e7\u00e3o, fa\u00e7a uma requisi\u00e7\u00e3o do tipo <code>POST</code> para o endpoint list (lista) do modelo representando cada inst\u00e2ncia \u00e0 ser criada. Se houver sucesso, a resposta ir\u00e1 conter uma lista as inst\u00e2ncias recentemente criadas. O exemplo abaixo ilustra a cria\u00e7\u00e3o de tr\u00eas novos sites (locais).</p> <pre><code>curl -X POST -H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[\n{\"name\": \"Site 1\", \"slug\": \"site-1\", \"region\": {\"name\": \"United States\"}},\n{\"name\": \"Site 2\", \"slug\": \"site-2\", \"region\": {\"name\": \"United States\"}},\n{\"name\": \"Site 3\", \"slug\": \"site-3\", \"region\": {\"name\": \"United States\"}}\n]'\n</code></pre> <pre><code>[\n{\n\"id\": 21,\n\"url\": \"http://netbox/api/dcim/sites/21/\",\n\"name\": \"Site 1\",\n...\n},\n{\n\"id\": 22,\n\"url\": \"http://netbox/api/dcim/sites/22/\",\n\"name\": \"Site 2\",\n...\n},\n{\n\"id\": 23,\n\"url\": \"http://netbox/api/dcim/sites/23/\",\n\"name\": \"Site 3\",\n...\n}\n]\n</code></pre>"},{"location":"integrations/rest-api/#atualizando-um-objeto","title":"Atualizando um Objeto","text":"<p>Para modificar um objeto que foi recentemente criada, fa\u00e7a uma requisi\u00e7\u00e3o do tipo <code>PATCH</code> para o endpoint detail (detalhado) do modelo especificando seu ID n\u00famero \u00fanico. Inclua qualquer dado que voc\u00ea precisa para atualizar um objeto. Assim como \u00e9 na cria\u00e7\u00e3o do objeto, os cabe\u00e7alhos <code>Authorization</code> e <code>Content-Type</code> podem tamb\u00e9m ser especificados.</p> <pre><code>curl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/18691/ \\\n--data '{\"status\": \"reserved\"}' | jq '.'\n</code></pre> <pre><code>{\n\"id\": 18691,\n\"url\": \"http://netbox/api/ipam/prefixes/18691/\",\n\"family\": {\n\"value\": 4,\n\"label\": \"IPv4\"\n},\n\"prefix\": \"192.0.2.0/24\",\n\"site\": {\n\"id\": 6,\n\"url\": \"http://netbox/api/dcim/sites/6/\",\n\"name\": \"US-East 4\",\n\"slug\": \"us-east-4\"\n},\n\"vrf\": null,\n\"tenant\": null,\n\"vlan\": null,\n\"status\": {\n\"value\": \"reserved\",\n\"label\": \"Reserved\"\n},\n\"role\": null,\n\"is_pool\": false,\n\"description\": \"\",\n\"tags\": [],\n\"custom_fields\": {},\n\"created\": \"2020-08-04\",\n\"last_updated\": \"2020-08-04T20:14:55.709430Z\"\n}\n</code></pre> <p>Note</p> <p>A API REST do NetBox suporta o uso de tanto <code>PUT</code> quanto <code>PATCH</code> para modificar um objeto existente. A diferen\u00e7a \u00e9 que a requisi\u00e7\u00e3o <code>PUT</code> exige que o usu\u00e1rio especifique uma representa\u00e7\u00e3o completa do objeto sendo modificado, enquanto que a requisi\u00e7\u00e3o <code>PATCH</code> precisa incluir somente atributos que est\u00e3o sendo atualizados. Para a maioria dos prop\u00f3sitos, utilizazr o <code>PATCH</code> \u00e9 recomendado.</p>"},{"location":"integrations/rest-api/#atualizando-multiplos-objetos","title":"Atualizando M\u00faltiplos Objetos","text":"<p>M\u00faltiplos objetos podem ser atualizados de maneira simult\u00e2nea utilizando requisi\u00e7\u00f5es <code>PUT</code> ou <code>PATCH</code> para o endpoint de lista do modelo com uma lista de dicion\u00e1rios (dicts) especificando um ID num\u00e9rico de cada objeto para ser deletado e os atributos serem atualizados. Por exemplo, para atualizar os sites com ID 11 e 11 para o status de \"active\", utilize a requisi\u00e7\u00e3o abaixo:</p> <pre><code>curl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10, \"status\": \"active\"}, {\"id\": 11, \"status\": \"active\"}]'\n</code></pre> <p>Observer que n\u00e3o h\u00e1 necessidade para que os atributos sejam id\u00eantios atrav\u00e9s dos objetos. Por exemplo, \u00e9 poss\u00edvel atualizar o status de um ou mais sites com o nome de outra na mesma quisi\u00e7\u00e3o.</p> <p>Note</p> <p>A atualiza\u00e7\u00e3o em grupo de objetos \u00e9 uma opera\u00e7\u00e3o tudo-ou-nada (all-or-none), significa que se o NetBox falhar de atualizar com sucesso qualquer objeto espec\u00edfico (devido a valida\u00e7\u00e3o de erro, por exemplo), a opera\u00e7\u00e3o inteira ser\u00e1 abortada e nenhum dos objetos ser\u00e1 atualizado.</p>"},{"location":"integrations/rest-api/#deletando-um-objeto","title":"Deletando um Objeto","text":"<p>Para deletar um objeto do NetBox, fa\u00e7a uma requisi\u00e7\u00e3o <code>DELETE</code> para o endpoint detal do modelo especificando seu ID n\u00famero \u00fanico. O cabe\u00e7alho <code>Authorization</code> deve ser incluso para especificar um token de autentica\u00e7\u00e3o, no entanto esse tipo de requisi\u00e7\u00e3o n\u00e3o suporta passar qualquer dados no corpo (body) da requisi\u00e7\u00e3o.</p> <pre><code>curl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\nhttp://netbox/api/ipam/prefixes/18691/\n</code></pre> <p>Observe que as requisi\u00e7\u00f5es <code>DELETE</code> n\u00e3o retornam qualquer dado: Se n\u00e3o houver sucesso, a API ir\u00e1 retornar uma resposta com o c\u00f3digo HTTP 204 (No Content)</p> <p>Note</p> <p>Voc\u00ea pode utilizar o <code>curl</code> com a flag de sa\u00edda completa/verbose (<code>-v</code>) para inspecionar os c\u00f3digos de resposta HTTP.</p>"},{"location":"integrations/rest-api/#deletando-multiplos-objetos","title":"Deletando M\u00faltiplos Objetos","text":"<p>O NetBox suporta a remo\u00e7\u00e3o simult\u00e2nea de m\u00faltiplos objetos do mesmo tipo utilizando a requisi\u00e7\u00e3o do tipo <code>DELETE</code> para o endpoint de lista do modelo com uma lista de dicion\u00e1rios (dicts) especificando o ID n\u00fameor de cada objeto que ser\u00e1 deletado, Por exemplo, para deletar sites com ID 10, 11 e 12, utilize a seguinte requisi\u00e7\u00e3o:</p> <pre><code>curl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10}, {\"id\": 11}, {\"id\": 12}]'\n</code></pre> <p>Note</p> <p>A remo\u00e7\u00e3o em grupo de objetos \u00e9 uma opera\u00e7\u00e3o tudo-ou-nada (all-or-none), sinigica que se o NetBox falhar na remo\u00e7\u00e3o de um dos objetos especificados (devido a depend\u00eancia relacionada de um objeto, por exemplo), a opera\u00e7\u00e3o inteira ser\u00e1 abortada e nenhum dos objetos ser\u00e1 deletado.</p>"},{"location":"integrations/rest-api/#autenticacao-authentication","title":"Autentica\u00e7\u00e3o (Authentication)","text":"<p>A API REST do NetBox primariamente utiliza autentica\u00e7\u00e3o baseada em tokens. Para conveni\u00eancia, a autentica\u00e7\u00e3o baseada em cookie pode tamb\u00e9m ser utilizada ao navegar na parte \"pesquis\u00e1vel\" (browsable) da API.</p>"},{"location":"integrations/rest-api/#tokens","title":"Tokens","text":"<p>O token \u00e9 um identificador \u00fanico mapeando a conta do usu\u00e1rio do NetBox. Cada usu\u00e1rio pode utilizar um ou mais tokens onde ele ou ela pode usar autentica\u00e7\u00e3o ao realizar as requisi\u00e7\u00f5es da API REST. Para criar um token, navegue at\u00e9 a p\u00e1gina de tokens da API abaixo do seu profile de usu\u00e1rio.</p> <p>Note</p> <p>Todos os usu\u00e1rios podem criar e gerenciar os tokens da API REST abaixo do pa\u00ednel de controle da interface web do usu\u00e1rio (UI). Essa habilidade de visualizar, adicionar ou remover tokens atrav\u00e9s da API REST em si \u00e9 controlada pelos modelos relevantes de permiss\u00f5es, associando os usu\u00e1rios e/ou grupos dentro da interface de admin do NetBox. Essas permiss\u00f5es devem ser utilizadas com muito cuidado para evitar o permissionamento de um usu\u00e1rio criar tokens para outras contas de usu\u00e1rio.</p> <p>Cada token cont\u00e9m uma chave de 160-bit representada em 40 caracteres hexadecimal. Ao criar um token, voc\u00ea normalmente ir\u00e1 deixar um campo de chave em branco para que uma chave rand\u00f4mica seja automaticamente gerada. No entnato, o NetBox permite que voc\u00ea especifique uma chave no caso que precise restaurar um token deletado anteriormente para opera\u00e7\u00e3o.</p> <p>Por padr\u00e3o, um token precisa ser utilizado para performar todas as a\u00e7\u00f5es atrav\u00e9s da API que um usu\u00e1rio seria permitido fazer atrav\u00e9s da interface web (web UI). Desativar a op\u00e7\u00e3o \"write enabled\" ir\u00e1 restringir requisi\u00e7\u00f5es API feitas com este token para somente opera\u00e7\u00f5es de leitura (como o <code>GET</code>).</p> <p>Adicionalmente, um token pode ser definido para expirar em um per\u00edodo espec\u00edfico. Isto pode ser \u00fatil para que um cliente externo tenha permiss\u00e3o de acesso tempor\u00e1ria ao NetBox.</p> <p>Warning</p> <p>A habilidade para obter o valor da chave de um token de API criado previamente pode ser restringida ao desabilitar o par\u00e2metro de configura\u00e7\u00e3o <code>ALLOW_TOKEN_RETRIEVAL</code></p>"},{"location":"integrations/rest-api/#restricao-por-ip-do-cliente","title":"Restri\u00e7\u00e3o por IP do Cliente","text":"<p>Cada token da API pode ser opcionalmente restrita por endere\u00e7o IP do cliente. Se um ou mais endere\u00e7os IP ou prefixos for definido para um token, a autentica\u00e7\u00e3o ir\u00e1 falhar para qualquer cliente que esteja conectando de um endere\u00e7o IP fora do range previamente definido. Isso permite a restrin\u00e7\u00e3o de uso do token para um cliente espec\u00edfico. Por padr\u00e3o, qualquer endere\u00e7o IP do cliente \u00e9 permitido.</p>"},{"location":"integrations/rest-api/#criando-tokens-para-outros-usuarios","title":"Criando Tokens para Outros Usu\u00e1rios","text":"<p>\u00c9 poss\u00edvel provisionar os tokens de autnteica\u00e7\u00e3o para outros usu\u00e1rios via API REST. Para fazer isso, o usu\u00e1rio requisitante deve ter uma permiss\u00e3o atribu\u00edda de <code>users.grant_token</code>. Enquanto que todos os usu\u00e1rios herdam permiss\u00f5es para criar seus pr\u00f3prios tokens, essa permiss\u00e3o \u00e9 necess\u00e1ria para habilitar a cria\u00e7\u00e3o de tokens para outros usu\u00e1rios.</p> <p></p> <p>!!! warning Tenha Cuidado!</p> <pre><code>A habilidade de criar tokens no lugar dos outros permite que os usu\u00e1rios habilitem ao requisitor o acesso do token criado. A habilidade tem a inten\u00e7\u00e3o de provisionar os tokens atrav\u00e9s de servi\u00e7os automatizados, e deve ser usado com extremo cuidado para evitar problemas de seguran\u00e7a;\n</code></pre>"},{"location":"integrations/rest-api/#autenticando-via-api","title":"Autenticando via API","text":"<p>O token de autentica\u00e7\u00e3o \u00e9 atrelado \u00e0 requisi\u00e7\u00e3o ao configurar o cabe\u00e7alho de <code>Authorization</code> com o valor de <code>Token</code> seguido de um espa\u00e7o em branco e o token do usu\u00e1rio:</p> <pre><code>$ curl -H \"Authorization: Token $TOKEN\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttps://netbox/api/dcim/sites/\n{\n    \"count\": 10,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [...]\n}\n</code></pre> <p>Um  oken n\u00e3o \u00e9 exigido para opera\u00e7\u00f5es de leitura somente (read-only) que dispensam a obriga\u00e7\u00e3o de permiss\u00f5es (utilizando o par\u00e2metro de configura\u00e7\u00e3o <code>EXEMPT_VIEW_PERMISSIONS</code>). No entanto, se um token \u00e9 obrigat\u00f3rio, mas n\u00e3o presente dentro de uma requisi\u00e7\u00e3o, a API ir\u00e1 retornar uma resposta HTTP com o c\u00f3digo 403 (Forbidden):</p> <pre><code>$ curl https://netbox/api/dcim/sites/\n{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n</code></pre> <p>Quando um token \u00e9 usado para autenticar uma requisi\u00e7\u00e3o, a data <code>last_updated</code> para a data atual se o \u00failtimo uso foi registrado mais de 60 segundos atr\u00e1s (ou nunca foi registrado). Isso permite determinar quais tokens de usu\u00e1rio foram utilizados recentemente.</p> <p>Note</p> <p>A data de \"last used\" para tokens n\u00e3o ser\u00e1 atualizado enquanto o mode de manuten\u00e7\u00e3o (maintenance) for habilitado.</p>"},{"location":"integrations/rest-api/#provisionamento-inicial-de-token","title":"Provisionamento Inicial de Token","text":"<p>De prefer\u00eancia, cada usu\u00e1rio deve provisionar seu pr\u00f3prio token da API REST via interface web (UI). No entanto, voc\u00ea pode ver quando um token deve ser criado pelo usu\u00e1rio pela API REST em si. O NetBox fornece um endpoint especial para provisionar tokens usando uma combina\u00e7\u00e3o de usu\u00e1rio e senha.</p> <p>Para provisioanr um token pela API REST, fa\u00e7a uma requisi\u00e7\u00e3o do tipo <code>POST</code> para o endpoint <code>/api/users/tokens/provision/</code></p> <pre><code>$ curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttps://netbox/api/users/tokens/provision/ \\\n--data '{\n    \"username\": \"hankhill\",\n    \"password\": \"I&lt;3C3H8\"\n}'\n</code></pre> <p>Observe n\u00e3o estamos passando um token existente da requisi\u00e7\u00e3o da API REST. Se as credenciais fornecidas forem v\u00e1lidas, um token novo da API REST ser\u00e1 automaticamente criado para o usu\u00e1rio. Observe que a chave ser\u00e1 automaticamente gerada, e a habilidade de escrita ser\u00e1 habilitada.</p> <pre><code>{\n\"id\": 6,\n\"url\": \"https://netbox/api/users/tokens/6/\",\n\"display\": \"3c9cb9 (hankhill)\",\n\"user\": {\n\"id\": 2,\n\"url\": \"https://netbox/api/users/users/2/\",\n\"display\": \"hankhill\",\n\"username\": \"hankhill\"\n},\n\"created\": \"2021-06-11T20:09:13.339367Z\",\n\"expires\": null,\n\"key\": \"9fc9b897abec9ada2da6aec9dbc34596293c9cb9\",\n\"write_enabled\": true,\n\"description\": \"\"\n}\n</code></pre>"},{"location":"integrations/webhooks/","title":"Webhooks","text":"<p>O NetBox pode ser configurado para transmitir webhooks de sa\u00edda para sistemas remotos em resposta \u00e0s mudan\u00e7as do objeto interna. O recebedor pode agir nesses dados sobre essas mensagens de webook para tarefas relacionadas.</p> <p>Por exemplo, suponha que voc\u00ea quer automaticamente configurar um sistema de monitoramento para come\u00e7ar o monitoramento de um dispositivo quando o status operacional for mudado para ativo (active), e remove do monitoramento para qualquer outro status. Voc\u00ea pode criar um webhook no NetBox para um modelo de dispositivo e construir o conte\u00fado a URL de destino para afetar a mudan\u00e7a desjada no sistema recebedor. Webhooks ser\u00e3o enviados automaticamente pelo NetBox independente as configura\u00e7\u00f5es n\u00e3o forem atendidas.</p> <p>Cada webook deve ser associado com ao menos um tipo de objeto doNetBox e ao menos um evento (criar, atualizar ou remover). Usu\u00e1rios podem especificar o recebedor da URL, o tipo da requisi\u00e7\u00e3o HTTP (<code>GET</code>, <code>POST</code>, etc.), tipo do conte\u00fado (content type) e cabe\u00e7alhos. Se deixado vazio, ter\u00e1 uma representa\u00e7\u00e3o serializada por padr\u00e3o para o objeto afetado.</p> <p>Warning</p> <p>Webhooks suportam a inclus\u00e3o de c\u00f3digo submetido pelo usu\u00e1rio para gerar a URL, cabe\u00e7alhos customizados e payloads, que possam ter riscos de seguran\u00e7a sobre certas circunst\u00e2ncias. Apenas garanta permiss\u00e3o para criar ou  modificar webhooks para usu\u00e1rios confi\u00e1veis.</p>"},{"location":"integrations/webhooks/#suporte-ao-template-do-jinja2","title":"Suporte ao Template do Jinja2","text":"<p>O template do Jinja2 \u00e9 suportado para a <code>URL</code>, <code>additional_headers</code> e <code>body_template</code> campos. Isso habilita o usu\u00e1rio que transfira os dados do objeto no cabe\u00e7alho da requisi\u00e7\u00e3o, assim como construir um corpo da requisi\u00e7\u00e3o customizada. O conte\u00fado da requisi\u00e7\u00e3o pode ser constru\u00edda para habilitar a intera\u00e7\u00e3o direta com um sistema externo ao garantir uma mensagem de sa\u00edda no formato que o recebedor espera e entende.</p> <p>Por exemplo, voc\u00ea pode criar um webook do NetBox para enviar uma mensagem ao Slack \u00e0 qualquer momento que um endere\u00e7o IP seja criado. Voc\u00ea pode realizar isso com a seguinte configura\u00e7\u00e3o:</p> <ul> <li>Tipo de objeto: <code>IPAM &gt; IP address</code></li> <li>M\u00e9todo HTTP: <code>POST</code></li> <li>URL: URL recebida do Webhook do Slack</li> <li>Tipo do Conte\u00fado HTTP: <code>application/json</code></li> <li>Tipo do Corpo: <code>{\"text\": \"IP address {{ data['address'] }} was created by {{ username }}!\"}</code></li> </ul>"},{"location":"integrations/webhooks/#contexto-disponivel","title":"Contexto Dispon\u00edvel","text":"<p>Os dados \u00e0 seguir est\u00e3o dispon\u00edveis para o contexto de templates do Jinja2:</p> <ul> <li><code>event</code> - O tipo de evento que a webhook ser\u00e1 ativa: criada, atualizada ou removida.</li> <li><code>model</code> - O modelo do NetBox que ativou a mudan\u00e7a.</li> <li><code>timestamp</code> - A data que o evento ocorreu (no formato ISO 8601)</li> <li><code>username</code> - O nome da conta do usu\u00e1rio associada com a mudan\u00e7a.</li> <li><code>request_id</code> - O ID da requisi\u00e7\u00e3o \u00fanico. Isso pode ser correlacionado com m\u00faltiplas mudan\u00e7as associadas com uma \u00fanica requisi\u00e7\u00e3o.</li> <li><code>data</code> - A representa\u00e7\u00e3o detalhada do objeto e seu estado atual. Isso \u00e9 tipicamente equivalente \u00e0 representa\u00e7\u00e3o do modelo na REST API do NetBox.</li> <li><code>snapshots</code> - \"Snapshots\" m\u00ednimas do estado do objeto de antes e depois antes da mudan\u00e7a ter sido feita; fornecido com um dicion\u00e1rio de chaves nomeadas com <code>prechange</code> e <code>postchange</code>. Isso n\u00e3o \u00e9 t\u00e3o extensiva como a representa\u00e7\u00e3o completamente serializada, mas certas informa\u00e7\u00f5es s\u00e3o suficientes para comunicar aquilo que foi mudado.</li> </ul>"},{"location":"integrations/webhooks/#corpo-padrao-da-requisicao-request","title":"Corpo Padr\u00e3o da Requisi\u00e7\u00e3o (Request)","text":"<p>Se nenhum corpo (body) do template for especificado, o corpo da requisi\u00e7\u00e3o ser\u00e1 populado com um objeto JSON contedo os dados de contexto. Por exemplo, um site (local) recentemente criado pode aparecer, como:</p> <pre><code>{\n\"event\": \"created\",\n\"timestamp\": \"2021-03-09 17:55:33.968016+00:00\",\n\"model\": \"site\",\n\"username\": \"jstretch\",\n\"request_id\": \"fdbca812-3142-4783-b364-2e2bd5c16c6a\",\n\"data\": {\n\"id\": 19,\n\"name\": \"Site 1\",\n\"slug\": \"site-1\",\n\"status\": \"value\": \"active\",\n\"label\": \"Active\",\n\"id\": 1\n},\n\"region\": null,\n...\n},\n\"snapshots\": {\n\"prechange\": null,\n\"postchange\": {\n\"created\": \"2021-03-09\",\n\"last_updated\": \"2021-03-09T17:55:33.851Z\",\n\"name\": \"Site 1\",\n\"slug\": \"site-1\",\n\"status\": \"active\",\n...\n}\n}\n}\n</code></pre>"},{"location":"integrations/webhooks/#webhooks-condicionais","title":"Webhooks Condicionais","text":"<p>Um webhook pode incluir um grupo de l\u00f3gica condicional expressada pelo JSON usado para controlar se um webhook ativa um objeto espec\u00edfico. Por exemplo, voc\u00ea pode querer ativar um webhook para dispositivos somente quando o campo de <code>status</code> do objeto estiver como \"active\" (ativo):</p> <pre><code>{\n\"and\": [\n{\n\"attr\": \"status.value\",\n\"value\": \"active\"\n}\n]\n}\n</code></pre> <p>Para mais detalhes, veja a documenta\u00e7\u00e3o do NetBox para refer\u00eancia sobre l\u00f3gica condicional.</p>"},{"location":"integrations/webhooks/#processamento-do-webhook","title":"Processamento do Webhook","text":"<p>Quando uma mudan\u00e7a for detectada, qualquer resultados de webhooks s\u00e3o postos na fila de Redis para processamento. Isso permite a requisi\u00e7\u00e3o do usu\u00e1rio para permite que n\u00e3o seja necess\u00e1rio esperar a sa\u00edda do webhook para ser processada. Os webhooks s\u00e3o ent\u00e3o extra\u00eddos da fila pelo processo <code>rqworker</code> a as requisi\u00e7\u00f5es HTTP s\u00e3o enviadas para seus destinos respectivos. A fila de webhook atual e qualquer webhooks com falha podem ser inspecionadas na interface web do admin <code>System &gt; Background Tasks</code>.</p> <p>A requisi\u00e7\u00e3o \u00e9 considerada que tee sucesso, caso a resposta do status do c\u00f3digo seja 2XX; de outra forma, a requisi\u00e7\u00e3o \u00e9 marcada como se tivesse falhado. Requisi\u00e7\u00f5es com falha podem ser manualmente extra\u00eddas atrav\u00e9s da interface admin do NetBox.</p>"},{"location":"integrations/webhooks/#resolvendo-os-problemas-troubleshooting","title":"Resolvendo os Problemas (Troubleshooting)","text":"<p>Para auxiliar na verifica\u00e7\u00e3o se o conte\u00fado renderizado pela sa\u00edda do webhook est\u00e1 correta, o NetBox fornece um simples \"escutador\" (listener) HTTP para rodar localmente, receber e exibir as requisi\u00e7\u00f5es de webhook. Primeiro, modifique a URL de destino para o webhook desejado para <code>http://localhost:9000/</code>. Isso ir\u00e1 instruir o NetBox \u00e0 enviar as requisi\u00e7\u00f5es para o servidor local na porta TCP 9000. Ent\u00e3o, inicie (start) o servi\u00e7o recebedor (receiver) do webhook no diret\u00f3rio root do NetBox:</p> <pre><code>$ python netbox/manage.py webhook_receiver\nListening on port http://localhost:9000. Stop with CONTROL-C.\n</code></pre> <p>Voc\u00ea pode testar o recebedor (receiver) em si ao enviar a requisi\u00e7\u00e3o HTTP. Por exemplo:</p> <pre><code>$ curl -X POST http://localhost:9000 --data '{\"foo\": \"bar\"}'\n</code></pre> <p>O servidor ir\u00e1 retornar uma sa\u00edda similar como a seguinte:</p> <pre><code>[1] Tue, 07 Apr 2020 17:44:02 GMT 127.0.0.1 \"POST / HTTP/1.1\" 200 -\nHost: localhost:9000\nUser-Agent: curl/7.58.0\nAccept: */*\nContent-Length: 14\nContent-Type: application/x-www-form-urlencoded\n\n{\"foo\": \"bar\"}\n------------\n</code></pre> <p>Observe que o <code>webhook_receiver</code> n\u00e3o faz nada com a informa\u00e7\u00e3o recebida: Ele meramente retorna os cabe\u00e7alhos da rquisi\u00e7\u00e3o e o corpo (body) para inspe\u00e7\u00e3o.</p> <p>Agora, ent\u00e3o o webhook do NetBox \u00e9 ativado e processado, voc\u00ea deve ver que os cabe\u00e7alhos e o conte\u00fado da p\u00e1gina aparecem no terminal onde o recebedor do webhook est\u00e1 escutando. Se n\u00e3o, verifique se o processo <code>rqworker</code> est\u00e1 rodando e que os eventos do webhook est\u00e3o sendo postos na fial (queue). Isto \u00e9 vis\u00edvel na interface de admin do NetBox.</p>"},{"location":"models/circuits/circuit/","title":"Circuitos","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A circuit represents a physical point-to-point data connection, typically used to interconnect sites across considerable distances (e.g. to deliver Internet connectivity).</p>"},{"location":"models/circuits/circuit/#fields","title":"Fields","text":""},{"location":"models/circuits/circuit/#provider","title":"Provider","text":"<p>The provider to which this circuit belongs.</p>"},{"location":"models/circuits/circuit/#circuit-id","title":"Circuit ID","text":"<p>An identifier for this circuit. This must be unique to the assigned provider. (Circuits assigned to different providers may have the same circuit ID.)</p>"},{"location":"models/circuits/circuit/#circuit-type","title":"Circuit Type","text":"<p>Each circuit is classified by a user-defined circuit type. Generally this is something like \"Internet access,\" \"MPLS/VPN,\" etc.</p>"},{"location":"models/circuits/circuit/#status","title":"Status","text":"<p>The operational status of the circuit. By default, the following statuses are available:</p> Name Planned Provisioning Active Offline Deprovisioning Decommissioned <p>Custom circuit statuses</p> <p>Additional circuit statuses may be defined by setting <code>Circuit.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/circuits/circuit/#description","title":"Description","text":"<p>A brief description of the circuit.</p>"},{"location":"models/circuits/circuit/#installation-date","title":"Installation Date","text":"<p>The date on which the circuit was installed.</p>"},{"location":"models/circuits/circuit/#termination-date","title":"Termination Date","text":"<p>The date on which the circuit is scheduled to be disconnected.</p>"},{"location":"models/circuits/circuit/#commit-rate","title":"Commit Rate","text":"<p>The committed rate (throughput) of the circuit, in kilobits per second.</p>"},{"location":"models/circuits/circuittermination/","title":"Termina\u00e7\u00e3o de Circuitos","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Each circuit may have up to two terminations, designated A and Z. At either termination, a circuit may connect to a site, device interface (via a cable), or to a provider network.</p> <p>In adherence with NetBox's philosophy of closely modeling the real world, a circuit may be connected only to a physical interface. For example, circuits may not terminate to LAG interfaces, which are virtual in nature. In such cases, a separate physical circuit is associated with each LAG member interface and each needs to be modeled discretely.</p> <p>Note</p> <p>A circuit in NetBox represents a physical link, and cannot have more than two endpoints. When modeling a multi-point topology, each leg of the topology must be defined as a discrete circuit, with one end terminating within the provider's infrastructure. The provider network model is ideal for representing these networks.</p>"},{"location":"models/circuits/circuittermination/#fields","title":"Fields","text":""},{"location":"models/circuits/circuittermination/#circuit","title":"Circuit","text":"<p>The circuit to which this termination belongs.</p>"},{"location":"models/circuits/circuittermination/#termination-side","title":"Termination Side","text":"<p>Designates the termination as forming either the A or Z end of the circuit.</p>"},{"location":"models/circuits/circuittermination/#mark-connected","title":"Mark Connected","text":"<p>If selected, the circuit termination will be considered \"connected\" even if no cable has been connected to it in NetBox.</p>"},{"location":"models/circuits/circuittermination/#site","title":"Site","text":"<p>The site with which this circuit termination is associated. Once created, a cable can be connected between the circuit termination and a device interface (or similar component).</p>"},{"location":"models/circuits/circuittermination/#provider-network","title":"Provider Network","text":"<p>Circuits which do not connect to a site modeled by NetBox can instead be terminated to a provider network representing an unknown network operated by a provider.</p>"},{"location":"models/circuits/circuittermination/#port-speed","title":"Port Speed","text":"<p>The operating speed of the terminated interface, in kilobits per second. This is useful for documenting the speed of a circuit when the actual interface to which it terminates is not being modeled in NetBox.</p>"},{"location":"models/circuits/circuittermination/#upstream-speed","title":"Upstream Speed","text":"<p>The upstream speed of the terminated interface (in kilobits per second), if different from the downstream speed (a common scenario with e.g. DOCSIS cable modems).</p>"},{"location":"models/circuits/circuittermination/#cross-connect-id","title":"Cross-connect ID","text":"<p>In a data center environment, circuits are often delivered via a local cross-connect. While it may not be appropriate to model the cross-connect itself in NetBox, it's a good idea to record its ID for reference where applicable.</p>"},{"location":"models/circuits/circuittermination/#patch-panel-ports","title":"Patch Panel &amp; Port(s)","text":"<p>Similar to the cross-connect ID, this field can be used to track physical connection details which may be outside the scope of what is being modeled in NetBox.</p>"},{"location":"models/circuits/circuittype/","title":"Tipos de Circuito","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Circuits are classified by functional type. These types are completely customizable, and are typically used to convey the type of service being delivered over a circuit. For example, you might define circuit types for:</p> <ul> <li>Internet transit</li> <li>Out-of-band connectivity</li> <li>Peering</li> <li>Private backhaul</li> </ul>"},{"location":"models/circuits/circuittype/#fields","title":"Fields","text":""},{"location":"models/circuits/circuittype/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/circuits/circuittype/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/circuits/provider/","title":"Fornecedor","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A provider is any entity which provides some form of connectivity of among sites or organizations within a site. While this obviously includes carriers which offer Internet and private transit service, it might also include Internet exchange (IX) points and even organizations with whom you peer directly. Each circuit within NetBox must be assigned a provider and a circuit ID which is unique to that provider.</p>"},{"location":"models/circuits/provider/#fields","title":"Fields","text":""},{"location":"models/circuits/provider/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/circuits/provider/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/circuits/provider/#asn","title":"ASN","text":"<p>The AS number assigned to this provider.</p> <p>Legacy field</p> <p>This field is being removed in NetBox v3.4. Users are highly encouraged to use the ASN model to track AS number assignment for providers.</p>"},{"location":"models/circuits/provider/#asns","title":"ASNs","text":"<p>The AS numbers assigned to this provider (optional).</p>"},{"location":"models/circuits/provider/#account-number","title":"Account Number","text":"<p>The administrative account identifier tied to this provider for your organization.</p>"},{"location":"models/circuits/provider/#portal-url","title":"Portal URL","text":"<p>The URL for the provider's customer service portal.</p>"},{"location":"models/circuits/provider/#noc-contact","title":"NOC Contact","text":"<p>Contact details for the provider's network operations center (NOC).</p>"},{"location":"models/circuits/provider/#admin-contact","title":"Admin Contact","text":"<p>Administrative contact details for the provider.</p>"},{"location":"models/circuits/providernetwork/","title":"Rede do Fornecedor","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>This model can be used to represent the boundary of a provider network, the details of which are unknown or unimportant to the NetBox user. For example, it might represent a provider's regional MPLS network to which multiple circuits provide connectivity.</p>"},{"location":"models/circuits/providernetwork/#fields","title":"Fields","text":""},{"location":"models/circuits/providernetwork/#provider","title":"Provider","text":"<p>The provider responsible for the operation of this network.</p>"},{"location":"models/circuits/providernetwork/#name","title":"Name","text":"<p>A human-friendly name, unique to the provider.</p>"},{"location":"models/circuits/providernetwork/#service-id","title":"Service ID","text":"<p>An arbitrary identifier used as an alternate reference for the type of connectivity or service being delivered.</p>"},{"location":"models/dcim/cable/","title":"Cabo","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>All connections between device components in NetBox are represented using cables. A cable represents a direct physical connection between two sets of endpoints (A and B), such as a console port and a patch panel port, or between two network interfaces. Cables may be connected to the following objects:</p> <ul> <li>Network interfaces</li> <li>Console ports</li> <li>Console server ports</li> <li>Pass-through ports (front and rear)</li> <li>Circuit terminations</li> <li>Power ports</li> <li>Power outlets</li> <li>Power feeds</li> </ul>"},{"location":"models/dcim/cable/#fields","title":"Fields","text":""},{"location":"models/dcim/cable/#status","title":"Status","text":"<p>The cable's operational status. Choices include:</p> <ul> <li>Active (default)</li> <li>Planned</li> <li>Decommissioning</li> </ul>"},{"location":"models/dcim/cable/#type","title":"Type","text":"<p>The cable's physical medium or classification.</p>"},{"location":"models/dcim/cable/#label","title":"Label","text":"<p>An arbitrary label used to identify the cable.</p>"},{"location":"models/dcim/cable/#color","title":"Color","text":"<p>The color of the cable.</p>"},{"location":"models/dcim/cable/#length","title":"Length","text":"<p>The numeric length of the cable, including a unit designation (e.g. 100 meters or 25 feet).</p>"},{"location":"models/dcim/cable/#tracing-cables","title":"Tracing Cables","text":"<p>A cable may be traced from any of its endpoints by clicking the \"trace\" button. (A REST API endpoint also provides this functionality.) NetBox will follow the path of connected cables from this termination across the directly connected cable to the far-end termination. If the cable connects to a pass-through port, and the peer port has another cable connected, NetBox will continue following the cable path until it encounters a non-pass-through or unconnected termination point. The entire path will be displayed to the user.</p>"},{"location":"models/dcim/consoleport/","title":"Porta Console","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A console port provides connectivity to the physical console of a device. These are typically used for temporary access by someone who is physically near the device, or for remote out-of-band access provided via a networked console server.</p> <p>Tip</p> <p>Like most device components, console ports are instantiated automatically from console port templates assigned to the selected device type when a device is created.</p>"},{"location":"models/dcim/consoleport/#fields","title":"Fields","text":""},{"location":"models/dcim/consoleport/#device","title":"Device","text":"<p>The device to which this console port belongs.</p>"},{"location":"models/dcim/consoleport/#module","title":"Module","text":"<p>The installed module within the assigned device to which this console port belongs (optional).</p>"},{"location":"models/dcim/consoleport/#name","title":"Name","text":"<p>The name of the console port. Must be unique to the parent device.</p>"},{"location":"models/dcim/consoleport/#label","title":"Label","text":"<p>An alternative physical label identifying the console port.</p>"},{"location":"models/dcim/consoleport/#type","title":"Type","text":"<p>The type of console port.</p>"},{"location":"models/dcim/consoleport/#speed","title":"Speed","text":"<p>Operating speed, in bits per second (bps).</p>"},{"location":"models/dcim/consoleport/#mark-connected","title":"Mark Connected","text":"<p>If selected, this component will be treated as if a cable has been connected.</p>"},{"location":"models/dcim/consoleporttemplate/","title":"Template de Porta Console","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A template for a console port that will be created on all instantiations of the parent device type. See the console port documentation for more detail.</p>"},{"location":"models/dcim/consoleserverport/","title":"Porta Console do Servidor","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A console server is a device which provides remote access to the local consoles of connected devices. They are typically used to provide remote out-of-band access to network devices, and generally connect to console ports.</p> <p>Tip</p> <p>Like most device components, console server ports are instantiated automatically from console server port templates assigned to the selected device type when a device is created.</p>"},{"location":"models/dcim/consoleserverport/#fields","title":"Fields","text":""},{"location":"models/dcim/consoleserverport/#device","title":"Device","text":"<p>The device to which this console server port belongs.</p>"},{"location":"models/dcim/consoleserverport/#module","title":"Module","text":"<p>The installed module within the assigned device to which this console server port belongs (optional).</p>"},{"location":"models/dcim/consoleserverport/#name","title":"Name","text":"<p>The name of the console server port. Must be unique to the parent device.</p>"},{"location":"models/dcim/consoleserverport/#label","title":"Label","text":"<p>An alternative physical label identifying the console server port.</p>"},{"location":"models/dcim/consoleserverport/#type","title":"Type","text":"<p>The type of console server port.</p>"},{"location":"models/dcim/consoleserverport/#speed","title":"Speed","text":"<p>Operating speed, in bits per second (bps).</p>"},{"location":"models/dcim/consoleserverport/#mark-connected","title":"Mark Connected","text":"<p>If selected, this component will be treated as if a cable has been connected.</p>"},{"location":"models/dcim/consoleserverporttemplate/","title":"Template da Porta Console do Servidor","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A template for a console server port that will be created on all instantiations of the parent device type. See the console server port documentation for more detail.</p>"},{"location":"models/dcim/device/","title":"Dispositivo","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Every piece of hardware which is installed within a site or rack exists in NetBox as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.</p> <p>When assigning a multi-U device to a rack, it is considered to be mounted in the lowest-numbered rack unit which it occupies. For example, a 3U device which occupies U8 through U10 is said to be mounted in U8. This logic applies to racks with both ascending and descending unit numbering.</p> <p>A device is said to be full-depth if its installation on one rack face prevents the installation of any other device on the opposite face within the same rack unit(s). This could be either because the device is physically too deep to allow a device behind it, or because the installation of an opposing device would impede airflow.</p> <p>Each device must be instantiated from a pre-created device type, and its default components (console ports, power ports, interfaces, etc.) will be created automatically. (The device type associated with a device may be changed after its creation, however its components will not be updated retroactively.)</p> <p>Device names must be unique within a site, unless the device has been assigned to a tenant. Devices may also be unnamed.</p> <p>When a device has one or more interfaces with IP addresses assigned, a primary IP for the device can be designated, for both IPv4 and IPv6.</p>"},{"location":"models/dcim/device/#fields","title":"Fields","text":""},{"location":"models/dcim/device/#name","title":"Name","text":"<p>The device's configured name. This field is optional; devices can be unnamed. However, if set, the name must be unique to the assigned site and tenant.</p>"},{"location":"models/dcim/device/#device-role","title":"Device Role","text":"<p>The functional role assigned to this device.</p>"},{"location":"models/dcim/device/#device-type","title":"Device Type","text":"<p>The hardware device type which defines the device's make &amp; model. Upon creating, all templated components assigned to the device type will be replicated on the new device.</p>"},{"location":"models/dcim/device/#airflow","title":"Airflow","text":"<p>The direction in which air circulates through the device chassis for cooling.</p>"},{"location":"models/dcim/device/#serial-number","title":"Serial Number","text":"<p>The unique physical serial number assigned to this device by its manufacturer.</p>"},{"location":"models/dcim/device/#asset-tag","title":"Asset Tag","text":"<p>A unique, locally-administered label used to identify hardware resources.</p>"},{"location":"models/dcim/device/#site","title":"Site","text":"<p>The site in which this device is located.</p>"},{"location":"models/dcim/device/#location","title":"Location","text":"<p>A specific location where this device resides within the assigned site (optional).</p>"},{"location":"models/dcim/device/#rack","title":"Rack","text":"<p>The rack within which this device is installed (optional).</p>"},{"location":"models/dcim/device/#rack-face","title":"Rack Face","text":"<p>If installed in a rack, this field denotes the primary face on which the device is mounted.</p>"},{"location":"models/dcim/device/#position","title":"Position","text":"<p>If installed in a rack, this field indicates the base rack unit in which the device is mounted.</p> <p>Tip</p> <p>Devices with a height of more than one rack unit should be set to the lowest-numbered rack unit that they occupy.</p>"},{"location":"models/dcim/device/#status","title":"Status","text":"<p>The device's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Device.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/dcim/device/#platform","title":"Platform","text":"<p>A device may be associated with a particular platform to indicate its operating system. Note that only platforms assigned to the associated manufacturer (or to no manufacturer) will be available for selection.</p>"},{"location":"models/dcim/device/#primary-ipv4-ipv6-addresses","title":"Primary IPv4 &amp; IPv6 Addresses","text":"<p>Each device may designate one primary IPv4 address and/or one primary IPv6 address for management purposes.</p> <p>Tip</p> <p>NetBox will prefer IPv6 addresses over IPv4 addresses by default. This can be changed by setting the <code>PREFER_IPV4</code> configuration parameter.</p>"},{"location":"models/dcim/device/#cluster","title":"Cluster","text":"<p>If this device will serve as a host for a virtualization cluster, it can be assigned here. (Host devices can also be assigned by editing the cluster.)</p>"},{"location":"models/dcim/device/#virtual-chassis","title":"Virtual Chassis","text":"<p>The virtual chassis of which this device is a member, if any.</p>"},{"location":"models/dcim/device/#vc-position","title":"VC Position","text":"<p>If assigned to a virtual chassis, this field indicates the device's member position.</p>"},{"location":"models/dcim/device/#vc-priority","title":"VC Priority","text":"<p>If assigned to a virtual chassis, this field indicates the device's priority for master election.</p>"},{"location":"models/dcim/device/#local-config-context-data","title":"Local Config Context Data","text":"<p>Any unique context data to be associated with the device.</p>"},{"location":"models/dcim/devicebay/","title":"Ba\u00eda do Dispositivo (Device Bay)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Device bays represent a space or slot within a parent device in which a child device may be installed. For example, a 2U parent chassis might house four individual blade servers. The chassis would appear in the rack elevation as a 2U device with four device bays, and each server within it would be defined as a 0U device installed in one of the device bays. Child devices do not appear within rack elevations or count as consuming rack units.</p> <p>Child devices are first-class Devices in their own right: That is, they are fully independent managed entities which don't share any control plane with the parent.  Just like normal devices, child devices have their own platform (OS), role, tags, and components.  LAG interfaces may not group interfaces belonging to different child devices.</p> <p>Note</p> <p>Device bays are not suitable for modeling line cards (such as those commonly found in chassis-based routers and switches), as these components depend on the control plane of the parent device to operate. Instead, these should be modeled as modules installed within module bays.</p> <p>Tip</p> <p>Like most device components, device bays are instantiated automatically from device bay templates assigned to the selected device type when a device is created.</p>"},{"location":"models/dcim/devicebay/#fields","title":"Fields","text":""},{"location":"models/dcim/devicebay/#device","title":"Device","text":"<p>The device to which this device bay belongs.</p>"},{"location":"models/dcim/devicebay/#name","title":"Name","text":"<p>The device bay's name. Must be unique to the parent device.</p>"},{"location":"models/dcim/devicebay/#label","title":"Label","text":"<p>An alternative physical label identifying the device bay.</p>"},{"location":"models/dcim/devicebaytemplate/","title":"Template da Ba\u00eda do Dispositivo (Device Bay Template)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A template for a device bay that will be created on all instantiations of the parent device type. See the device bay documentation for more detail.</p>"},{"location":"models/dcim/devicerole/","title":"Fun\u00e7\u00e3o do Dispositivo","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Devices can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for core switches, distribution switches, and access switches within your network.</p>"},{"location":"models/dcim/devicerole/#fields","title":"Fields","text":""},{"location":"models/dcim/devicerole/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/dcim/devicerole/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/dcim/devicerole/#color","title":"Color","text":"<p>The color used when displaying the role in the NetBox UI.</p>"},{"location":"models/dcim/devicerole/#vm-role","title":"VM Role","text":"<p>If selected, this role may be assigned to virtual machines</p>"},{"location":"models/dcim/devicetype/","title":"Tipo do Dispositivo","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A device type represents a particular make and model of hardware that exists in the real world. Device types define the physical attributes of a device (rack height and depth) and its individual components (console, power, network interfaces, and so on).</p> <p>Device types are instantiated as devices installed within sites and/or equipment racks. For example, you might define a device type to represent a Juniper EX4300-48T network switch with 48 Ethernet interfaces. You can then create multiple instances of this type named \"switch1,\" \"switch2,\" and so on. Each device will automatically inherit the components (such as interfaces) of its device type at the time of creation. However, changes made to a device type will not apply to instances of that device type retroactively.</p> <p>Note</p> <p>This parent/child relationship is not suitable for modeling chassis-based devices, wherein child members share a common control plane. Instead, line cards and similarly non-autonomous hardware should be modeled as modules or inventory items within a device.</p>"},{"location":"models/dcim/devicetype/#fields","title":"Fields","text":""},{"location":"models/dcim/devicetype/#manufacturer","title":"Manufacturer","text":"<p>The manufacturer which produces this type of device.</p>"},{"location":"models/dcim/devicetype/#model","title":"Model","text":"<p>The model number assigned to this device type by its manufacturer. Must be unique to the manufacturer.</p>"},{"location":"models/dcim/devicetype/#slug","title":"Slug","text":"<p>A unique URL-friendly representation of the model identifier. (This value can be used for filtering.)</p>"},{"location":"models/dcim/devicetype/#part-number","title":"Part Number","text":"<p>An alternative part number to uniquely identify the device type.</p>"},{"location":"models/dcim/devicetype/#height","title":"Height","text":"<p>The height of the physical device in rack units. (For device types that are not rack-mountable, this should be <code>0</code>.)</p>"},{"location":"models/dcim/devicetype/#is-full-depth","title":"Is Full Depth","text":"<p>If selected, this device type is considered to occupy both the front and rear faces of a rack, regardless of which face it is assigned.</p>"},{"location":"models/dcim/devicetype/#parentchild-status","title":"Parent/Child Status","text":"<p>Indicates whether this is a parent type (capable of housing child devices), a child type (which must be installed within a device bay), or neither.</p>"},{"location":"models/dcim/devicetype/#airflow","title":"Airflow","text":"<p>The default direction in which airflow circulates within the device chassis. This may be configured differently for instantiated devices (e.g. because of different fan modules).</p>"},{"location":"models/dcim/devicetype/#weight","title":"Weight","text":"<p>The numeric weight of the device, including a unit designation (e.g. 10 kilograms or 20 pounds).</p>"},{"location":"models/dcim/devicetype/#front-rear-images","title":"Front &amp; Rear Images","text":"<p>Users can upload illustrations of the device's front and rear panels. If present, these will be used to render the device in rack elevation diagrams.</p>"},{"location":"models/dcim/frontport/","title":"Porta Frontal","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Front ports are pass-through ports which represent physical cable connections that comprise part of a longer path. For example, the ports on the front face of a UTP patch panel would be modeled in NetBox as front ports. Each port is assigned a physical type, and must be mapped to a specific rear port on the same device. A single rear port may be mapped to multiple front ports, using numeric positions to annotate the specific alignment of each.</p> <p>Tip</p> <p>Like most device components, front ports are instantiated automatically from front port templates assigned to the selected device type when a device is created.</p>"},{"location":"models/dcim/frontport/#fields","title":"Fields","text":""},{"location":"models/dcim/frontport/#device","title":"Device","text":"<p>The device to which this port belongs.</p>"},{"location":"models/dcim/frontport/#module","title":"Module","text":"<p>The installed module within the assigned device to which this port belongs (optional).</p>"},{"location":"models/dcim/frontport/#name","title":"Name","text":"<p>The port's name. Must be unique to the parent device.</p>"},{"location":"models/dcim/frontport/#label","title":"Label","text":"<p>An alternative physical label identifying the port.</p>"},{"location":"models/dcim/frontport/#type","title":"Type","text":"<p>The port's termination type.</p>"},{"location":"models/dcim/frontport/#rear-ports","title":"Rear Ports","text":"<p>The rear port and position to which this front port maps.</p> <p>Tip</p> <p>When creating multiple front ports using a patterned name (e.g. <code>Port [1-12]</code>), you may select the equivalent number of rear port-position mappings from the list.</p>"},{"location":"models/dcim/frontport/#color","title":"Color","text":"<p>The port's color (optional).</p>"},{"location":"models/dcim/frontport/#mark-connected","title":"Mark Connected","text":"<p>If selected, this component will be treated as if a cable has been connected.</p>"},{"location":"models/dcim/frontporttemplate/","title":"Template da Porta Frontal","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A template for a front-facing pass-through port that will be created on all instantiations of the parent device type. See the front port documentation for more detail.</p>"},{"location":"models/dcim/interface/","title":"Interfaces","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Interfaces in NetBox represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. IP addresses and VLANs can be assigned to interfaces.</p> <p>Tip</p> <p>Like most device components, interfaces are instantiated automatically from interface templates assigned to the selected device type when a device is created.</p> <p>Note</p> <p>Although both devices and virtual machines both can have interfaces assigned, a separate model is used for each. Thus, device interfaces have some properties that are not present on virtual machine interfaces and vice versa.</p>"},{"location":"models/dcim/interface/#fields","title":"Fields","text":""},{"location":"models/dcim/interface/#device","title":"Device","text":"<p>The device to which this interface belongs.</p>"},{"location":"models/dcim/interface/#module","title":"Module","text":"<p>The installed module within the assigned device to which this interface belongs (optional).</p>"},{"location":"models/dcim/interface/#name","title":"Name","text":"<p>The name of the interface, as reported by the device's operating system. Must be unique to the parent device.</p>"},{"location":"models/dcim/interface/#label","title":"Label","text":"<p>An alternative physical label identifying the interface.</p>"},{"location":"models/dcim/interface/#type","title":"Type","text":"<p>The type of interface. Interfaces may be physical or virtual in nature, but only physical interfaces may be connected via cables.</p> <p>Note</p> <p>The interface type refers to the physical termination or port on the device. Interfaces which employ a removable optic or similar transceiver should be defined to represent the type of transceiver in use, irrespective of the physical termination to that transceiver.</p>"},{"location":"models/dcim/interface/#speed","title":"Speed","text":"<p>The operating speed, in kilobits per second (kbps).</p>"},{"location":"models/dcim/interface/#duplex","title":"Duplex","text":"<p>The operation duplex (full, half, or auto).</p>"},{"location":"models/dcim/interface/#vrf","title":"VRF","text":"<p>The virtual routing and forwarding instance to which this interface is assigned.</p>"},{"location":"models/dcim/interface/#mac-address","title":"MAC Address","text":"<p>The 48-bit MAC address (for Ethernet interfaces).</p>"},{"location":"models/dcim/interface/#wwn","title":"WWN","text":"<p>The 64-bit world-wide name (for Fibre Channel interfaces).</p>"},{"location":"models/dcim/interface/#mtu","title":"MTU","text":"<p>The interface's configured maximum transmissible unit (MTU).</p>"},{"location":"models/dcim/interface/#transmit-power","title":"Transmit Power","text":"<p>The interface's configured output power, in dBm (for optical interfaces).</p>"},{"location":"models/dcim/interface/#enabled","title":"Enabled","text":"<p>If not selected, this interface will be treated as disabled/inoperative.</p>"},{"location":"models/dcim/interface/#management-only","title":"Management Only","text":"<p>Designates the interface as handling management traffic only (e.g. for out-of-band management connections).</p>"},{"location":"models/dcim/interface/#mark-connected","title":"Mark Connected","text":"<p>If selected, this component will be treated as if a cable has been connected.</p>"},{"location":"models/dcim/interface/#parent-interface","title":"Parent Interface","text":"<p>Virtual interfaces can be bound to a physical parent interface. This is helpful for modeling virtual interfaces which employ encapsulation on a physical interface, such as an 802.1Q VLAN-tagged subinterface.</p>"},{"location":"models/dcim/interface/#bridged-interface","title":"Bridged Interface","text":"<p>Interfaces can be bridged to other interfaces on a device in two manners: symmetric or grouped.</p> <ul> <li>Symmetric: For example, eth0 is bridged to eth1, and eth1 is bridged to eth0. This effects a point-to-point bridge between the two interfaces, which NetBox will follow when tracing cable paths.</li> <li>Grouped: Multiple interfaces are each bridged to a common virtual bridge interface, effecting a multiaccess bridged segment. NetBox cannot follow these relationships when tracing cable paths, because no forwarding information is available.</li> </ul>"},{"location":"models/dcim/interface/#lag-interface","title":"LAG Interface","text":"<p>Physical interfaces may be arranged into link aggregation groups (LAGs, also known as \"trunks\") and associated with a parent LAG (virtual) interface. LAG interfaces can be recursively nested to model bonding of trunk groups. Like all virtual interfaces, LAG interfaces cannot be connected physically.</p>"},{"location":"models/dcim/interface/#poe-mode","title":"PoE Mode","text":"<p>The power over Ethernet (PoE) mode for this interface. (This field must be left empty for interfaces which do not support PoE.) Choices include:</p> <ul> <li>Powered device (PD)</li> <li>Power-supplying equipment (PSE)</li> </ul>"},{"location":"models/dcim/interface/#poe-type","title":"PoE Type","text":"<p>The classification of PoE transmission supported, for PoE-enabled interfaces. This can be one of the listed IEEE 802.3 standards, or a passive setting (24 or 48 volts across two or four pairs).</p>"},{"location":"models/dcim/interface/#8021q-mode","title":"802.1Q Mode","text":"<p>For switched Ethernet interfaces, this identifies the 802.1Q encapsulation strategy in effect. Options include:</p> <ul> <li>Access: All traffic is assigned to a single VLAN, with no tagging.</li> <li>Tagged: One untagged \"native\" VLAN is allowed, as well as any number of tagged VLANs.</li> <li>Tagged (all): Implies that all VLANs are carried by the interface. One untagged VLAN may be designated.</li> </ul> <p>This field must be left blank for routed interfaces which do employ 802.1Q encapsulation.</p>"},{"location":"models/dcim/interface/#untagged-vlan","title":"Untagged VLAN","text":"<p>The \"native\" (untagged) VLAN for the interface. Valid only when one of the above 802.1Q mode is selected.</p>"},{"location":"models/dcim/interface/#tagged-vlans","title":"Tagged VLANs","text":"<p>The tagged VLANs which are configured to be carried by this interface. Valid only for the \"tagged\" 802.1Q mode above.</p>"},{"location":"models/dcim/interface/#wireless-role","title":"Wireless Role","text":"<p>Indicates the configured role for wireless interfaces (access point or station).</p>"},{"location":"models/dcim/interface/#wireless-channel","title":"Wireless Channel","text":"<p>The configured channel for wireless interfaces.</p> <p>Tip</p> <p>Selecting one of the pre-defined wireless channels will automatically populate the channel frequency and width upon saving the interface.</p>"},{"location":"models/dcim/interface/#channel-frequency","title":"Channel Frequency","text":"<p>The configured operation frequency of a wireless interface, in MHz. This is typically inferred by the configured channel above, but may be set manually e.g. to identify a licensed channel not available for general use.</p>"},{"location":"models/dcim/interface/#channel-width","title":"Channel Width","text":"<p>The configured channel width of a wireless interface, in MHz. This is typically inferred by the configured channel above, but may be set manually e.g. to identify a licensed channel not available for general use.</p>"},{"location":"models/dcim/interface/#wireless-lans","title":"Wireless LANs","text":"<p>The wireless LANs for which this interface carries traffic. (Valid for wireless interfaces only.)</p>"},{"location":"models/dcim/interfacetemplate/","title":"Template da Interface","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A template for a network interface that will be created on all instantiations of the parent device type. See the interface documentation for more detail.</p>"},{"location":"models/dcim/inventoryitem/","title":"Item do Invent\u00e1rio","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Inventory items represent hardware components installed within a device, such as a power supply or CPU or line card. They are intended to be used primarily for inventory purposes.</p> <p>Inventory items are hierarchical in nature, such that any individual item may be designated as the parent for other items. For example, an inventory item might be created to represent a line card which houses several SFP optics, each of which exists as a child item within the device. An inventory item may also be associated with a specific component within the same device. For example, you may wish to associate a transceiver with an interface.</p> <p>Tip</p> <p>Like most device components, inventory items can be instantiated automatically from templates assigned to the selected device type when a device is created.</p>"},{"location":"models/dcim/inventoryitem/#fields","title":"Fields","text":""},{"location":"models/dcim/inventoryitem/#device","title":"Device","text":"<p>The device in which the inventory item is installed.</p>"},{"location":"models/dcim/inventoryitem/#parent","title":"Parent","text":"<p>The parent inventory item to which this item is assigned (optional).</p>"},{"location":"models/dcim/inventoryitem/#name","title":"Name","text":"<p>The inventory item's name. Must be unique to the parent device.</p>"},{"location":"models/dcim/inventoryitem/#label","title":"Label","text":"<p>An alternative physical label identifying the inventory item.</p>"},{"location":"models/dcim/inventoryitem/#role","title":"Role","text":"<p>The functional role assigned to this inventory item.</p>"},{"location":"models/dcim/inventoryitem/#manufacturer","title":"Manufacturer","text":"<p>The manufacturer that produced the item.</p>"},{"location":"models/dcim/inventoryitem/#part-id","title":"Part ID","text":"<p>The part identification or model number assigned by the manufacturer.</p>"},{"location":"models/dcim/inventoryitem/#serial-number","title":"Serial Number","text":"<p>The serial number assigned by the manufacturer.</p>"},{"location":"models/dcim/inventoryitem/#asset-tag","title":"Asset Tag","text":"<p>A unique, locally-administered label used to identify hardware resources.</p>"},{"location":"models/dcim/inventoryitemrole/","title":"Fun\u00e7\u00e3o do Item do Invent\u00e1rio","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Inventory items can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for power supplies, fans, interface optics, etc.</p>"},{"location":"models/dcim/inventoryitemrole/#fields","title":"Fields","text":""},{"location":"models/dcim/inventoryitemrole/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/dcim/inventoryitemrole/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/dcim/inventoryitemrole/#color","title":"Color","text":"<p>The color used when displaying the role in the NetBox UI.</p>"},{"location":"models/dcim/inventoryitemtemplate/","title":"Template do Item do Invent\u00e1rio","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A template for an inventory item that will be automatically created when instantiating a new device. All attributes of this object will be copied to the new inventory item, including the associations with a parent item and assigned component, if any. See the inventory item documentation for more detail.</p>"},{"location":"models/dcim/location/","title":"Localiza\u00e7\u00e3o","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Racks and devices can be grouped by location within a site. A location may represent a floor, room, cage, or similar organizational unit. Locations can be nested to form a hierarchy. For example, you may have floors within a site, and rooms within a floor.</p>"},{"location":"models/dcim/location/#fields","title":"Fields","text":""},{"location":"models/dcim/location/#site","title":"Site","text":"<p>The parent site to which this location belongs.</p>"},{"location":"models/dcim/location/#parent","title":"Parent","text":"<p>The parent location of which this location is a child (optional).</p>"},{"location":"models/dcim/location/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/dcim/location/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/dcim/location/#status","title":"Status","text":"<p>The location's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Location.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/dcim/manufacturer/","title":"Fabricante","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A manufacturer represents the \"make\" of a device; e.g. Cisco or Dell. Each device type must be assigned to a manufacturer. (Inventory items and platforms may also be associated with manufacturers.)</p>"},{"location":"models/dcim/manufacturer/#fields","title":"Fields","text":""},{"location":"models/dcim/manufacturer/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/dcim/manufacturer/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/dcim/module/","title":"M\u00f3dulo","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A module is a field-replaceable hardware component installed within a device which houses its own child components. The most common example is a chassis-based router or switch.</p> <p>Similar to devices, modules are instantiated from module types, and any components associated with the module type are automatically instantiated on the new model. Each module must be installed within a module bay on a device, and each module bay may have only one module installed in it.</p>"},{"location":"models/dcim/module/#fields","title":"Fields","text":""},{"location":"models/dcim/module/#device","title":"Device","text":"<p>The parent device into which the module is installed.</p>"},{"location":"models/dcim/module/#module-bay","title":"Module Bay","text":"<p>The module bay into which the module is installed.</p>"},{"location":"models/dcim/module/#module-type","title":"Module Type","text":"<p>The module type which represents the physical make &amp; model of hardware. By default, module components will be instantiated automatically from the module type when creating a new module.</p>"},{"location":"models/dcim/module/#status","title":"Status","text":"<p>The module's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Module.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/dcim/module/#serial-number","title":"Serial Number","text":"<p>The unique physical serial number assigned to this module by its manufacturer.</p>"},{"location":"models/dcim/module/#asset-tag","title":"Asset Tag","text":"<p>A unique, locally-administered label used to identify hardware resources.</p>"},{"location":"models/dcim/module/#replicate-components","title":"Replicate Components","text":"<p>Controls whether templates module type components are automatically added when creating a new module.</p>"},{"location":"models/dcim/module/#adopt-components","title":"Adopt Components","text":"<p>Controls whether pre-existing components assigned to the device with the same names as components that would be created automatically will be assigned to the new module.</p>"},{"location":"models/dcim/modulebay/","title":"Ba\u00eda do M\u00f3dulo (Module Bay)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Module bays represent a space or slot within a device in which a field-replaceable module may be installed. A common example is that of a chassis-based switch such as the Cisco Nexus 9000 or Juniper EX9200. Modules in turn hold additional components that become available to the parent device.</p> <p>Note</p> <p>If you need to model child devices rather than modules, use a device bay instead.</p> <p>Tip</p> <p>Like most device components, module bays are instantiated automatically from module bay templates assigned to the selected device type when a device is created.</p>"},{"location":"models/dcim/modulebay/#fields","title":"Fields","text":""},{"location":"models/dcim/modulebay/#device","title":"Device","text":"<p>The device to which this module bay belongs.</p>"},{"location":"models/dcim/modulebay/#name","title":"Name","text":"<p>The module bay's name. Must be unique to the parent device.</p>"},{"location":"models/dcim/modulebay/#label","title":"Label","text":"<p>An alternative physical label identifying the module bay.</p>"},{"location":"models/dcim/modulebay/#position","title":"Position","text":"<p>The numeric position in which this module bay is situated. For example, this would be the number assigned to a slot within a chassis-based switch.</p>"},{"location":"models/dcim/modulebaytemplate/","title":"Template da Ba\u00eda do M\u00f3dulo (Module Bay)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A template for a module bay that will be created on all instantiations of the parent device type. See the module bay documentation for more detail.</p>"},{"location":"models/dcim/moduletype/","title":"Tipo do M\u00f3dulo","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A module type represents a specific make and model of hardware component which is installable within a device's module bay and has its own child components. For example, consider a chassis-based switch or router with a number of field-replaceable line cards. Each line card has its own model number and includes a certain set of components such as interfaces. Each module type may have a manufacturer, model number, and part number assigned to it.</p> <p>Similar to device types, each module type can have any of the following component templates associated with it:</p> <ul> <li>Interfaces</li> <li>Console ports</li> <li>Console server ports</li> <li>Power ports</li> <li>Power Outlets</li> <li>Front pass-through ports</li> <li>Rear pass-through ports</li> </ul> <p>Note that device bays and module bays may not be added to modules.</p>"},{"location":"models/dcim/moduletype/#automatic-component-renaming","title":"Automatic Component Renaming","text":"<p>When adding component templates to a module type, the string <code>{module}</code> can be used to reference the <code>position</code> field of the module bay into which an instance of the module type is being installed.</p> <p>For example, you can create a module type with interface templates named <code>Gi{module}/0/[1-48]</code>. When a new module of this type is \"installed\" to a module bay with a position of \"3\", NetBox will automatically name these interfaces <code>Gi3/0/[1-48]</code>.</p> <p>Automatic renaming is supported for all modular component types (those listed above).</p>"},{"location":"models/dcim/moduletype/#fields","title":"Fields","text":""},{"location":"models/dcim/moduletype/#manufacturer","title":"Manufacturer","text":"<p>The manufacturer which produces this type of module.</p>"},{"location":"models/dcim/moduletype/#model","title":"Model","text":"<p>The model number assigned to this module type by its manufacturer. Must be unique to the manufacturer.</p>"},{"location":"models/dcim/moduletype/#part-number","title":"Part Number","text":"<p>An alternative part number to uniquely identify the module type.</p>"},{"location":"models/dcim/moduletype/#weight","title":"Weight","text":"<p>The numeric weight of the module, including a unit designation (e.g. 3 kilograms or 1 pound).</p>"},{"location":"models/dcim/platform/","title":"Plataforma","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A platform defines the type of software running on a device or virtual machine. This can be helpful to model when it is necessary to distinguish between different versions or feature sets. Note that two devices of the same type may be assigned different platforms: For example, one Juniper MX240 might run Junos 14 while another runs Junos 15.</p> <p>Platforms may optionally be limited by manufacturer: If a platform is assigned to a particular manufacturer, it can only be assigned to devices with a type belonging to that manufacturer.</p> <p>The platform model is also used to indicate which NAPALM driver (if any) and any associated arguments NetBox should use when connecting to a remote device. The name of the driver along with optional parameters are stored with the platform.</p> <p>The assignment of platforms to devices is an optional feature, and may be disregarded if not desired.</p>"},{"location":"models/dcim/platform/#fields","title":"Fields","text":""},{"location":"models/dcim/platform/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/dcim/platform/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/dcim/platform/#manufacturer","title":"Manufacturer","text":"<p>If designated, this platform will be available for use only to devices assigned to this manufacturer. This can be handy e.g. for limiting network operating systems to use on hardware produced by the relevant vendor. However, it should not be used when defining general-purpose software platforms.</p>"},{"location":"models/dcim/platform/#napalm-driver","title":"NAPALM Driver","text":"<p>The NAPALM driver associated with this platform.</p>"},{"location":"models/dcim/platform/#napalm-arguments","title":"NAPALM Arguments","text":"<p>Any additional arguments to send when invoking the NAPALM driver assigned to this platform.</p>"},{"location":"models/dcim/powerfeed/","title":"Alimenta\u00e7\u00e3o de Energia","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A power feed represents the distribution of power from a power panel to a particular device, typically a power distribution unit (PDU). The power port (inlet) on a device can be connected via a cable to a power feed. A power feed may optionally be assigned to a rack to allow more easily tracking the distribution of power among racks.</p>"},{"location":"models/dcim/powerfeed/#fields","title":"Fields","text":""},{"location":"models/dcim/powerfeed/#power-panel","title":"Power Panel","text":"<p>The power panel which supplies upstream power to this feed.</p>"},{"location":"models/dcim/powerfeed/#rack","title":"Rack","text":"<p>The rack within which this feed delivers power (optional).</p>"},{"location":"models/dcim/powerfeed/#name","title":"Name","text":"<p>The feed's name or other identifier. Must be unique to the assigned power panel.</p>"},{"location":"models/dcim/powerfeed/#status","title":"Status","text":"<p>The feed's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>PowerFeed.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/dcim/powerfeed/#type","title":"Type","text":"<p>In redundant environments, each power feed can be designated as providing either primary or redundant power. (In environment with only one power source, all power feeds should be designated as primary.)</p>"},{"location":"models/dcim/powerfeed/#mark-connected","title":"Mark Connected","text":"<p>If selected, the power feed will be treated as if a cable has been connected.</p>"},{"location":"models/dcim/powerfeed/#supply","title":"Supply","text":"<p>Electrical current type (AC or DC).</p>"},{"location":"models/dcim/powerfeed/#voltage","title":"Voltage","text":"<p>Operating circuit voltage, in volts.</p>"},{"location":"models/dcim/powerfeed/#amperage","title":"Amperage","text":"<p>Operation circuit amperage, in amperes.</p>"},{"location":"models/dcim/powerfeed/#phase","title":"Phase","text":"<p>Indicates whether the circuit provides single- or three-phase power.</p>"},{"location":"models/dcim/powerfeed/#max-utilization","title":"Max Utilization","text":"<p>The maximum safe utilization of the feed, expressed as a percentage of the total available power. (Typically this will be set to around 80%, to avoid tripping a breaker during heaving spikes in current draw.)</p> <p>Info</p> <p>The power utilization of a rack is calculated when one or more power feeds are assigned to the rack and connected to devices that draw power.</p>"},{"location":"models/dcim/poweroutlet/","title":"Tomada de Energia","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Power outlets represent the outlets on a power distribution unit (PDU) or other device that supplies power to dependent devices. Each power port may be assigned a physical type, and may be associated with a specific feed leg (where three-phase power is used) and/or a specific upstream power port. This association can be used to model the distribution of power within a device.</p> <p>For example, imagine a PDU with one power port which draws from a three-phase feed and 48 power outlets arranged into three banks of 16 outlets each. Outlets 1-16 would be associated with leg A on the port, and outlets 17-32 and 33-48 would be associated with legs B and C, respectively.</p> <p>Tip</p> <p>Like most device components, power outlets are instantiated automatically from power outlet templates assigned to the selected device type when a device is created.</p>"},{"location":"models/dcim/poweroutlet/#fields","title":"Fields","text":""},{"location":"models/dcim/poweroutlet/#device","title":"Device","text":"<p>The device to which this power outlet belongs.</p>"},{"location":"models/dcim/poweroutlet/#module","title":"Module","text":"<p>The installed module within the assigned device to which this power outlet belongs (optional).</p>"},{"location":"models/dcim/poweroutlet/#name","title":"Name","text":"<p>The name of the power outlet. Must be unique to the parent device.</p>"},{"location":"models/dcim/poweroutlet/#label","title":"Label","text":"<p>An alternative physical label identifying the power outlet.</p>"},{"location":"models/dcim/poweroutlet/#type","title":"Type","text":"<p>The type of power outlet.</p>"},{"location":"models/dcim/poweroutlet/#power-port","title":"Power Port","text":"<p>When modeling a device which redistributes power from an upstream supply, such as a power distribution unit (PDU), each power outlet should be mapped to the respective power port on the device which supplies power. For example, a 24-outlet PDU may two power ports, each distributing power to 12 of its outlets.</p>"},{"location":"models/dcim/poweroutlet/#feed-leg","title":"Feed Leg","text":"<p>This field is used to indicate to which leg of three-phase power circuit the outlet is bound. (This should be left blank for single-phase applications.)</p>"},{"location":"models/dcim/poweroutlet/#mark-connected","title":"Mark Connected","text":"<p>If selected, this component will be treated as if a cable has been connected.</p>"},{"location":"models/dcim/poweroutlettemplate/","title":"Template da Tomada de Energia","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A template for a power outlet that will be created on all instantiations of the parent device type. See the power outlet documentation for more detail.</p>"},{"location":"models/dcim/powerpanel/","title":"Pa\u00ednel de Energia","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A power panel represents the origin point in NetBox for electrical power being disseminated by one or more power feeds. In a data center environment, one power panel often serves a group of racks, with an individual power feed extending to each rack, though this is not always the case. It is common to have two sets of panels and feeds arranged in parallel to provide redundant power to each rack.</p> <p>Note</p> <p>NetBox does not model the mechanism by which power is delivered to a power panel. Power panels define the root level of the power distribution hierarchy in NetBox.</p>"},{"location":"models/dcim/powerpanel/#fields","title":"Fields","text":""},{"location":"models/dcim/powerpanel/#site","title":"Site","text":"<p>The site in which the power panel resides.</p>"},{"location":"models/dcim/powerpanel/#location","title":"Location","text":"<p>A specific location within the assigned site where the power panel is installed.</p>"},{"location":"models/dcim/powerpanel/#name","title":"Name","text":"<p>The power panel's name. Must be unique to the assigned site.</p>"},{"location":"models/dcim/powerport/","title":"Porta de Energia","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A power port is a device component which draws power from some external source (e.g. an upstream power outlet), and generally represents a power supply internal to a device.</p> <p>Tip</p> <p>Like most device components, power ports are instantiated automatically from power port templates assigned to the selected device type when a device is created.</p>"},{"location":"models/dcim/powerport/#fields","title":"Fields","text":""},{"location":"models/dcim/powerport/#device","title":"Device","text":"<p>The device to which this power port belongs.</p>"},{"location":"models/dcim/powerport/#module","title":"Module","text":"<p>The installed module within the assigned device to which this power port belongs (optional).</p>"},{"location":"models/dcim/powerport/#name","title":"Name","text":"<p>The name of the power port. Must be unique to the parent device.</p>"},{"location":"models/dcim/powerport/#label","title":"Label","text":"<p>An alternative physical label identifying the power port.</p>"},{"location":"models/dcim/powerport/#type","title":"Type","text":"<p>The type of power port.</p>"},{"location":"models/dcim/powerport/#maximum-draw","title":"Maximum Draw","text":"<p>The maximum amount of power this port consumes (in watts).</p> <p>Info</p> <p>When creating a power port on a device which is mapped to outlets and supplies power to downstream devices, the maximum and allocated draw numbers should be left blank. Utilization will be calculated by taking the sum of all power ports of devices connected downstream.</p>"},{"location":"models/dcim/powerport/#allocated-draw","title":"Allocated Draw","text":"<p>The budgeted amount of power this port consumes (in watts).</p>"},{"location":"models/dcim/powerport/#mark-connected","title":"Mark Connected","text":"<p>If selected, this component will be treated as if a cable has been connected.</p>"},{"location":"models/dcim/powerporttemplate/","title":"Template da Porta de Energia","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A template for a power port that will be created on all instantiations of the parent device type. See the power port documentation for more detail.</p>"},{"location":"models/dcim/rack/","title":"Rack","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>The rack model represents a physical two- or four-post equipment rack in which devices can be installed. Each rack must be assigned to a site, and may optionally be assigned to a location within that site. Racks can also be organized by user-defined functional roles. The name and facility ID of each rack within a location must be unique.</p> <p>Rack height is measured in rack units (U); racks are commonly between 42U and 48U tall, but NetBox allows you to define racks of arbitrary height. A toggle is provided to indicate whether rack units are in ascending (from the ground up) or descending order.</p> <p>Each rack is assigned a name and (optionally) a separate facility ID. This is helpful when leasing space in a data center your organization does not own: The facility will often assign a seemingly arbitrary ID to a rack (for example, \"M204.313\") whereas internally you refer to is simply as \"R113.\" A unique serial number and asset tag may also be associated with each rack.</p>"},{"location":"models/dcim/rack/#fields","title":"Fields","text":""},{"location":"models/dcim/rack/#site","title":"Site","text":"<p>The site to which the rack is assigned.</p>"},{"location":"models/dcim/rack/#location","title":"Location","text":"<p>The location within a site where the rack has been installed (optional).</p>"},{"location":"models/dcim/rack/#name","title":"Name","text":"<p>The rack's name or identifier. Must be unique to the rack's location, if assigned.</p>"},{"location":"models/dcim/rack/#status","title":"Status","text":"<p>Operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Rack.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/dcim/rack/#role","title":"Role","text":"<p>The functional role fulfilled by the rack.</p>"},{"location":"models/dcim/rack/#facility-id","title":"Facility ID","text":"<p>An alternative identifier assigned to the rack e.g. by the facility operator. This is helpful for tracking datacenter rack designations in a colocation facility.</p>"},{"location":"models/dcim/rack/#serial-number","title":"Serial Number","text":"<p>The unique physical serial number assigned to this rack.</p>"},{"location":"models/dcim/rack/#asset-tag","title":"Asset Tag","text":"<p>A unique, locally-administered label used to identify hardware resources.</p>"},{"location":"models/dcim/rack/#type","title":"Type","text":"<p>A rack can be designated as one of the following types:</p> <ul> <li>2-post frame</li> <li>4-post frame</li> <li>4-post cabinet</li> <li>Wall-mounted frame</li> <li>Wall-mounted cabinet</li> </ul>"},{"location":"models/dcim/rack/#width","title":"Width","text":"<p>The canonical distance between the two vertical rails on a face. (This is typically 19 inches, however other standard widths exist.)</p>"},{"location":"models/dcim/rack/#height","title":"Height","text":"<p>The height of the rack, measured in units.</p>"},{"location":"models/dcim/rack/#outer-dimensions","title":"Outer Dimensions","text":"<p>The external width and depth of the rack can be tracked to aid in floorplan calculations. These measurements must be designated in either millimeters or inches.</p>"},{"location":"models/dcim/rack/#mounting-depth","title":"Mounting Depth","text":"<p>The maximum depth of a mounted device that the rack can accommodate, in millimeters. For four-post frames or cabinets, this is the horizontal distance between the front and rear vertical rails. (Note that this measurement does not include space between the rails and the cabinet doors.)</p>"},{"location":"models/dcim/rack/#weight","title":"Weight","text":"<p>The numeric weight of the rack, including a unit designation (e.g. 10 kilograms or 20 pounds).</p>"},{"location":"models/dcim/rack/#maximum-weight","title":"Maximum Weight","text":"<p>The maximum total weight capacity for all installed devices, inclusive of the rack itself.</p>"},{"location":"models/dcim/rack/#descending-units","title":"Descending Units","text":"<p>If selected, the rack's elevation will display unit 1 at the top of the rack. (Most racks use ascending numbering, with unit 1 assigned to the bottommost position.)</p>"},{"location":"models/dcim/rackreservation/","title":"Reserva de Rack","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Users can reserve specific units within a rack for future use. An arbitrary set of units within a rack can be associated with a single reservation, but reservations cannot span multiple racks. A description is required for each reservation, reservations may optionally be associated with a specific tenant.</p>"},{"location":"models/dcim/rackreservation/#fields","title":"Fields","text":""},{"location":"models/dcim/rackreservation/#rack","title":"Rack","text":"<p>The rack being reserved.</p>"},{"location":"models/dcim/rackreservation/#units","title":"Units","text":"<p>The rack unit or units being reserved. Multiple units can be expressed using commas and/or hyphens. For example, <code>1,3,5-7</code> specifies units 1, 3, 5, 6, and 7.</p>"},{"location":"models/dcim/rackreservation/#user","title":"User","text":"<p>The NetBox user account associated with the reservation. Note that users with sufficient permission can make rack reservations for other users.</p>"},{"location":"models/dcim/rackreservation/#description","title":"Description","text":"<p>Every rack reservation must include a description of its purpose.</p>"},{"location":"models/dcim/rackrole/","title":"Fun\u00e7\u00e3o do Rack","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Each rack can optionally be assigned a user-defined functional role. For example, you might designate a rack for compute or storage resources, or to house colocated customer devices.</p>"},{"location":"models/dcim/rackrole/#fields","title":"Fields","text":""},{"location":"models/dcim/rackrole/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/dcim/rackrole/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/dcim/rackrole/#color","title":"Color","text":"<p>The color used when displaying the role in the NetBox UI.</p>"},{"location":"models/dcim/rearport/","title":"Porta Traseira","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Like front ports, rear ports are pass-through ports which represent the continuation of a path from one cable to the next. Each rear port is defined with its physical type and a number of positions: Rear ports with more than one position can be mapped to multiple front ports. This can be useful for modeling instances where multiple paths share a common cable (for example, six discrete two-strand fiber connections sharing a 12-strand MPO cable).</p> <p>Note</p> <p>Front and rear ports need not necessarily reside on the actual front or rear device face. This terminology is used primarily to distinguish between the two components in a pass-through port pairing.</p> <p>Tip</p> <p>Like most device components, rear ports are instantiated automatically from rear port templates assigned to the selected device type when a device is created.</p>"},{"location":"models/dcim/rearport/#fields","title":"Fields","text":""},{"location":"models/dcim/rearport/#device","title":"Device","text":"<p>The device to which this port belongs.</p>"},{"location":"models/dcim/rearport/#module","title":"Module","text":"<p>The installed module within the assigned device to which this port belongs (optional).</p>"},{"location":"models/dcim/rearport/#name","title":"Name","text":"<p>The port's name. Must be unique to the parent device.</p>"},{"location":"models/dcim/rearport/#label","title":"Label","text":"<p>An alternative physical label identifying the port.</p>"},{"location":"models/dcim/rearport/#type","title":"Type","text":"<p>The port's termination type.</p>"},{"location":"models/dcim/rearport/#color","title":"Color","text":"<p>The port's color (optional).</p>"},{"location":"models/dcim/rearport/#positions","title":"Positions","text":"<p>The number of front ports to which this rear port can be mapped. For example, an MPO fiber termination cassette might have a single 12-strand rear port mapped to 12 discrete front ports, each terminating a single fiber strand. (For rear ports which map directly to a single front port, set this to <code>1</code>.)</p>"},{"location":"models/dcim/rearport/#mark-connected","title":"Mark Connected","text":"<p>If selected, this component will be treated as if a cable has been connected.</p>"},{"location":"models/dcim/rearporttemplate/","title":"Template da Porta Traseira","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A template for a rear-facing pass-through port that will be created on all instantiations of the parent device type. See the rear port documentation for more detail.</p>"},{"location":"models/dcim/region/","title":"Regi\u00e3o","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Sites can be arranged geographically using regions. A region might represent a continent, country, city, campus, or other area depending on your use case. Regions can be nested recursively to construct a hierarchy. For example, you might define several country regions, and within each of those several state or city regions to which sites are assigned.</p>"},{"location":"models/dcim/region/#fields","title":"Fields","text":""},{"location":"models/dcim/region/#parent","title":"Parent","text":"<p>The parent region, if any.</p>"},{"location":"models/dcim/region/#name","title":"Name","text":"<p>The region's name. Must be unique to the parent region, if one is assigned.</p>"},{"location":"models/dcim/region/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/dcim/site/","title":"Site (Local)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>How you choose to employ sites when modeling your network may vary depending on the nature of your organization, but generally a site will equate to a building or campus. For example, a chain of banks might create a site to represent each of its branches, a site for its corporate headquarters, and two additional sites for its presence in two colocation facilities.</p>"},{"location":"models/dcim/site/#fields","title":"Fields","text":""},{"location":"models/dcim/site/#name","title":"Name","text":"<p>The site's unique name.</p>"},{"location":"models/dcim/site/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/dcim/site/#status","title":"Status","text":"<p>The site's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Site.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/dcim/site/#region","title":"Region","text":"<p>The parent region to which the site belongs, if any.</p>"},{"location":"models/dcim/site/#facility","title":"Facility","text":"<p>Data center or facility designation for identifying the site.</p>"},{"location":"models/dcim/site/#asns","title":"ASNs","text":"<p>Each site can have multiple AS numbers assigned to it.</p>"},{"location":"models/dcim/site/#time-zone","title":"Time Zone","text":"<p>The site's local time zone. (Time zones are provided by the zoneinfo library.)</p>"},{"location":"models/dcim/site/#physical-address","title":"Physical Address","text":"<p>The site's physical address, used for mapping.</p>"},{"location":"models/dcim/site/#shipping-address","title":"Shipping Address","text":"<p>The address to use for deliveries destined for the site.</p> <p>Tip</p> <p>You can also designate points of contact for each site to provide additional contact details.</p>"},{"location":"models/dcim/site/#latitude-longitude","title":"Latitude &amp; Longitude","text":"<p>GPS coordinates of the site for geolocation.</p>"},{"location":"models/dcim/sitegroup/","title":"Grupo de Site (Locais)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Like regions, site groups can be used to organize sites. Whereas regions are intended to provide geographic organization, site groups can be used to classify sites by role or function. Also like regions, site groups can be nested to form a hierarchy. Sites which belong to a child group are also considered to be members of all its parent groups.</p>"},{"location":"models/dcim/sitegroup/#fields","title":"Fields","text":""},{"location":"models/dcim/sitegroup/#parent","title":"Parent","text":"<p>The parent site group, if any.</p>"},{"location":"models/dcim/sitegroup/#name","title":"Name","text":"<p>The site group's name. Must be unique to the parent group, if one is assigned.</p>"},{"location":"models/dcim/sitegroup/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/dcim/virtualchassis/","title":"Chassis Virtual","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A virtual chassis represents a set of devices which share a common control plane. A common example of this is a stack of switches which are connected and configured to operate as a single managed device. Each device in the virtual chassis is referred to as a VC member, and assigned a position and (optionally) a priority. VC member devices commonly reside within the same rack, though this is not a requirement.</p> <p>One of the member devices may be designated as the VC master: This device will typically be assigned a name, services, virtual interfaces, and other attributes related to managing the VC.  If a VC master is defined, interfaces from all VC members are displayed when navigating to its device interfaces view. This does not include management-only interfaces belonging to other members.</p> <p>Note</p> <p>It's important to recognize the distinction between a virtual chassis and a chassis-based device. A virtual chassis is not suitable for modeling a chassis-based switch with removable line cards (such as the Juniper EX9208), as its line cards are not physically autonomous devices. Instead, use modules for these.</p>"},{"location":"models/dcim/virtualchassis/#fields","title":"Fields","text":""},{"location":"models/dcim/virtualchassis/#name","title":"Name","text":"<p>The virtual chassis' name.</p>"},{"location":"models/dcim/virtualchassis/#domain","title":"Domain","text":"<p>The domain assigned for VC member devices.</p>"},{"location":"models/dcim/virtualchassis/#master","title":"Master","text":"<p>The member device which has been designated as the chassis master (optional).</p>"},{"location":"models/dcim/virtualdevicecontext/","title":"Contexto Virtual do Dispositivo","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A virtual device context (VDC) represents a logical partition within a physical device, to which interfaces from the parent device can be allocated. Each VDC effectively provides an isolated control plane, but relies on shared resources of the parent device. A VDC is somewhat similar to a virtual machine in that it effects isolation between various components, but stops short of delivering a fully virtualized environment.</p> <p>Each VDC must be assigned to a device upon creation, after which interfaces belonging to that device can be assigned to one or more of its VDCs. A VDC can have any number of interfaces assigned to it, and an interface can belong to any number of VDCs.</p> <p>A VDC by Any Other Name</p> <p>Network vendors use differing names for this concept. Cisco uses the term VDC, whereas Juniper refers to it as a Virtual Routing Instance, and Fortinet uses Virtual Domain, for instance. While there may be some nuance among the vendors' unique implementations, the general concept remains the same for each.</p>"},{"location":"models/dcim/virtualdevicecontext/#fields","title":"Fields","text":""},{"location":"models/dcim/virtualdevicecontext/#device","title":"Device","text":"<p>The device to which this VDC belongs.</p>"},{"location":"models/dcim/virtualdevicecontext/#name","title":"Name","text":"<p>The VDC's configured name. Must be unique to the assigned device.</p>"},{"location":"models/dcim/virtualdevicecontext/#status","title":"Status","text":"<p>The operational status of the VDC.</p>"},{"location":"models/dcim/virtualdevicecontext/#identifier","title":"Identifier","text":"<p>A vendor-prescribed unique identifier for the VDC (optional). Must be unique to the assigned device if defined.</p>"},{"location":"models/dcim/virtualdevicecontext/#primary-ipv4-ipv6-addresses","title":"Primary IPv4 &amp; IPv6 Addresses","text":"<p>Each VDC may designate one primary IPv4 address and/or one primary IPv6 address for management purposes.</p> <p>Tip</p> <p>NetBox will prefer IPv6 addresses over IPv4 addresses by default. This can be changed by setting the <code>PREFER_IPV4</code> configuration parameter.</p>"},{"location":"models/extras/branch/","title":"Filial","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A branch is a collection of related staged changes that have been prepared for merging into the active database. A branch can be merged by executing its <code>commit()</code> method. Deleting a branch will delete all its related changes.</p>"},{"location":"models/extras/branch/#fields","title":"Fields","text":""},{"location":"models/extras/branch/#name","title":"Name","text":"<p>The branch's name.</p>"},{"location":"models/extras/branch/#user","title":"User","text":"<p>The user to which the branch belongs (optional).</p>"},{"location":"models/extras/configcontext/","title":"Configura\u00e7\u00f5es de Contexto","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.</p> <p>See the context data documentation for more information.</p>"},{"location":"models/extras/configcontext/#fields","title":"Fields","text":""},{"location":"models/extras/configcontext/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/extras/configcontext/#weight","title":"Weight","text":"<p>A numeric value which influences the order in which context data is merged. Contexts with a lower weight are merged before those with a higher weight.</p>"},{"location":"models/extras/configcontext/#data","title":"Data","text":"<p>The context data expressed in JSON format.</p>"},{"location":"models/extras/configcontext/#is-active","title":"Is Active","text":"<p>If not selected, this config context will be excluded from rendering. This can be convenient to temporarily disable a config context.</p>"},{"location":"models/extras/configcontext/#object-assignment","title":"Object Assignment","text":"<p>Each configuration context may be assigned with any number of objects of the supported types. If no related objects are selected, it will be considered a \"global\" config context and apply to all devices and virtual machines.</p>"},{"location":"models/extras/customfield/","title":"Campos Customizados","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>NetBox administrators can extend NetBox's built-in data model by adding custom fields to most object types. See the custom fields documentation for more information.</p>"},{"location":"models/extras/customfield/#fields","title":"Fields","text":""},{"location":"models/extras/customfield/#models","title":"Model(s)","text":"<p>Select the NetBox object type or types to which this custom field applies.</p>"},{"location":"models/extras/customfield/#name","title":"Name","text":"<p>The raw field name. This will be used in the database and API, and should consist only of alphanumeric characters and underscores. (Use the <code>label</code> field to designate a human-friendly name for the custom field.)</p>"},{"location":"models/extras/customfield/#label","title":"Label","text":"<p>An optional human-friendly name for the custom field. If not defined, the field's <code>name</code> attribute will be used.</p>"},{"location":"models/extras/customfield/#group-name","title":"Group Name","text":"<p>If this custom field should be grouped with others, specify the name of the group here. Custom fields with no group defined will be ordered only by weight and name.</p>"},{"location":"models/extras/customfield/#type","title":"Type","text":"<p>The type of data this field holds. This must be one of the following:</p> Type Description Text Free-form text (intended for single-line use) Long text Free-form of any length; supports Markdown rendering Integer A whole number (positive or negative) Boolean True or false Date A date in ISO 8601 format (YYYY-MM-DD) URL This will be presented as a link in the web UI JSON Arbitrary data stored in JSON format Selection A selection of one of several pre-defined custom choices Multiple selection A selection field which supports the assignment of multiple values Object A single NetBox object of the type defined by <code>object_type</code> Multiple object One or more NetBox objects of the type defined by <code>object_type</code>"},{"location":"models/extras/customfield/#object-type","title":"Object Type","text":"<p>For object and multiple-object fields only. Designates the type of NetBox object being referenced.</p>"},{"location":"models/extras/customfield/#weight","title":"Weight","text":"<p>A numeric weight used to override alphabetic ordering of fields by name. Custom fields with a lower weight will be listed before those with a higher weight. (Note that weight applies within the context of a custom field group, if defined.)</p>"},{"location":"models/extras/customfield/#required","title":"Required","text":"<p>If checked, this custom field must be populated with a valid value for the object to pass validation.</p>"},{"location":"models/extras/customfield/#description","title":"Description","text":"<p>A brief description of the field's purpose (optional).</p>"},{"location":"models/extras/customfield/#filter-logic","title":"Filter Logic","text":"<p>Defines how filters are evaluated against custom field values.</p> Option Description Disabled Filtering disabled Loose Match any occurrence of the value Exact Match only the complete field value"},{"location":"models/extras/customfield/#ui-visibility","title":"UI Visibility","text":"<p>Controls how and whether the custom field is displayed within the NetBox user interface.</p> Option Description Read/write Display and permit editing (default) Read-only Display field but disallow editing Hidden Do not display field in the UI"},{"location":"models/extras/customfield/#default","title":"Default","text":"<p>The default value to populate for the custom field when creating new objects (optional). This value must be expressed as JSON. If this is a choice or multi-choice field, this must be one of the available choices.</p>"},{"location":"models/extras/customfield/#choices","title":"Choices","text":"<p>For choice and multi-choice custom fields only. A comma-delimited list of the available choices.</p>"},{"location":"models/extras/customfield/#minimum-value","title":"Minimum Value","text":"<p>For numeric custom fields only. The minimum valid value (optional).</p>"},{"location":"models/extras/customfield/#maximum-value","title":"Maximum Value","text":"<p>For numeric custom fields only. The maximum valid value (optional).</p>"},{"location":"models/extras/customfield/#validation-regex","title":"Validation Regex","text":"<p>For string-based custom fields only. A regular expression used to validate the field's value (optional).</p>"},{"location":"models/extras/customlink/","title":"Links Customizados","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Users can add custom links to object views in NetBox to reference external resources. For example, you might create a custom link for devices pointing to a monitoring system. See the custom links documentation for more information.</p>"},{"location":"models/extras/customlink/#fields","title":"Fields","text":""},{"location":"models/extras/customlink/#name","title":"Name","text":"<p>The name of the custom link. This is used primarily for administrative purposes only, although custom links of the same weight are ordered alphabetically by name when being rendered in the UI.</p>"},{"location":"models/extras/customlink/#content-type","title":"Content Type","text":"<p>The type of NetBox object to which this custom link applies.</p>"},{"location":"models/extras/customlink/#weight","title":"Weight","text":"<p>A numeric weight used to override alphabetic ordering of links by name. Custom fields with a lower weight will be listed before those with a higher weight. (Note that weight applies within the context of a custom link group, if defined.)</p>"},{"location":"models/extras/customlink/#group-name","title":"Group Name","text":"<p>If this custom link should be grouped with others, specify the name of the group here. Grouped custom links will be listed in a dropdown menu attached to a single button bearing the group name.</p>"},{"location":"models/extras/customlink/#button-class","title":"Button Class","text":"<p>The color of the UI button.</p>"},{"location":"models/extras/customlink/#enabled","title":"Enabled","text":"<p>If not selected, the custom link will not be rendered. This can be useful for temporarily disabling a custom link.</p>"},{"location":"models/extras/customlink/#new-window","title":"New Window","text":"<p>If selected, this will force the link to open in a new browser tab or window.</p>"},{"location":"models/extras/customlink/#link-text","title":"Link Text","text":"<p>Jinja2 template code for rendering the button text. (Note that this does not need to contain any template variables.) See below for available context data.</p> <p>Note</p> <p>Custom links which render an empty text value will not be displayed in the UI. This can be used to toggle the inclusion of a link based on object attributes.</p>"},{"location":"models/extras/customlink/#link-url","title":"Link URL","text":"<p>Jinja2 template code for rendering the hyperlink. See below for available context data.</p>"},{"location":"models/extras/customlink/#context-data","title":"Context Data","text":"<p>The following context variables are available in to the text and link templates.</p> Variable Description <code>object</code> The NetBox object being displayed <code>debug</code> A boolean indicating whether debugging is enabled <code>request</code> The current WSGI request <code>user</code> The current user (if authenticated) <code>perms</code> The permissions assigned to the user"},{"location":"models/extras/exporttemplate/","title":"Templates de Exporta\u00e7\u00e3o","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Export templates are used to render arbitrary data from a set of NetBox objects. For example, you might want to automatically generate a network monitoring service configuration from a list of device objects. See the export templates documentation for more information.</p>"},{"location":"models/extras/exporttemplate/#fields","title":"Fields","text":""},{"location":"models/extras/exporttemplate/#name","title":"Name","text":"<p>The name of the export template. This will appear in the \"export\" dropdown list in the NetBox UI.</p>"},{"location":"models/extras/exporttemplate/#content-type","title":"Content Type","text":"<p>The type of NetBox object to which the export template applies.</p>"},{"location":"models/extras/exporttemplate/#template-code","title":"Template Code","text":"<p>Jinja2 template code for rendering the exported data.</p>"},{"location":"models/extras/exporttemplate/#mime-type","title":"MIME Type","text":"<p>The MIME type to indicate in the response when rendering the export template (optional). Defaults to <code>text/plain</code>.</p>"},{"location":"models/extras/exporttemplate/#file-extension","title":"File Extension","text":"<p>The file extension to append to the file name in the response (optional).</p>"},{"location":"models/extras/exporttemplate/#as-attachment","title":"As Attachment","text":"<p>If selected, the rendered content will be returned as a file attachment, rather than displayed directly in-browser (where supported).</p>"},{"location":"models/extras/imageattachment/","title":"Anexar Imagens","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Certain objects in NetBox support the attachment of uploaded images. These will be saved to the NetBox server and made available whenever the object is viewed.</p>"},{"location":"models/extras/imageattachment/#fields","title":"Fields","text":""},{"location":"models/extras/imageattachment/#name","title":"Name","text":"<p>The name of the image being attached. If not defined, this will be inferred from the name of the uploaded file.</p>"},{"location":"models/extras/imageattachment/#image","title":"Image","text":"<p>The image file to upload. Note that the uploaded file must be a supported image type, or validation will fail.</p>"},{"location":"models/extras/journalentry/","title":"Entradas de Journal","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Most objects in NetBox support journaling. This is the ability of users to record chronological notes indicating changes to or work performed on resources in NetBox. For example, a data center technician might add a journal entry for a device when swapping out a failed power supply.</p>"},{"location":"models/extras/journalentry/#fields","title":"Fields","text":""},{"location":"models/extras/journalentry/#kind","title":"Kind","text":"<p>A general classification for the entry type (info, success, warning, or danger.)</p> <p>Tip</p> <p>Additional kinds may be defined by setting <code>JournalEntry.kind</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/extras/journalentry/#comments","title":"Comments","text":"<p>The body of the journal entry. Markdown rendering is supported.</p>"},{"location":"models/extras/savedfilter/","title":"Filtros Salvos","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>When filtering lists of objects in NetBox, users can save applied filters for future use. This is handy for complex filter strategies involving multiple discrete filters. For example, you might want to find all planned devices within a region that have a specific platform. Once you've applied the desired filters to the object list, simply create a saved filter with name and optional description. This filter can then be applied directly for future queries via both the UI and REST API.</p>"},{"location":"models/extras/savedfilter/#fields","title":"Fields","text":""},{"location":"models/extras/savedfilter/#name","title":"Name","text":"<p>The filter's human-friendly name.</p>"},{"location":"models/extras/savedfilter/#slug","title":"Slug","text":"<p>The unique identifier by which this filter will be referenced during application (e.g. <code>?filter=my-slug</code>).</p>"},{"location":"models/extras/savedfilter/#user","title":"User","text":"<p>The user to which this filter belongs. The current user will be assigned automatically when creating saved filters via the UI, and cannot be changed.</p>"},{"location":"models/extras/savedfilter/#weight","title":"Weight","text":"<p>A numeric weight used to override alphabetic ordering of filters by name. Saved filters with a lower weight will be listed before those with a higher weight.</p>"},{"location":"models/extras/savedfilter/#enabled","title":"Enabled","text":"<p>Determines whether this filter can be used. Disabled filters will not appear as options in the UI, however they will be included in API results.</p>"},{"location":"models/extras/savedfilter/#shared","title":"Shared","text":"<p>Determines whether this filter is intended for use by all users or only its owner. Note that disabling this field does not hide the filter from other users; it is merely excluded from the list of available filters in UI object list views.</p>"},{"location":"models/extras/savedfilter/#parameters","title":"Parameters","text":"<p>The query parameters to apply when the filter is active. These must be specified as JSON data. For example, the URL query string</p> <pre><code>?status=active&amp;region_id=51&amp;tag=alpha&amp;tag=bravo\n</code></pre> <p>is represented in JSON as</p> <pre><code>{\n\"tag\": [\"alpha\", \"bravo\"],\n\"status\": \"active\",\n\"region_id\": 51\n}\n</code></pre>"},{"location":"models/extras/stagedchange/","title":"Mudan\u00e7as Pendentes (Staged)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A staged change represents the creation of a new object or the modification or deletion of an existing object to be performed at some future point. Each change must be assigned to a branch.</p> <p>Changes can be applied individually via the <code>apply()</code> method, however it is recommended to apply changes in bulk using the parent branch's <code>commit()</code> method.</p>"},{"location":"models/extras/stagedchange/#fields","title":"Fields","text":"<p>Warning</p> <p>Staged changes are not typically created or manipulated directly, but rather effected through the use of the <code>checkout()</code> context manager.</p>"},{"location":"models/extras/stagedchange/#branch","title":"Branch","text":"<p>The branch to which this change belongs.</p>"},{"location":"models/extras/stagedchange/#action","title":"Action","text":"<p>The type of action this change represents: <code>create</code>, <code>update</code>, or <code>delete</code>.</p>"},{"location":"models/extras/stagedchange/#object","title":"Object","text":"<p>A generic foreign key referencing the existing object to which this change applies.</p>"},{"location":"models/extras/stagedchange/#data","title":"Data","text":"<p>JSON representation of the changes being made to the object (not applicable for deletions).</p>"},{"location":"models/extras/tag/","title":"Tags","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Tags are user-defined labels which can be applied to a variety of objects within NetBox. They can be used to establish dimensions of organization beyond the relationships built into NetBox. For example, you might create a tag to identify a particular ownership or condition across several types of objects.</p>"},{"location":"models/extras/tag/#fields","title":"Fields","text":""},{"location":"models/extras/tag/#name","title":"Name","text":"<p>A unique human-friendly label for the tag.</p>"},{"location":"models/extras/tag/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value will be used for filtering.) This is automatically generated from the tag's name, but can be altered as needed.</p>"},{"location":"models/extras/tag/#color","title":"Color","text":"<p>The color to use when displaying the tag in the NetBox UI.</p>"},{"location":"models/extras/webhook/","title":"Webhooks","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A webhook is a mechanism for conveying to some external system a change that took place in NetBox. For example, you may want to notify a monitoring system whenever the status of a device is updated in NetBox. This can be done by creating a webhook for the device model in NetBox and identifying the webhook receiver. When NetBox detects a change to a device, an HTTP request containing the details of the change and who made it be sent to the specified receiver.</p> <p>See the webhooks documentation for more information.</p>"},{"location":"models/extras/webhook/#fields","title":"Fields","text":""},{"location":"models/extras/webhook/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/extras/webhook/#content-types","title":"Content Types","text":"<p>The type(s) of object in NetBox that will trigger the webhook.</p>"},{"location":"models/extras/webhook/#enabled","title":"Enabled","text":"<p>If not selected, the webhook will be inactive.</p>"},{"location":"models/extras/webhook/#events","title":"Events","text":"<p>The events which will trigger the webhook. At least one event type must be selected.</p> Name Description Creations A new object has been created Updates An existing object has been modified Deletions An object has been deleted"},{"location":"models/extras/webhook/#url","title":"URL","text":"<p>The URL to which the webhook HTTP request will be made.</p>"},{"location":"models/extras/webhook/#http-method","title":"HTTP Method","text":"<p>The type of HTTP request to send. Options are:</p> <ul> <li><code>GET</code></li> <li><code>POST</code></li> <li><code>PUT</code></li> <li><code>PATCH</code></li> <li><code>DELETE</code></li> </ul>"},{"location":"models/extras/webhook/#http-content-type","title":"HTTP Content Type","text":"<p>The content type to indicate in the outgoing HTTP request header. See this list of known types for reference.</p>"},{"location":"models/extras/webhook/#additional-headers","title":"Additional Headers","text":"<p>Any additional header to include with the outgoing HTTP request. These should be defined in the format <code>Name: Value</code>, with each header on a separate line. Jinja2 templating is supported for this field.</p>"},{"location":"models/extras/webhook/#body-template","title":"Body Template","text":"<p>Jinja2 template for a custom request body, if desired. If not defined, NetBox will populate the request body with a raw dump of the webhook context.</p>"},{"location":"models/extras/webhook/#secret","title":"Secret","text":"<p>A secret string used to prove authenticity of the request (optional). This will append a <code>X-Hook-Signature</code> header to the request, consisting of a HMAC (SHA-512) hex digest of the request body using the secret as the key.</p>"},{"location":"models/extras/webhook/#ssl-verification","title":"SSL Verification","text":"<p>Controls whether validation of the receiver's SSL certificate is enforced when HTTPS is used.</p> <p>Warning</p> <p>Disabling this can expose your webhooks to man-in-the-middle attacks.</p>"},{"location":"models/extras/webhook/#ca-file-path","title":"CA File Path","text":"<p>The file path to a particular certificate authority (CA) file to use when validating the receiver's SSL certificate (if not using the system defaults).</p>"},{"location":"models/extras/webhook/#context-data","title":"Context Data","text":"<p>The following context variables are available in to the text and link templates.</p> Variable Description <code>event</code> The event type (<code>create</code>, <code>update</code>, or <code>delete</code>) <code>timestamp</code> The time at which the event occured <code>model</code> The type of object impacted <code>username</code> The name of the user associated with the change <code>request_id</code> The unique request ID <code>data</code> A complete serialized representation of the object <code>snapshots</code> Pre- and post-change snapshots of the object"},{"location":"models/ipam/aggregate/","title":"Agregados (IP)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>IP addressing is by nature hierarchical. The first few levels of the IPv4 hierarchy, for example, look like this:</p> <ul> <li>0.0.0.0/0<ul> <li>0.0.0.0/1<ul> <li>0.0.0.0/2</li> <li>64.0.0.0/2</li> </ul> </li> <li>128.0.0.0/1<ul> <li>128.0.0.0/2</li> <li>192.0.0.0/2</li> </ul> </li> </ul> </li> </ul> <p>This hierarchy comprises 33 tiers of addressing, from /0 all the way down to individual /32 address (and much, much further to /128 for IPv6). Of course, most organizations are concerned with only relatively small portions of the total IP space, so tracking the uppermost of these tiers isn't necessary.</p> <p>NetBox allows us to specify the portions of IP space that are interesting to us by defining aggregates. Typically, an aggregate will correspond to either an allocation of public (globally routable) IP space granted by a regional authority, or a private (internally-routable) designation. Common private designations include:</p> <ul> <li>10.0.0.0/8 (RFC 1918)</li> <li>100.64.0.0/10 (RFC 6598)</li> <li>172.16.0.0/12 (RFC 1918)</li> <li>192.168.0.0/16 (RFC 1918)</li> <li>One or more /48s within fd00::/8 (IPv6 unique local addressing)</li> </ul> <p>Each aggregate is assigned to a RIR. For \"public\" aggregates, this will be the real-world authority which has granted your organization permission to use the specified IP space on the public Internet. For \"private\" aggregates, this will be a statutory authority, such as RFC 1918. Each aggregate can also annotate that date on which it was allocated, where applicable.</p> <p>Prefixes are automatically arranged beneath their parent aggregates in NetBox. Typically, you'll want to create aggregates only for the prefixes and IP addresses that your organization actually manages: There is no need to define aggregates for provider-assigned space which is only used on Internet circuits, for example.</p> <p>Note</p> <p>Because aggregates represent segments of the global IP space, they cannot overlap with one another: They can only exist side-by-side. For instance, you cannot define both 10.0.0.0/8 and 10.16.0.0/16 as aggregates, because they overlap. 10.16.0.0/16 in this example would be created as a container prefix and automatically grouped under the 10.0.0.0/8 aggregate. Remember, the purpose of aggregates is to establish the root of your IP addressing hierarchy.</p>"},{"location":"models/ipam/aggregate/#fields","title":"Fields","text":""},{"location":"models/ipam/aggregate/#prefix","title":"Prefix","text":"<p>The IPv4 or IPv6 network this aggregate represents.</p>"},{"location":"models/ipam/aggregate/#rir","title":"RIR","text":"<p>The Regional Internet Registry or similar authority which governs allocations of this address space from the global pool.</p>"},{"location":"models/ipam/aggregate/#date-added","title":"Date Added","text":"<p>The date on which the address space was allocated or deployed.</p>"},{"location":"models/ipam/asn/","title":"ASN","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>An Autonomous System Number (ASN) is a numeric identifier used in the BGP protocol to identify which autonomous system a particular prefix is originating and transiting through. NetBox support both 32- and 64- ASNs.</p> <p>ASNs must be globally unique within NetBox, must each may be assigned to multiple sites.</p>"},{"location":"models/ipam/asn/#fields","title":"Fields","text":""},{"location":"models/ipam/asn/#as-number","title":"AS Number","text":"<p>The 32- or 64-bit AS number.</p>"},{"location":"models/ipam/asn/#rir","title":"RIR","text":"<p>The Regional Internet Registry or similar authority responsible for the allocation of this particular ASN.</p>"},{"location":"models/ipam/asn/#sites","title":"Sites","text":"<p>The site(s) to which this ASN is assigned.</p>"},{"location":"models/ipam/fhrpgroup/","title":"Grupo FHRP","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A first-hop redundancy protocol (FHRP) enables multiple physical interfaces to present a virtual IP address (VIP) in a redundant manner. Examples of such protocols include:</p> <ul> <li>Hot Standby Router Protocol (HSRP)</li> <li>Virtual Router Redundancy Protocol (VRRP)</li> <li>Common Address Redundancy Protocol (CARP)</li> <li>Gateway Load Balancing Protocol (GLBP)</li> </ul> <p>When creating a new FHRP group, the user may optionally create a VIP as well. This IP address will be automatically assigned to the new group. (Virtual IP addresses can also be assigned after the group has been created.)</p>"},{"location":"models/ipam/fhrpgroup/#fields","title":"Fields","text":""},{"location":"models/ipam/fhrpgroup/#protocol","title":"Protocol","text":"<p>The wire protocol employed by cooperating servers to maintain the virtual IP address(es) for the group.</p>"},{"location":"models/ipam/fhrpgroup/#group-id","title":"Group ID","text":"<p>The group's numeric identifier.</p>"},{"location":"models/ipam/fhrpgroup/#name","title":"Name","text":"<p>An optional name for the FHRP group.</p>"},{"location":"models/ipam/fhrpgroup/#authentication-type","title":"Authentication Type","text":"<p>The type of authentication employed by group nodes, if any.</p>"},{"location":"models/ipam/fhrpgroup/#authentication-key","title":"Authentication Key","text":"<p>The shared key used for group authentication, if any.</p> <p>Warning</p> <p>The authentication key value is stored in plaintext in NetBox's database. Do not utilize this field if you require encryption at rest for shared keys.</p>"},{"location":"models/ipam/fhrpgroupassignment/","title":"Rela\u00e7\u00e3o de Grupos FHRP","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Member device and VM interfaces can be assigned to FHRP groups to indicate their participation in maintaining a common virtual IP address (VIP). For instance, three interfaces, each belonging to a different router, may each be assigned to the same FHRP group to serve a shared VIP. Each of these assignments would typically receive a different priority.</p> <p>Interfaces are assigned to FHRP groups under the interface detail view.</p>"},{"location":"models/ipam/fhrpgroupassignment/#fields","title":"Fields","text":""},{"location":"models/ipam/fhrpgroupassignment/#group","title":"Group","text":"<p>The FHRP group being assigned.</p>"},{"location":"models/ipam/fhrpgroupassignment/#interface","title":"Interface","text":"<p>The device or VM interface to which the group is being assigned.</p>"},{"location":"models/ipam/fhrpgroupassignment/#priority","title":"Priority","text":"<p>A value between 0 and 255 indicating the interface's priority for being elected as the master/primary node in the group.</p>"},{"location":"models/ipam/ipaddress/","title":"Endere\u00e7os IP","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>An IP address object in NetBox comprises a single host address (either IPv4 or IPv6) and its subnet mask, and represents an IP address as configured on a network interface. IP addresses can be assigned to device and virtual machine interfaces, as well as to FHRP groups. Further, each device and virtual machine may have one of its interface IPs designated as its primary IP per address family (one for IPv4 and one for IPv6).</p> <p>Tip</p> <p>When primary IPs are set for both IPv4 and IPv6, NetBox will prefer IPv6. This can be changed by setting the <code>PREFER_IPV4</code> configuration parameter.</p>"},{"location":"models/ipam/ipaddress/#network-address-translation-nat","title":"Network Address Translation (NAT)","text":"<p>An IP address can be designated as the network address translation (NAT) inside IP address for exactly one other IP address. This is useful primarily to denote a translation between public and private IP addresses. This relationship is followed in both directions: For example, if 10.0.0.1 is assigned as the inside IP for 192.0.2.1, 192.0.2.1 will be displayed as the outside IP for 10.0.0.1.</p> <p>Note</p> <p>NetBox does not currently support tracking application-level NAT relationships (also called port address translation or PAT). This type of policy requires additional logic to model and cannot be fully represented by IP address alone.</p>"},{"location":"models/ipam/ipaddress/#fields","title":"Fields","text":""},{"location":"models/ipam/ipaddress/#address","title":"Address","text":"<p>The IPv4 or IPv6 address and mask, in CIDR notation (e.g. <code>192.0.2.0/24</code>).</p>"},{"location":"models/ipam/ipaddress/#status","title":"Status","text":"<p>The operational status of the IP address.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>ipam.IPAddress.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/ipam/ipaddress/#role","title":"Role","text":"<p>The functional role fulfilled by this IP address. Options include:</p> <ul> <li>Loopback: Configured on a loopback interface</li> <li>Secondary: One of multiple IP addresses configured on an interface</li> <li>Anycast: Employed for anycast services</li> <li>VIP: A general-purpose virtual IP address</li> <li>VRRP: A virtual IP address managed with the VRRP protocol</li> <li>HSRP: A virtual IP address managed with the HSRP protocol</li> <li>GLBP: A virtual IP address managed with the GLBP protocol</li> <li>CARP: A virtual IP address managed with the CARP protocol</li> </ul> <p>Tip</p> <p>Virtual IP addresses should be assigned to FHRP groups rather than to actual interfaces to accurately model their shared nature.</p>"},{"location":"models/ipam/ipaddress/#vrf","title":"VRF","text":"<p>The Virtual Routing and Forwarding instance in which this IP address exists.</p> <p>Note</p> <p>VRF assignment is optional. IP addresses with no VRF assigned are considered to exist in the \"global\" table.</p>"},{"location":"models/ipam/ipaddress/#dns-name","title":"DNS Name","text":"<p>A DNS A/AAAA record value associated with this IP address.</p>"},{"location":"models/ipam/iprange/","title":"Ranges de IP","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>This model represents an arbitrary range of individual IPv4 or IPv6 addresses, inclusive of its starting and ending addresses. For instance, the range 192.0.2.10 to 192.0.2.20 has eleven members. (The total member count is available as the <code>size</code> property on an IPRange instance.) Like prefixes and IP addresses, each IP range may optionally be assigned to a VRF.</p>"},{"location":"models/ipam/iprange/#fields","title":"Fields","text":""},{"location":"models/ipam/iprange/#vrf","title":"VRF","text":"<p>The Virtual Routing and Forwarding instance in which this IP range exists.</p> <p>Note</p> <p>VRF assignment is optional. IP ranges with no VRF assigned are considered to exist in the \"global\" table.</p>"},{"location":"models/ipam/iprange/#start-end-address","title":"Start &amp; End Address","text":"<p>The beginning and ending IP addresses (inclusive) which define the boundaries of the range. Both IP addresses must specify the correct mask.</p> <p>Note</p> <p>The maximum supported size of an IP range is 2^32 - 1.</p>"},{"location":"models/ipam/iprange/#role","title":"Role","text":"<p>The user-defined functional role assigned to the IP range.</p>"},{"location":"models/ipam/iprange/#status","title":"Status","text":"<p>The IP range's operational status. Note that the status of a range does not have any impact on its member IP addresses, which may have their statuses defined independently.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>IPRange.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/ipam/l2vpn/","title":"L2VPN","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A L2VPN object is NetBox is a representation of a layer 2 bridge technology such as VXLAN, VPLS, or EPL. Each L2VPN can be identified by name as well as by an optional unique identifier (VNI would be an example). Once created, L2VPNs can be terminated to interfaces and VLANs.</p>"},{"location":"models/ipam/l2vpn/#fields","title":"Fields","text":""},{"location":"models/ipam/l2vpn/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/ipam/l2vpn/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/ipam/l2vpn/#type","title":"Type","text":"<p>The technology employed in forming and operating the L2VPN. Choices include:</p> <ul> <li>VPLS</li> <li>VPWS</li> <li>EPL</li> <li>EVPL</li> <li>EP-LAN</li> <li>EVP-LAN</li> <li>EP-TREE</li> <li>EVP-TREE</li> <li>VXLAN</li> <li>VXLAN-EVPN</li> <li>MPLS-EVPN</li> <li>PBB-EVPN</li> </ul> <p>Note</p> <p>Designating the type as VPWS, EPL, EP-LAN, EP-TREE will limit the L2VPN instance to two terminations.</p>"},{"location":"models/ipam/l2vpn/#identifier","title":"Identifier","text":"<p>An optional numeric identifier. This can be used to track a pseudowire ID, for example.</p>"},{"location":"models/ipam/l2vpn/#import-export-targets","title":"Import &amp; Export Targets","text":"<p>The route targets associated with this L2VPN to control the import and export of forwarding information.</p>"},{"location":"models/ipam/l2vpntermination/","title":"Termina\u00e7\u00e3o de L2VPN","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A L2VPN termination is the attachment of an L2VPN to an interface or VLAN. Note that the L2VPNs of the following types may have only two terminations assigned to them:</p> <ul> <li>VPWS</li> <li>EPL</li> <li>EP-LAN</li> <li>EP-TREE</li> </ul>"},{"location":"models/ipam/l2vpntermination/#fields","title":"Fields","text":""},{"location":"models/ipam/l2vpntermination/#l2vpn","title":"L2VPN","text":"<p>The L2VPN instance.</p>"},{"location":"models/ipam/l2vpntermination/#vlan-or-interface","title":"VLAN or Interface","text":"<p>The VLAN, device interface, or virtual machine interface attached to the L2VPN.</p>"},{"location":"models/ipam/prefix/","title":"Prefixos","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A prefix is an IPv4 or IPv6 network and mask expressed in CIDR notation (e.g. 192.0.2.0/24). A prefix entails only the \"network portion\" of an IP address: All bits in the address not covered by the mask must be zero. (In other words, a prefix cannot be a specific IP address.) Prefixes are automatically organized by their parent aggregate and assigned VRF.</p>"},{"location":"models/ipam/prefix/#fields","title":"Fields","text":""},{"location":"models/ipam/prefix/#prefix","title":"Prefix","text":"<p>The IPv4 or IPv6 network this prefix represents.</p>"},{"location":"models/ipam/prefix/#status","title":"Status","text":"<p>The prefix's operational status. Note that the status of a prefix does not have any impact on its member IP addresses, which may have their statuses defined independently. The \"container\" status indicates that the prefix exists merely as a container for organizing child prefixes.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Prefix.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/ipam/prefix/#vrf","title":"VRF","text":"<p>The Virtual Routing and Forwarding instance in which this prefix exists.</p> <p>Note</p> <p>VRF assignment is optional. Prefixes with no VRF assigned are considered to exist in the \"global\" table.</p>"},{"location":"models/ipam/prefix/#role","title":"Role","text":"<p>The user-defined functional role assigned to the prefix.</p>"},{"location":"models/ipam/prefix/#is-a-pool","title":"Is a Pool","text":"<p>Designates whether the prefix should be treated as a pool. If selected, the first and last IP addresses within the prefix (normally reserved as the network and broadcast addresses, respectively) will be considered usable. This option is ideal for documenting NAT pools.</p>"},{"location":"models/ipam/prefix/#mark-utilized","title":"Mark Utilized","text":"<p>If selected, this prefix will report 100% utilization regardless of how many child objects have been defined within it.</p>"},{"location":"models/ipam/prefix/#site","title":"Site","text":"<p>The site to which this prefix is assigned (optional).</p>"},{"location":"models/ipam/prefix/#vlan","title":"VLAN","text":"<p>The VLAN to which this prefix is assigned (optional). This mapping is helpful for associating IP space with layer two domains. A VLAN may have multiple prefixes assigned to it.</p>"},{"location":"models/ipam/rir/","title":"Regional Internet Registries (RIRs)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Regional Internet registries are responsible for the allocation of globally-routable address space. The five RIRs are ARIN, RIPE, APNIC, LACNIC, and AFRINIC. However, some address space has been set aside for internal use, such as defined in RFCs 1918 and 6598. NetBox considers these RFCs as a sort of RIR as well; that is, an authority which \"owns\" certain address space. There also exist lower-tier registries which serve particular geographic areas.</p> <p>Users can create whatever RIRs they like, but each aggregate must be assigned to one RIR. For example, suppose your organization has been allocated 104.131.0.0/16 by ARIN. It also makes use of RFC 1918 addressing internally. You would first create RIRs named \"ARIN\" and \"RFC 1918,\" then create an aggregate for each of these top-level prefixes, assigning it to its respective RIR.</p>"},{"location":"models/ipam/rir/#fields","title":"Fields","text":""},{"location":"models/ipam/rir/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/ipam/rir/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/ipam/rir/#private","title":"Private","text":"<p>Designates this RIR as an authority for private/local IP space only (e.g. an RFC).</p>"},{"location":"models/ipam/role/","title":"Fun\u00e7\u00f5es de Prefix/VLAN","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A role indicates the function of a prefix or VLAN. For example, you might define Data, Voice, and Security roles. Generally, a prefix will be assigned the same functional role as the VLAN to which it is assigned (if any).</p>"},{"location":"models/ipam/role/#fields","title":"Fields","text":""},{"location":"models/ipam/role/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/ipam/role/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/ipam/role/#weight","title":"Weight","text":"<p>A numeric weight employed to influence the ordering of roles. Roles with a lower weight will be listed before those with higher weights.</p>"},{"location":"models/ipam/routetarget/","title":"Route Targets","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A route target is a particular type of extended BGP community used to control the redistribution of routes among VRF tables in a network. Route targets can be assigned to individual VRFs in NetBox as import or export targets (or both) to model this exchange in an L3VPN. Each route target must be given a unique name, which should be in a format prescribed by RFC 4364, similar to a VR route distinguisher.</p>"},{"location":"models/ipam/routetarget/#fields","title":"Fields","text":""},{"location":"models/ipam/routetarget/#name","title":"Name","text":"<p>The route target identifier formatted in accordance with RFC 4360.</p>"},{"location":"models/ipam/service/","title":"Servi\u00e7os","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A service represents a layer seven application available on a device or virtual machine. For example, a service might be created in NetBox to represent an HTTP server running on TCP/8000. Each service may optionally be further bound to one or more specific interfaces assigned to the selected device or virtual machine.</p> <p>To aid in the efficient creation of services, users may opt to first create a service template from which service definitions can be quickly replicated.</p>"},{"location":"models/ipam/service/#fields","title":"Fields","text":""},{"location":"models/ipam/service/#name","title":"Name","text":"<p>A service or protocol name.</p>"},{"location":"models/ipam/service/#protocol","title":"Protocol","text":"<p>The wire protocol on which the service runs. Choices include UDP, TCP, and SCTP.</p>"},{"location":"models/ipam/service/#ports","title":"Ports","text":"<p>One or more numeric ports to which the service is bound. Multiple ports can be expressed using commas and/or hyphens. For example, <code>80,8001-8003</code> specifies ports 80, 8001, 8002, and 8003.</p>"},{"location":"models/ipam/service/#ip-addresses","title":"IP Addresses","text":"<p>The IP address(es) to which this service is bound. If no IP addresses are bound, the service is assumed to be reachable via any assigned IP address.</p>"},{"location":"models/ipam/servicetemplate/","title":"Templates de Servi\u00e7os","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Service templates can be used to instantiate services on devices and virtual machines.</p>"},{"location":"models/ipam/servicetemplate/#fields","title":"Fields","text":""},{"location":"models/ipam/servicetemplate/#name","title":"Name","text":"<p>A service or protocol name.</p>"},{"location":"models/ipam/servicetemplate/#protocol","title":"Protocol","text":"<p>The wire protocol on which the service runs. Choices include UDP, TCP, and SCTP.</p>"},{"location":"models/ipam/servicetemplate/#ports","title":"Ports","text":"<p>One or more numeric ports to which the service is bound. Multiple ports can be expressed using commas and/or hyphens. For example, <code>80,8001-8003</code> specifies ports 80, 8001, 8002, and 8003.</p>"},{"location":"models/ipam/vlan/","title":"VLANs","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A Virtual LAN (VLAN) represents an isolated layer two domain, identified by a name and a numeric ID (1-4094) as defined in IEEE 802.1Q. VLANs are arranged into VLAN groups to define scope and to enforce uniqueness.</p>"},{"location":"models/ipam/vlan/#fields","title":"Fields","text":""},{"location":"models/ipam/vlan/#id","title":"ID","text":"<p>A 12-bit numeric ID for the VLAN, 1-4094 (inclusive).</p>"},{"location":"models/ipam/vlan/#name","title":"Name","text":"<p>The configured VLAN name.</p>"},{"location":"models/ipam/vlan/#status","title":"Status","text":"<p>The VLAN's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>VLAN.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/ipam/vlan/#role","title":"Role","text":"<p>The user-defined functional role assigned to the VLAN.</p>"},{"location":"models/ipam/vlan/#vlan-group-or-site","title":"VLAN Group or Site","text":"<p>The VLAN group or site to which the VLAN is assigned.</p>"},{"location":"models/ipam/vlangroup/","title":"Grupos de VLAN","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>VLAN groups can be used to organize VLANs within NetBox. Each VLAN group can be scoped to a particular region, site group, site, location, rack, cluster group, or cluster. Member VLANs will be available for assignment to devices and/or virtual machines within the specified scope.</p> <p>Groups can also be used to enforce uniqueness: Each VLAN within a group must have a unique ID and name. VLANs which are not assigned to a group may have overlapping names and IDs (including VLANs which belong to a common site). For example, two VLANs with ID 123 may be created, but they cannot both be assigned to the same group.</p>"},{"location":"models/ipam/vlangroup/#fields","title":"Fields","text":""},{"location":"models/ipam/vlangroup/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/ipam/vlangroup/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/ipam/vlangroup/#minimum-maximum-vlan-ids","title":"Minimum &amp; Maximum VLAN IDs","text":"<p>A minimum and maximum child VLAN ID must be set for each group. (These default to 1 and 4094 respectively.) VLANs created within a group must have a VID that falls between these values (inclusive).</p>"},{"location":"models/ipam/vlangroup/#scope","title":"Scope","text":"<p>The domain covered by a VLAN group, defined as one of the supported object types. This conveys the context in which a VLAN group applies.</p>"},{"location":"models/ipam/vrf/","title":"Virtual Routing and Forwarding (VRF)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A VRF object in NetBox represents a Virtual Routing and Forwarding (VRF) domain. Each VRF is essentially an independent routing table. VRFs are commonly used to isolate customers or organizations from one another within a network, or to route overlapping address space (e.g. multiple instances of the 10.0.0.0/8 space). Each VRF may be assigned to a specific tenant to aid in organizing the available IP space by customer or internal user.</p> <p>Each prefix, IP range, and IP address may be assigned to one (and only one) VRF. If you have a prefix or IP address which exists in multiple VRFs, you will need to create a separate instance of it in NetBox for each VRF. Any such object not assigned to a VRF is said to belong to the \"global\" table.</p>"},{"location":"models/ipam/vrf/#fields","title":"Fields","text":""},{"location":"models/ipam/vrf/#name","title":"Name","text":"<p>The configured or administrative name for the VRF instance.</p>"},{"location":"models/ipam/vrf/#route-distinguisher","title":"Route Distinguisher","text":"<p>A route distinguisher is used to map routes to VRFs within a device's routing table e.g. for MPLS/VPN. The assignment of a route distinguisher is optional. If defined, the RD is expected to take one of the forms prescribed in RFC 4364, however its formatting is not strictly enforced.</p>"},{"location":"models/ipam/vrf/#enforce-unique-space","title":"Enforce Unique Space","text":"<p>By default, NetBox will permit duplicate prefixes to be assigned to a VRF. This behavior can be toggled by setting the \"enforce unique\" flag on the VRF model.</p> <p>Note</p> <p>Enforcement of unique IP space can be toggled for global table (non-VRF prefixes) using the <code>ENFORCE_GLOBAL_UNIQUE</code> configuration setting.</p>"},{"location":"models/ipam/vrf/#import-export-targets","title":"Import &amp; Export Targets","text":"<p>Each VRF may have one or more import and/or export route targets applied to it. Route targets are used to control the exchange of routes (prefixes) among VRFs in L3VPNs.</p>"},{"location":"models/tenancy/contact/","title":"Contatos","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A contact represents an individual or group that has been associated with an object in NetBox for administrative reasons. For example, you might assign one or more operational contacts to each site.</p>"},{"location":"models/tenancy/contact/#fields","title":"Fields","text":""},{"location":"models/tenancy/contact/#group","title":"Group","text":"<p>The contact group to which this contact is assigned (if any).</p>"},{"location":"models/tenancy/contact/#name","title":"Name","text":"<p>The name of the contact. This may be an individual or a team/department. (This is the only required contact detail; all others are optional.)</p>"},{"location":"models/tenancy/contact/#title","title":"Title","text":"<p>The contact's title or role.</p>"},{"location":"models/tenancy/contact/#phone","title":"Phone","text":"<p>The contact's phone number. (Note that NetBox does not enforce a particular numbering format.)</p>"},{"location":"models/tenancy/contact/#email","title":"Email","text":"<p>The contact's email address.</p>"},{"location":"models/tenancy/contact/#address","title":"Address","text":"<p>The contact's physical or mailing address.</p>"},{"location":"models/tenancy/contact/#link","title":"Link","text":"<p>A URL to reach the contact via some other means.</p>"},{"location":"models/tenancy/contactgroup/","title":"Grupos de Contato","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Contacts can be organized into arbitrary groups. These groups can be recursively nested for convenience. Each contact within a group must have a unique name, but other attributes can be repeated.</p>"},{"location":"models/tenancy/contactgroup/#fields","title":"Fields","text":""},{"location":"models/tenancy/contactgroup/#parent","title":"Parent","text":"<p>The parent contact group (if any).</p>"},{"location":"models/tenancy/contactgroup/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/tenancy/contactgroup/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/tenancy/contactrole/","title":"Categorias de Contato","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Contacts can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for administrative, operational, or emergency contacts.</p>"},{"location":"models/tenancy/contactrole/#fields","title":"Fields","text":""},{"location":"models/tenancy/contactrole/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/tenancy/contactrole/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/tenancy/tenant/","title":"Loca\u00e7\u00e3o","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A tenant represents a discrete grouping of resources used for administrative purposes. Typically, tenants are used to represent individual customers or internal departments within an organization. </p>"},{"location":"models/tenancy/tenant/#fields","title":"Fields","text":""},{"location":"models/tenancy/tenant/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/tenancy/tenant/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/tenancy/tenant/#group","title":"Group","text":"<p>The tenant group to which this tenant belongs (if any).</p>"},{"location":"models/tenancy/tenantgroup/","title":"Grupos de Loca\u00e7\u00e3o","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Tenants can be organized by custom groups. For instance, you might create one group called \"Customers\" and one called \"Departments.\" The assignment of a tenant to a group is optional.</p> <p>Tenant groups may be nested recursively to achieve a multi-level hierarchy. For example, you might have a group called \"Customers\" containing subgroups of individual tenants grouped by product or account team.</p>"},{"location":"models/tenancy/tenantgroup/#fields","title":"Fields","text":""},{"location":"models/tenancy/tenantgroup/#parent","title":"Parent","text":"<p>The parent tenant group (if any).</p>"},{"location":"models/tenancy/tenantgroup/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/tenancy/tenantgroup/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/virtualization/cluster/","title":"Clusters","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A cluster is a logical grouping of physical resources within which virtual machines run. Physical devices may be associated with clusters as hosts. This allows users to track on which host(s) a particular virtual machine may reside.</p>"},{"location":"models/virtualization/cluster/#fields","title":"Fields","text":""},{"location":"models/virtualization/cluster/#name","title":"Name","text":"<p>A human-friendly name for the cluster. Must be unique within the assigned group and site.</p>"},{"location":"models/virtualization/cluster/#type","title":"Type","text":"<p>The cluster type assigned for this cluster.</p>"},{"location":"models/virtualization/cluster/#group","title":"Group","text":"<p>The cluster group to which this cluster belongs.</p>"},{"location":"models/virtualization/cluster/#status","title":"Status","text":"<p>The cluster's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>Cluster.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/virtualization/cluster/#site","title":"Site","text":"<p>The site with which the cluster is associated.</p>"},{"location":"models/virtualization/clustergroup/","title":"Grupos de Cluster","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Cluster groups may be created for the purpose of organizing clusters. The arrangement of clusters into groups is optional.</p>"},{"location":"models/virtualization/clustergroup/#fields","title":"Fields","text":""},{"location":"models/virtualization/clustergroup/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/virtualization/clustergroup/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/virtualization/clustertype/","title":"Tipos de Cluster","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A cluster type represents a technology or mechanism by which a cluster is formed. For example, you might create a cluster type named \"VMware vSphere\" for a locally hosted cluster or \"DigitalOcean NYC3\" for one hosted by a cloud provider.</p>"},{"location":"models/virtualization/clustertype/#fields","title":"Fields","text":""},{"location":"models/virtualization/clustertype/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/virtualization/clustertype/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/virtualization/virtualmachine/","title":"M\u00e1quinas Virtuais","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A virtual machine (VM) represents a virtual compute instance hosted within a cluster. Each VM must be assigned to a site and/or cluster, and may optionally be assigned to a particular host device within a cluster.</p> <p>Virtual machines may have virtual interfaces assigned to them, but do not support any physical component. When a VM has one or more interfaces with IP addresses assigned, a primary IP for the device can be designated, for both IPv4 and IPv6.</p>"},{"location":"models/virtualization/virtualmachine/#fields","title":"Fields","text":""},{"location":"models/virtualization/virtualmachine/#name","title":"Name","text":"<p>The virtual machine's configured name. Must be unique to the assigned cluster and tenant.</p>"},{"location":"models/virtualization/virtualmachine/#role","title":"Role","text":"<p>The functional role assigned to the VM.</p>"},{"location":"models/virtualization/virtualmachine/#status","title":"Status","text":"<p>The VM's operational status.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>VirtualMachine.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/virtualization/virtualmachine/#site-cluster","title":"Site &amp; Cluster","text":"<p>The site and/or cluster to which the VM is assigned.</p>"},{"location":"models/virtualization/virtualmachine/#device","title":"Device","text":"<p>The physical host device within the assigned site/cluster on which this VM resides.</p>"},{"location":"models/virtualization/virtualmachine/#platform","title":"Platform","text":"<p>A VM may be associated with a particular platform to indicate its operating system.</p>"},{"location":"models/virtualization/virtualmachine/#primary-ipv4-ipv6-addresses","title":"Primary IPv4 &amp; IPv6 Addresses","text":"<p>Each VM may designate one primary IPv4 address and/or one primary IPv6 address for management purposes.</p> <p>Tip</p> <p>NetBox will prefer IPv6 addresses over IPv4 addresses by default. This can be changed by setting the <code>PREFER_IPV4</code> configuration parameter.</p>"},{"location":"models/virtualization/virtualmachine/#vcpus","title":"vCPUs","text":"<p>The number of virtual CPUs provisioned. A VM may be allocated a partial vCPU count (e.g. 1.5 vCPU).</p>"},{"location":"models/virtualization/virtualmachine/#memory","title":"Memory","text":"<p>The amount of running memory provisioned, in megabytes.</p>"},{"location":"models/virtualization/virtualmachine/#disk","title":"Disk","text":"<p>The amount of disk storage provisioned, in gigabytes.</p>"},{"location":"models/virtualization/vminterface/","title":"VMInterface (em Ingl\u00eas ainda)","text":""},{"location":"models/virtualization/vminterface/#interfaces","title":"Interfaces","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Virtual machine interfaces behave similarly to device interfaces: They can be assigned to VRFs, may have IP addresses, VLANs, and services attached to them, and so on. However, given their virtual nature, they lack properties pertaining to physical attributes. For example, VM interfaces do not have a physical type and cannot have cables attached to them.</p>"},{"location":"models/virtualization/vminterface/#fields","title":"Fields","text":""},{"location":"models/virtualization/vminterface/#virtual-machine","title":"Virtual Machine","text":"<p>The virtual machine to which this interface is assigned.</p>"},{"location":"models/virtualization/vminterface/#name","title":"Name","text":"<p>The interface's name. Must be unique to the assigned VM.</p>"},{"location":"models/virtualization/vminterface/#parent-interface","title":"Parent Interface","text":"<p>Identifies the parent interface of a subinterface (e.g. used to employ encapsulation).</p>"},{"location":"models/virtualization/vminterface/#bridged-interface","title":"Bridged Interface","text":"<p>An interface on the same VM with which this interface is bridged.</p>"},{"location":"models/virtualization/vminterface/#enabled","title":"Enabled","text":"<p>If not selected, this interface will be treated as disabled/inoperative.</p>"},{"location":"models/virtualization/vminterface/#mac-address","title":"MAC Address","text":"<p>The 48-bit MAC address (for Ethernet interfaces).</p>"},{"location":"models/virtualization/vminterface/#mtu","title":"MTU","text":"<p>The interface's configured maximum transmissible unit (MTU).</p>"},{"location":"models/virtualization/vminterface/#8021q-mode","title":"802.1Q Mode","text":"<p>For switched Ethernet interfaces, this identifies the 802.1Q encapsulation strategy in effect. Options include:</p> <ul> <li>Access: All traffic is assigned to a single VLAN, with no tagging.</li> <li>Tagged: One untagged \"native\" VLAN is allowed, as well as any number of tagged VLANs.</li> <li>Tagged (all): Implies that all VLANs are carried by the interface. One untagged VLAN may be designated.</li> </ul> <p>This field must be left blank for routed interfaces which do employ 802.1Q encapsulation.</p>"},{"location":"models/virtualization/vminterface/#untagged-vlan","title":"Untagged VLAN","text":"<p>The \"native\" (untagged) VLAN for the interface. Valid only when one of the above 802.1Q mode is selected.</p>"},{"location":"models/virtualization/vminterface/#tagged-vlans","title":"Tagged VLANs","text":"<p>The tagged VLANs which are configured to be carried by this interface. Valid only for the \"tagged\" 802.1Q mode above.</p>"},{"location":"models/virtualization/vminterface/#vrf","title":"VRF","text":"<p>The virtual routing and forwarding instance to which this interface is assigned.</p>"},{"location":"models/wireless/wirelesslan/","title":"Wireless LANs","text":"<p>A wireless LAN is a set of interfaces connected via a common wireless channel, identified by its SSID and authentication parameters. Wireless interfaces can be associated with wireless LANs to model multi-acess wireless segments.</p>"},{"location":"models/wireless/wirelesslan/#fields","title":"Fields","text":""},{"location":"models/wireless/wirelesslan/#ssid","title":"SSID","text":"<p>The service set identifier (SSID) for the wireless network.</p>"},{"location":"models/wireless/wirelesslan/#group","title":"Group","text":"<p>The wireless LAN group to which this wireless LAN is assigned (if any).</p>"},{"location":"models/wireless/wirelesslan/#status","title":"Status","text":"<p>The operational status of the wireless network.</p> <p>Tip</p> <p>Additional statuses may be defined by setting <code>WirelessLAN.status</code> under the <code>FIELD_CHOICES</code> configuration parameter.</p>"},{"location":"models/wireless/wirelesslan/#vlan","title":"VLAN","text":"<p>Each wireless LAN can optionally be mapped to a VLAN, to model a bridge between wired and wireless segments.</p>"},{"location":"models/wireless/wirelesslan/#authentication-type","title":"Authentication Type","text":"<p>The type of wireless authentication in use. Options include:</p> <ul> <li>Open</li> <li>WEP</li> <li>WPA Personal (PSK)</li> <li>WPA Enterprise</li> </ul>"},{"location":"models/wireless/wirelesslan/#cipher-de-autenticacao","title":"Cipher de Autentica\u00e7\u00e3o","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>The security cipher used to apply wireless authentication. Options include:</p> <ul> <li>Auto (automatic)</li> <li>TKIP</li> <li>AES</li> </ul>"},{"location":"models/wireless/wirelesslan/#pre-shared-key","title":"Pre-Shared Key","text":"<p>The security key configured on each client to grant access to the secured wireless LAN. This applies only to certain authentication types.</p>"},{"location":"models/wireless/wirelesslangroup/","title":"Grupos de Wireless LAN (Rede Interna)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Wireless LAN groups can be used to organize and classify wireless LANs. These groups are hierarchical: groups can be nested within parent groups. However, each wireless LAN may be assigned only to one group.</p>"},{"location":"models/wireless/wirelesslangroup/#fields","title":"Fields","text":""},{"location":"models/wireless/wirelesslangroup/#parent","title":"Parent","text":"<p>The parent wireless LAN group (if any).</p>"},{"location":"models/wireless/wirelesslangroup/#name","title":"Name","text":"<p>A unique human-friendly name.</p>"},{"location":"models/wireless/wirelesslangroup/#slug","title":"Slug","text":"<p>A unique URL-friendly identifier. (This value can be used for filtering.)</p>"},{"location":"models/wireless/wirelesslink/","title":"Links de Wireless (Wi-Fi)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>A wireless link represents a connection between exactly two wireless interfaces. Unlike a wireless LAN, which permit an arbitrary number of client associations, wireless links are used to model point-to-point wireless connections.</p>"},{"location":"models/wireless/wirelesslink/#fields","title":"Fields","text":""},{"location":"models/wireless/wirelesslink/#interfaces","title":"Interfaces","text":"<p>Select two interfaces: One for side A and one for side B. (Both must be wireless interfaces.)</p>"},{"location":"models/wireless/wirelesslink/#status","title":"Status","text":"<p>The operational status of the link. Options include:</p> <ul> <li>Connected</li> <li>Planned</li> <li>Decommissioning</li> </ul>"},{"location":"models/wireless/wirelesslink/#ssid","title":"SSID","text":"<p>The service set identifier (SSID) for the wireless link (optional).</p>"},{"location":"models/wireless/wirelesslink/#authentication-type","title":"Authentication Type","text":"<p>The type of wireless authentication in use. Options include:</p> <ul> <li>Open</li> <li>WEP</li> <li>WPA Personal (PSK)</li> <li>WPA Enterprise</li> </ul>"},{"location":"models/wireless/wirelesslink/#authentication-cipher","title":"Authentication Cipher","text":"<p>The security cipher used to apply wireless authentication. Options include:</p> <ul> <li>Auto (automatic)</li> <li>TKIP</li> <li>AES</li> </ul>"},{"location":"models/wireless/wirelesslink/#pre-shared-key","title":"Pre-Shared Key","text":"<p>The security key configured on each client to grant access to the secured wireless LAN. This applies only to certain authentication types.</p>"},{"location":"plugins/","title":"Plugins","text":"<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Plugins s\u00e3o pacotes de Django app que podem ser instalados juntos com o NetBox para fornecer funcionalidades customizadas n\u00e3o presentes na aplica\u00e7\u00e3o em si. Plugins introduzem seus pr\u00f3prios modelos e visualiza\u00e7\u00f5es (views), mas n\u00e3o podem interferir em componentes existentes. Um usu\u00e1rio do NetBox pode optar por instalar os plugins criados pela comunidade ou criar o seu pr\u00f3prio.</p> <p>Plugins s\u00e3o suportados desde a v2.8.</p>"},{"location":"plugins/#capacidades","title":"Capacidades","text":"<p>A arquitetura de plugins no NetBox permite:</p> <ul> <li>Adicionar novos modelos de dados. Um plugin pode introduzir um ou mais modelos para armazenar dados. Um modelo \u00e9 essencialmente uma tabela dentro do banco de dados SQL.</li> <li>Adicionar novas URLs e p\u00e1ginas web (views). Plugins podem registrar suas pr\u00f3prias URLs abaixo do caminho root (path root) <code>/plugins</code> para fornecer p\u00e1ginas ao usu\u00e1rio facilmente \"pesquis\u00e1veis\" (browsable).</li> <li>Adicionar conte\u00fado aos templates de modelos existentes. A classe de template de conte\u00fado pode ser utilizada para injetar HTML customizado dentro de uma p\u00e1gina (view) do modelo nativo do NetBox. Esse conte\u00fado pode aparecer no lado esquerdo, direito ou ainda no final da p\u00e1gina.</li> <li>Adicionar items no menu de navega\u00e7\u00e3o. Cada plugin pode registrar novos links no menu de navega\u00e7\u00e3o. Cada link pode ter um conjunto de bot\u00f5es com a\u00e7\u00f5es espec\u00edficas, similar aos bot\u00f5es de navega\u00e7\u00e3o nativos.</li> <li>Declarar um middleware customizado. Um middleware Django customizado pode ser registrado por cada plugin.</li> <li>Limitar a instala\u00e7\u00e3o por vers\u00e3o do Netbox. Um plugin pode especificar uma vers\u00e3o m\u00edmima e/ou m\u00e1xima a qual o NetBox \u00e9 compat\u00edvel.</li> </ul>"},{"location":"plugins/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<p>Seja por pol\u00edticas or por limita\u00e7\u00f5es t\u00e9cnicas, a intera\u00e7\u00e3o dos plugins com o c\u00f3digo nativo do NetBox \u00e9 restrita de certas formas. Um plugin n\u00e3o pode:</p> <ul> <li>Modificando os modelos nativos. Plugins n\u00e3o podem alterar, remover ou sobrepor os modelos nativos do NetBox de forma alguma. Essa regra existe para garantir a integridade dos modelos de dados nativos.</li> <li>Registrar URLs fora de <code>/plugins</code>. Todas as URLs dos plugins est\u00e3o restritas nesse caminho (path) para previnir colis\u00f5es de caminhos com as URLs do pr\u00f3prio NetBox ou de outros plugins.</li> <li>Sobrepor os templates nativos. Plugins podem injetar conte\u00fado adicional onde houver suporte, mas n\u00e3o pode manipular ou remover qualquer conte\u00fado nativo.</li> <li>Modificar as configura\u00e7\u00f5es nativas do NetBox. O registro de configura\u00e7\u00e3o \u00e9 fornecida para os plugins, mas n\u00e3o podem alterar ou deletar as configura\u00e7\u00f5es nativas.</li> <li>Disabilitar componentes nativos. Plugins n\u00e3o podem disabilitar ou esconder componentes nativos do NetBox.</li> </ul>"},{"location":"plugins/#instalando-plugins","title":"Instalando Plugins","text":"<p>As instru\u00e7\u00f5es abaixo detalham o processo de instala\u00e7\u00e3o e como habilitar um plugin.</p>"},{"location":"plugins/#instalando-o-pacote","title":"Instalando o Pacote","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Plugins are packaged Django apps that can be installed alongside NetBox to provide custom functionality not present in the core application. Plugins can introduce their own models and views, but cannot interfere with existing components. A NetBox user may opt to install plugins provided by the community or build his or her own.</p> <p>Plugins are supported on NetBox v2.8 and later.</p>"},{"location":"plugins/#capabilities","title":"Capabilities","text":"<p>The NetBox plugin architecture allows for the following:</p> <ul> <li>Add new data models. A plugin can introduce one or more models to hold data. (A model is essentially a table in the SQL database.)</li> <li>Add new URLs and views. Plugins can register URLs under the <code>/plugins</code> root path to provide browsable views for users.</li> <li>Add content to existing model templates. A template content class can be used to inject custom HTML content within the view of a core NetBox model. This content can appear in the left side, right side, or bottom of the page.</li> <li>Add navigation menu items. Each plugin can register new links in the navigation menu. Each link may have a set of buttons for specific actions, similar to the built-in navigation items.</li> <li>Add custom middleware. Custom Django middleware can be registered by each plugin.</li> <li>Declare configuration parameters. Each plugin can define required, optional, and default configuration parameters within its unique namespace. Plug configuration parameter are defined by the user under <code>PLUGINS_CONFIG</code> in <code>configuration.py</code>.</li> <li>Limit installation by NetBox version. A plugin can specify a minimum and/or maximum NetBox version with which it is compatible.</li> </ul>"},{"location":"plugins/#limitations","title":"Limitations","text":"<p>Either by policy or by technical limitation, the interaction of plugins with NetBox core is restricted in certain ways. A plugin may not:</p> <ul> <li>Modify core models. Plugins may not alter, remove, or override core NetBox models in any way. This rule is in place to ensure the integrity of the core data model.</li> <li>Register URLs outside the <code>/plugins</code> root. All plugin URLs are restricted to this path to prevent path collisions with core or other plugins.</li> <li>Override core templates. Plugins can inject additional content where supported, but may not manipulate or remove core content.</li> <li>Modify core settings. A configuration registry is provided for plugins, however they cannot alter or delete the core configuration.</li> <li>Disable core components. Plugins are not permitted to disable or hide core NetBox components.</li> </ul>"},{"location":"plugins/#installing-plugins","title":"Installing Plugins","text":"<p>The instructions below detail the process for installing and enabling a NetBox plugin.</p>"},{"location":"plugins/#install-package","title":"Install Package","text":"<p>Download and install the plugin package per its installation instructions. Plugins published via PyPI are typically installed using pip. Be sure to install the plugin within NetBox's virtual environment.</p> <p>e06ef5523ba15ec31b7ed58bf5799b98023831bc</p> <pre><code>$ source /opt/netbox/venv/bin/activate\n(venv) $ pip install &lt;package&gt;\n</code></pre> <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Alternativamente, voc\u00ea talvez queira instalar o plugin manualmente utilizando o comando <code>python setup.py install</code>. Se voc\u00ea estiver desenvolvendo um plugin e quiser instalar de forma tempor\u00e1ria, utilize o comando <code>python setup.py develop</code> no lugar.</p>"},{"location":"plugins/#habilitando-o-plugin","title":"Habilitando o Plugin","text":"<p>Em <code>configuration.py</code>, adicione o nome do plugin na lista <code>PLUGINS</code>:</p> <pre><code>PLUGINS = [\n    'nome_do_plugin',\n]\n</code></pre>"},{"location":"plugins/#configurando-o-plugin","title":"Configurando o Plugin","text":"<p>Se o plugin precisar de qualquer configura\u00e7\u00e3o, defina-a em <code>configuration.py</code> no par\u00e2metro <code>PLUGINS_CONFIG</code>. Os par\u00e2metros de configura\u00e7\u00e3o dispon\u00edveis devem ser detalhados no arquivo README do plugin.</p> <pre><code>PLUGINS_CONFIG = {\n    'nome_do_plugin': {\n=======\nAlternatively, you may wish to install the plugin manually by running `python setup.py install`. If you are developing a plugin and want to install it only temporarily, run `python setup.py develop` instead.\n\n### Enable the Plugin\n\nIn `configuration.py`, add the plugin's name to the `PLUGINS` list:\n\n```python\nPLUGINS = [\n    'plugin_name',\n]\n</code></pre>"},{"location":"plugins/#configure-plugin","title":"Configure Plugin","text":"<p>If the plugin requires any configuration, define it in <code>configuration.py</code> under the <code>PLUGINS_CONFIG</code> parameter. The available configuration parameters should be detailed in the plugin's README file.</p> <pre><code>PLUGINS_CONFIG = {\n    'plugin_name': {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; e06ef5523ba15ec31b7ed58bf5799b98023831bc\n        'foo': 'bar',\n        'buzz': 'bazz'\n    }\n}\n</code></pre> <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>"},{"location":"plugins/#rodando-as-migracoes-do-banco-de-dados","title":"Rodando as Migra\u00e7\u00f5es do Banco de Dados","text":""},{"location":"plugins/#se-o-plugin-introduz-modelos-novos-do-banco-de-dados-rode-o-esquema-fornecido-de-migracoes","title":"Se o plugin introduz modelos novos do banco de dados, rode o esquema fornecido de migra\u00e7\u00f5es:","text":""},{"location":"plugins/#run-database-migrations","title":"Run Database Migrations","text":"<p>If the plugin introduces new database models, run the provided schema migrations:</p> <p>e06ef5523ba15ec31b7ed58bf5799b98023831bc</p> <pre><code>(venv) $ cd /opt/netbox/netbox/\n(venv) $ python3 manage.py migrate\n</code></pre> <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>"},{"location":"plugins/#coletando-arquivos-estatico","title":"Coletando Arquivos Est\u00e1tico","text":""},{"location":"plugins/#plugins-podem-empacotar-arquivos-estaticos-para-serem-servidos-diretamente-pelo-front-end-http-garanta-que-esses-arquivos-sejam-copiados-para-o-diretorio-root-estatico-static-com-o-comando-de-gerencia-collectstatic","title":"Plugins podem empacotar arquivos est\u00e1ticos para serem servidos diretamente pelo front end HTTP. Garanta que esses arquivos sejam copiados para o diret\u00f3rio root est\u00e1tico (static) com o comando de ger\u00eancia <code>collectstatic</code>:","text":""},{"location":"plugins/#collect-static-files","title":"Collect Static Files","text":"<p>Plugins may package static files to be served directly by the HTTP front end. Ensure that these are copied to the static root directory with the <code>collectstatic</code> management command:</p> <p>e06ef5523ba15ec31b7ed58bf5799b98023831bc</p> <pre><code>(venv) $ cd /opt/netbox/netbox/\n(venv) $ python3 manage.py collectstatic\n</code></pre> <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>"},{"location":"plugins/#reiniciando-o-servico-wsgi","title":"Reiniciando o Servi\u00e7o WSGI","text":""},{"location":"plugins/#reiniciando-o-servico-wsgi-para-carregar-o-novo-plugin","title":"Reiniciando o servi\u00e7o WSGI para carregar o novo plugin:","text":""},{"location":"plugins/#restart-wsgi-service","title":"Restart WSGI Service","text":"<p>Restart the WSGI service to load the new plugin:</p> <p>e06ef5523ba15ec31b7ed58bf5799b98023831bc</p> <pre><code># sudo systemctl restart netbox\n</code></pre> <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>"},{"location":"plugins/#removendo-os-plugins","title":"Removendo os Plugins","text":"<p>Siga os passos para completamente remover o plugin.</p>"},{"location":"plugins/#atualizando-as-configuracoes","title":"Atualizando as Configura\u00e7\u00f5es","text":"<p>Remova o plugin da lista <code>PLUGINS</code> em <code>configuration.py</code>. Tamb\u00e9m remova qualquer par\u00e2metro de configura\u00e7\u00e3o que seja relevante de <code>PLUGINS_CONFIG</code>.</p>"},{"location":"plugins/#removendo-o-pacote-python","title":"Removendo o Pacote Python","text":""},{"location":"plugins/#utilize-o-pip-para-remover-o-plugin-instalado","title":"Utilize o <code>pip</code> para remover o plugin instalado:","text":""},{"location":"plugins/#removing-plugins","title":"Removing Plugins","text":"<p>Follow these steps to completely remove a plugin.</p>"},{"location":"plugins/#update-configuration","title":"Update Configuration","text":"<p>Remove the plugin from the <code>PLUGINS</code> list in <code>configuration.py</code>. Also remove any relevant configuration parameters from <code>PLUGINS_CONFIG</code>.</p>"},{"location":"plugins/#remove-the-python-package","title":"Remove the Python Package","text":"<p>Use <code>pip</code> to remove the installed plugin:</p> <p>e06ef5523ba15ec31b7ed58bf5799b98023831bc</p> <pre><code>$ source /opt/netbox/venv/bin/activate\n(venv) $ pip uninstall &lt;package&gt;\n</code></pre> <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>"},{"location":"plugins/#reinicando-o-servico-wsgi","title":"Reinicando o Servi\u00e7o WSGI","text":""},{"location":"plugins/#para-reiniciar-o-servico-wsgi","title":"Para reiniciar o servi\u00e7o WSGI:","text":""},{"location":"plugins/#restart-wsgi-service_1","title":"Restart WSGI Service","text":"<p>Restart the WSGI service:</p> <p>e06ef5523ba15ec31b7ed58bf5799b98023831bc</p> <pre><code># sudo systemctl restart netbox\n</code></pre> <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>"},{"location":"plugins/#removendo-drop-as-tabelas-do-banco-de-dados","title":"Removendo (Drop) as Tabelas do Banco de Dados","text":"<p>Note</p> <p>Esse passo \u00e9 necess\u00e1rio somente se o plugin criou uma ou mais tabelas do banco de dados (geralmente atrav\u00e9s da introdu\u00e7\u00e3o de novos modelos). Verifique a documenta\u00e7\u00e3o do plugin se voc\u00ea estiver incerto.</p>"},{"location":"plugins/#entre-no-shell-do-banco-de-dados-do-postgresql-para-verificar-se-o-plugin-criou-alguma-tabela-sql-substitua-pluginname-no-exemplo-abaixo-pelo-nome-do-plugin-que-esta-sendo-removido","title":"Entre no shell do banco de dados do PostgreSQL para verificar se o plugin criou alguma tabela SQL. Substitua <code>pluginname</code> no exemplo abaixo pelo nome do plugin que est\u00e1 sendo removido.","text":""},{"location":"plugins/#drop-database-tables","title":"Drop Database Tables","text":"<p>Note</p> <p>This step is necessary only for plugin which have created one or more database tables (generally through the introduction of new models). Check your plugin's documentation if unsure.</p> <p>Enter the PostgreSQL database shell to determine if the plugin has created any SQL tables. Substitute <code>pluginname</code> in the example below for the name of the plugin being removed. (You can also run the <code>\\dt</code> command without a pattern to list all tables.)</p> <p>e06ef5523ba15ec31b7ed58bf5799b98023831bc</p> <pre><code>netbox=&gt; \\dt pluginname_*\n                   List of relations\n                   List of relations\n Schema |       Name     | Type  | Owner\n--------+----------------+-------+--------\n public | pluginname_foo | table | netbox\n public | pluginname_bar | table | netbox\n(2 rows)\n</code></pre> <p>Warning</p> <p>Tenha extremo cuidado ao remover tabelas. Usu\u00e1rios s\u00e3o fortemente encoragados de realizar um backup do seu banco de dados imediatamente antes de tomar qualquer a\u00e7\u00e3o.</p> <p>Warning</p> <p>Exercise extreme caution when removing tables. Users are strongly encouraged to perform a backup of their database immediately before taking these actions.</p> <p>Drop each of the listed tables to remove it from the database:</p> <p>e06ef5523ba15ec31b7ed58bf5799b98023831bc</p>"},{"location":"plugins/#netbox-drop-table-pluginname_foo-drop-table-netbox-drop-table-pluginname_bar-drop-table-head","title":"<pre><code>netbox=&gt; DROP TABLE pluginname_foo;\nDROP TABLE\nnetbox=&gt; DROP TABLE pluginname_bar;\nDROP TABLE\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n</code></pre>","text":"<p>```</p> <p>e06ef5523ba15ec31b7ed58bf5799b98023831bc</p>"},{"location":"plugins/netbox-proxbox/","title":"Proxbox Plugin (Integration with Proxmox)","text":"<p>Official English Documentation can be found here!</p>"},{"location":"plugins/netbox-proxbox/#readmemd-from-the-github-repository","title":"README.md from the GitHub Repository","text":"<p>Although Proxbox is under constant development, I do it with best effort and spare time. I have no financial gain with this and hope you guys understand, as I know it is pretty useful to some people. If you want to speed up its development, solve the problem or create new features with your own code and create a Pull Request so that I can review it. I also would like to appreciate the people who already contributed with code or/and bug reports. Without this help, surely Proxbox would be much less useful as it is already today to several environments!</p> <p></p>"},{"location":"plugins/netbox-proxbox/#netbox-plugin-which-integrates-proxmox-and-netbox","title":"Netbox Plugin which integrates Proxmox and Netbox!","text":"<p>NOTE: Although the Proxbox plugin is in development, it only use GET requests and there is no risk to harm your Proxmox environment by changing things incorrectly.</p> <p></p> <p>Proxbox is currently able to get the following information from Proxmox:</p> <ul> <li>Cluster name</li> <li>Nodes:</li> <li>Status (online / offline)</li> <li>Name</li> <li>Virtual Machines and Containers:</li> <li>Status (online / offline)</li> <li>Name</li> <li>ID</li> <li>CPU</li> <li>Disk</li> <li>Memory</li> <li>Node (Server)</li> </ul>"},{"location":"plugins/netbox-proxbox/#versions","title":"Versions","text":"<p>The following table shows the Netbox and Proxmox versions compatible (tested) with Proxbox plugin.</p> netbox version proxmox version proxbox version &gt;= v3.4.0 &gt;= v6.2.0 =v0.0.5 &gt;= v3.2.0 &gt;= v6.2.0 =v0.0.4 &gt;= v3.0.0 &lt; v3.2 &gt;= v6.2.0 =v0.0.3"},{"location":"plugins/netbox-proxbox/#summary","title":"Summary","text":"<p>1. Installation</p> <ul> <li> <p>1.1. Install package</p> </li> <li> <p>1.1.1. Using pip (production use)</p> </li> <li> <p>1.1.2. Using git (development use)</p> </li> <li> <p>1.2. Enable the Plugin</p> </li> <li> <p>1.3. Configure Plugin</p> </li> <li> <p>1.3.1. Change Netbox 'configuration.py' to add PLUGIN parameters</p> </li> <li> <p>1.3.2. Change Netbox 'settings.py' to include Proxbox Template directory</p> </li> <li> <p>1.4. Run Database Migrations</p> </li> <li> <p>1.5 Restart WSGI Service</p> </li> </ul> <p>2. Configuration Parameters</p> <p>3. Custom Fields</p> <ul> <li> <p>3.1. Custom Field Configuration</p> <ul> <li> <p>3.1.1. Proxmox ID</p> </li> <li> <p>3.1.2. Proxmox Node</p> </li> <li> <p>3.1.3. Proxmox Type</p> </li> <li> <p>3.1.4. Proxmox Keep Interface</p> </li> </ul> </li> <li> <p>3.2. Custom Field Example</p> </li> </ul> <p>4. Usage</p> <p>5. Enable Logs</p> <p>6. Contributing</p> <p>7. Roadmap</p> <p>8. Get Help from Community!</p>"},{"location":"plugins/netbox-proxbox/#1-installation","title":"1. Installation","text":"<p>The instructions below detail the process for installing and enabling Proxbox plugin. The plugin is available as a Python package in pypi and can be installed with pip.</p>"},{"location":"plugins/netbox-proxbox/#11-install-package","title":"1.1. Install package","text":""},{"location":"plugins/netbox-proxbox/#111-using-pip-production-use","title":"1.1.1. Using pip (production use)","text":"<p>Enter Netbox's virtual environment. <pre><code>source /opt/netbox/venv/bin/activate\n</code></pre></p> <p>Install the plugin package. <pre><code>(venv) $ pip install netbox-proxbox\n</code></pre></p>"},{"location":"plugins/netbox-proxbox/#112-using-git-development-use","title":"1.1.2. Using git (development use)","text":"<p>OBS: This method is recommend for testing and development purposes and is not for production use.</p> <p>Move to netbox main folder <pre><code>cd /opt/netbox/netbox\n</code></pre></p> <p>Clone netbox-proxbox repository <pre><code>git clone https://github.com/netdevopsbr/netbox-proxbox.git\n</code></pre></p> <p>Install netbox-proxbox <pre><code>cd netbox-proxbox\nsource /opt/netbox/venv/bin/activate\npython3 setup.py develop\n</code></pre></p>"},{"location":"plugins/netbox-proxbox/#12-enable-the-plugin","title":"1.2. Enable the Plugin","text":"<p>Enable the plugin in /opt/netbox/netbox/netbox/configuration.py: <pre><code>PLUGINS = ['netbox_proxbox']\n</code></pre></p>"},{"location":"plugins/netbox-proxbox/#13-configure-plugin","title":"1.3. Configure Plugin","text":""},{"location":"plugins/netbox-proxbox/#131-change-netbox-configurationpy-to-add-plugin-parameters","title":"1.3.1. Change Netbox 'configuration.py' to add PLUGIN parameters","text":"<p>The plugin's configuration is also located in /opt/netbox/netbox/netbox/configuration.py:</p> <p>Replace the values with your own following the Configuration Parameters section.</p> <p>OBS: You do not need to configure all the parameters, only the one's different from the default values. It means that if you have some value equal to the one below, you can skip its configuration. For netbox you should ensure the domain/port either targets gunicorn or a true http port that is not redirected to https.</p> <pre><code>PLUGINS_CONFIG = {\n    'netbox_proxbox': {\n        'proxmox': {\n            'domain': 'proxbox.example.com',    # May also be IP address\n            'http_port': 8006,\n            'user': 'root@pam',   # always required\n            'password': 'Strong@P4ssword', # only required, if you don't want to use token based authentication\n            'token': {\n                'name': 'tokenID',  # Only type the token name and not the 'user@pam:tokenID' format\n                'value': '039az154-23b2-4be0-8d20-b66abc8c4686'\n            },\n            'ssl': False\n        },\n        'netbox': {\n            'domain': 'localhost',     # Ensure localhost is added to ALLOWED_HOSTS\n            'http_port': 8001,     # Gunicorn port.\n            'token': '0dd7cddfaee3b38bbffbd2937d44c4a03f9c9d38',\n            'ssl': False,   # There is no support to SSL on Netbox yet, so let it always False.\n            'settings': {\n                'virtualmachine_role_id' : 0,\n                'node_role_id' : 0,\n                'site_id': 0\n            }\n        }\n    }\n</code></pre> <p></p>"},{"location":"plugins/netbox-proxbox/#132-change-netbox-settingspy-to-include-proxbox-template-directory","title":"1.3.2. Change Netbox 'settings.py' to include Proxbox Template directory","text":"<p>Probably on the next release of Netbox, it will not be necessary to make the configuration below! As the Pull Request #8733 got merged to develop branch</p> <p>It is no longer necessary to modify the templates section in <code>settings.py</code> and you may revert any changes.</p>"},{"location":"plugins/netbox-proxbox/#14-run-database-migrations","title":"1.4. Run Database Migrations","text":"<pre><code>(venv) $ cd /opt/netbox/netbox/\n(venv) $ python3 manage.py migrate\n</code></pre>"},{"location":"plugins/netbox-proxbox/#15-restart-wsgi-service","title":"1.5. Restart WSGI Service","text":"<p>Restart the WSGI service to load the new plugin: <pre><code># sudo systemctl restart netbox\n</code></pre></p>"},{"location":"plugins/netbox-proxbox/#2-configuration-parameters","title":"2. Configuration Parameters","text":"<p>The following options are available:</p> <ul> <li><code>proxmox</code>: (Dict) Proxmox related configuration to use proxmoxer.</li> <li><code>proxmox.domain</code>: (String) Domain or IP address of Proxmox.</li> <li><code>proxmox.http_port</code>: (Integer) Proxmox HTTP port (default: 8006).</li> <li><code>proxmox.user</code>: (String) Proxmox Username.</li> <li><code>proxmox.password</code>: (String) Proxmox Password.</li> <li><code>proxmox.token</code>: (Dict) Contains Proxmox TokenID (name) and Token Value (value).</li> <li><code>proxmox.token.name</code>: (String) Proxmox TokenID.</li> <li><code>proxmox.token.value</code>: (String) Proxmox Token Value.</li> <li> <p><code>proxmox.ssl</code>: (Bool) Defines the use of SSL (default: False).</p> </li> <li> <p><code>netbox</code>: (Dict) Netbox related configuration to use pynetbox.</p> </li> <li><code>netbox.domain</code>: (String) Domain or IP address of Netbox. Ensure name or ip is added to <code>ALLOWED_HOSTS</code></li> <li><code>netbox.http_port</code>: (Integer) Netbox HTTP PORT (default: 8001).  If you are not targeting gunicorn directly make sure the HTTP port is not redirected to HTTPS by your HTTP server.</li> <li><code>netbox.token</code>: (String) Netbox Token Value.</li> <li><code>netbox.ssl</code>: (Bool) Defines the use of SSL (default: False). - Proxbox doesn't support SSL on Netbox yet.</li> <li><code>netbox.settings</code>: (Dict) Default items of Netbox to be used by Proxbox. </li> <li>If not configured, Proxbox will automatically create a basic configuration to make it work.</li> <li>The ID of each item can be easily found on the URL of the item you want to use.</li> <li><code>netbox.settings.virtualmachine_role_id</code>: (Integer) Role ID to be used by Proxbox when creating Virtual Machines</li> <li><code>netbox.settings.node_role_id</code>: (Integer) Role ID to be used by Proxbox when creating Nodes (Devices)</li> <li><code>netbox.settings.site_id</code> (Integer) Site ID to be used by Proxbox when creating Nodes (Devices)</li> </ul>"},{"location":"plugins/netbox-proxbox/#3-custom-fields","title":"3. Custom Fields","text":"<p>To get Proxmox ID, Node and Type information, is necessary to configure Custom Fields. Below the parameters needed to make it work:</p> <p></p>"},{"location":"plugins/netbox-proxbox/#31-custom-field-configuration","title":"3.1. Custom Field Configuration","text":""},{"location":"plugins/netbox-proxbox/#311-proxmox-id","title":"3.1.1. Proxmox ID","text":"<p>Required values (must be equal) - [Custom Field] Type: Integer - [Custom Field] Name: proxmox_id - [Assignment] Content-type: Virtualization &gt; virtual machine - [Validation Rules] Minimum value: 0</p> <p>Optional values (may be different) - [Custom Field] Label: [Proxmox] ID - [Custom Field] Description: Proxmox VM/CT ID</p> <p></p>"},{"location":"plugins/netbox-proxbox/#312-proxmox-node","title":"3.1.2. Proxmox Node","text":"<p>Required values (must be equal) - [Custom Field] Type: Text - [Custom Field] Name: proxmox_node - [Assignment] Content-type: Virtualization &gt; virtual machine</p> <p>Optional values (may be different) - [Custom Field] Label: [Proxmox] Node - [Custom Field] Description: Proxmox Node (Server)</p> <p></p>"},{"location":"plugins/netbox-proxbox/#313-proxmox-type-qemu-or-lxc","title":"3.1.3. Proxmox Type (qemu or lxc)","text":"<p>Required values (must be equal) - [Custom Field] Type: Selection - [Custom Field] Name: proxmox_type - [Assignment] Content-type: Virtualization &gt; virtual machine - [Choices] Choices: qemu,lxc</p> <p>Optional values (may be different) - [Custom Field] Label: [Proxmox] Type - [Custom Field] Description: Proxmox type (VM or CT)</p> <p></p>"},{"location":"plugins/netbox-proxbox/#314-proxmox-keep-interface","title":"3.1.4. Proxmox Keep Interface","text":"<p>Required values (must be equal) - [Custom Field] Type: Boolean (true/false) - [Custom Field] Name: proxmox_keep_interface - [Assignment] Content-type: DCIM &gt; Interface</p> <p></p>"},{"location":"plugins/netbox-proxbox/#32-custom-field-example","title":"3.2. Custom Field Example","text":""},{"location":"plugins/netbox-proxbox/#4-usage","title":"4. Usage","text":"<p>If everything is working correctly, you should see in Netbox's navigation the Proxmox VM/CT button in Plugins dropdown list.</p> <p>On Proxmox VM/CT page, click button </p> <p>It will redirect you to a new page and you just have to wait until the plugin runs through all Proxmox Cluster and create the VMs and CTs in Netbox.</p> <p>OBS: Due the time it takes to full update the information, your web brouse might show a timeout page (like HTTP Code 504) even though it actually worked.</p>"},{"location":"plugins/netbox-proxbox/#5-enable-logs","title":"5. Enable Logs","text":"<p>So that Proxbox plugin logs what is happening to the terminal, copy the following code and paste to <code>configuration.py</code> Netbox configuration file:</p> <pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'root': {\n        'handlers': ['console'],\n        'level': 'INFO',\n    },\n}\n</code></pre> <p>You can customize this using the following link: Django Docs - Logging. Although the above standard configuration should do the trick to things work.</p>"},{"location":"plugins/netbox-proxbox/#6-contributing","title":"6. Contributing","text":"<p>Developing tools for this project based on ntc-netbox-plugin-onboarding repo.</p> <p>Issues and pull requests are welcomed.</p>"},{"location":"plugins/netbox-proxbox/#7-roadmap","title":"7. Roadmap","text":"<ul> <li>Start using custom models to optimize the use of the Plugin and stop using 'Custom Fields'</li> <li>Automatically remove Nodes on Netbox when removed on Promox (as it already happens with Virtual Machines and Containers)</li> <li>Add individual update of VM/CT's and Nodes (currently is only possible to update all at once)</li> <li>Add periodic update of the whole environment so that the user does not need to manually click the update button.</li> <li>Create virtual machines and containers directly on Netbox, having no need to access Proxmox.</li> <li>Add 'Console' button to enable console access to virtual machines</li> </ul>"},{"location":"plugins/netbox-proxbox/#8-get-help-from-community","title":"8. Get Help from Community!","text":"<p>If you are struggling to get Proxbox working, feel free to contact someone from community (including me) to help you. Below some of the communities available:</p> <ul> <li> <p>Official - Slack Community (english)</p> </li> <li> <p>Community Discord Channel - \ud83c\udde7\ud83c\uddf7 (pt-br)</p> </li> <li> <p>Community Telegram Chat - \ud83c\udde7\ud83c\uddf7 (pt-br)</p> </li> </ul>"},{"location":"plugins/development/","title":"Plugins Development","text":"<p>Tip</p> <p>Come\u00e7ando agora com Plugins? Olhe nosso Tutorial de Plugins do NetBox no GitHub! Esse guia ir\u00e1 guia-lo de forma aprofundada o processo de cria\u00e7\u00e3o de um plugin inteiro do in\u00edcio. Inclui tamb\u00e9m o demo plugin repo para garantir que voc\u00ea possa pular para qualquer passo ao longo do caminho. Isso ir\u00e1 permitir que tenha um projeto up e rodando com plugins quase que instantaneamente!</p> <p>O NetBox pode extender o suporte adicional aos modelos de dados e funcionalidades atrav\u00e9s do uso de plugins. Um plugin \u00e9 essencialmente um Django app contido em si mesmo que pode ser instalado junto com o NetBox para fornecer funcionalidades customizadas. V\u00e1rios plugins podem ser instalados em uma inst\u00e2ncia de NetBox, e cada plugin pode ser habilitado para ser configurado independente.</p> <p>Info</p> <p>O Django \u00e9 um framework Python ao qual o NetBox \u00e9 feito. O Django em si \u00e9 bem documentando, essa documenta\u00e7\u00e3o cobre apenas os aspectos do desenvolvimento de plugins que s\u00e3o \u00fanicas ao NetBox.</p> <p>Plugins podem fazer muitas coisas, incluido:</p> <ul> <li>Criando modelos Django para armazenar os dados no banco de dados</li> <li>Fornecer suas pr\u00f3prias \"p\u00e1ginas\" (views) na interface web do usu\u00e1rio</li> <li>Injetar templates de conte\u00fado e links de navega\u00e7\u00e3o</li> <li>Extender a API REST e GraphQL APIs do NetBox</li> <li>Carregar apps Django adicionais</li> <li>Adicionar middlewares customizados de requisi\u00e7\u00e3o/resposta (request/response)</li> </ul> <p>No entanto, tenha em mente que cada pe\u00e7a de funcionalidade \u00e9 inteiramente opcional. Por exemplo, se o seu plugin meramente adiciona um middleware oum endpoint de API para os dados existentes.</p> <p>Warning</p> <p>Enquanto que muito poderoso, a API dos Plugins do NetBox \u00e9 ncess\u00e1riamente limitada em seu escopo. A API dos Plugins \u00e9 discutida aqui completamente: qualquer parte do c\u00f3digo do c\u00f3digo base do NetBox n\u00e3o documentada aqui n\u00e3o \u00e9 parte da API de plugins suportadas, e n\u00e3o deve ser empregada por plugins. Elementos internos do NetBox s\u00e3o sujeitos a mudan\u00e7a a qualquer momento sem aviso pr\u00e9vio. Autores de Plugins s\u00e3o fortemente encorajados para desenvolverem plugins usando somente os componentes suportados oficialmente aqui e os fornecidos pelo framework do Django para evitar mudan\u00e7as que quebram em futuras vers\u00f5es.</p>"},{"location":"plugins/development/#estrutura-do-plugin","title":"Estrutura do Plugin","text":"<p>Embora a estrutura espec\u00edfica do plugin \u00e9 deixada para ser definida pelos seus autores, um plugin do NetBox normalmente vai ter uma estrutura parecida com:</p> <pre><code>project-name/\n  - plugin_name/\n    - api/\n      - __init__.py\n      - serializers.py\n      - urls.py\n      - views.py\n    - migrations/\n      - __init__.py\n      - 0001_initial.py\n      - ...\n    - templates/\n      - plugin_name/\n        - *.html\n    - __init__.py\n    - filtersets.py\n    - graphql.py\n    - models.py\n    - middleware.py\n    - navigation.py\n    - signals.py\n    - tables.py\n    - template_content.py\n    - urls.py\n    - views.py\n  - README.md\n  - setup.py\n</code></pre> <p>A pasta de n\u00edvel maior \u00e9 o root do projeto, que pode ter qualquer nome que voc\u00ea queira. Imediatamente dentro do root deve existir diversos items:</p> <ul> <li><code>setup.py</code> - O script padr\u00e3o de instala\u00e7\u00e3o usado para instalar o pacote do plugin dentro do ambiente Python.</li> <li><code>README.md</code> - Breve introdu\u00e7\u00e3o do plugin, como instalar e configur\u00e1-lo, onde achar ajuda e informa\u00e7\u00f5es pertinentes. \u00c9 recomendado escrever os arquivos <code>README</code> usando linguagem markdown como o Markdown para habilitar uma exibi\u00e7\u00e3o facilmente lida por humanos.</li> <li>O diret\u00f3rio fonte do plugin (source directory) Deve ser um nome de pacote Python v\u00e1lido, tipicamente contendo somente letras em min\u00fasculo, n\u00fameros e underline.</li> </ul> <p>O diret\u00f3rio fonte do plugin deve conter todo o c\u00f3digo Python e outros recursos utilizados pelo Plugin. A sua estrutura \u00e9 deixada para ser definida pelo autor, no entanto \u00e9 recomendado seguir boas pr\u00e1ticas como as mostradas na documenta\u00e7\u00e3o do Django. No m\u00ednimo, esse diret\u00f3rio deve conter o arquivo <code>__init__.py</code> contendo uma inst\u00e2ncia da classe <code>PluginConfig</code> do NetBox, discutida abaixo.</p>"},{"location":"plugins/development/#pluginconfig","title":"PluginConfig","text":"<p>The <code>PluginConfig</code> class is a NetBox-specific wrapper around Django's built-in <code>AppConfig</code> class. It is used to declare NetBox plugin functionality within a Python package. Each plugin should provide its own subclass, defining its name, metadata, and default and required configuration parameters. An example is below:</p> <p>A classe espec\u00edfica <code>PluginConfig</code> do NetBox junta tudo que \u00e9 nativo do Django da classse <code>AppConfig</code>. \u00c9 utilizada para declarar as funcionalidades do plugin do NetBox dentro do pacote Python. Cad aplugin deve fornecer sua pr\u00f3pria subclasse, definindo o nome, meta dado, e os padr\u00f5es padr\u00f5es e par\u00e2metros obrigat\u00f3rios. Um exemplo abaixo:</p> <pre><code>from extras.plugins import PluginConfig\n\nclass FooBarConfig(PluginConfig):\n    name = 'foo_bar'\n    verbose_name = 'Foo Bar'\n    description = 'Exemplo de plugin do NetBox'\n    version = '0.1'\n    author = 'Jeremy Stretch'\n    author_email = 'autor@exemplo.com'\n    base_url = 'foo-bar'\n    required_settings = []\n    default_settings = {\n        'baz': True\n    }\n    django_apps = [\"foo\", \"bar\", \"baz\"]\n\nconfig = FooBarConfig\n</code></pre> <p>O NetBox procura pela vari\u00e1vel <code>config</code> dentro do arquivo <code>__init__.py</code> do plugin para carregar sua configura\u00e7\u00e3o. Normalmente, a classe PluginConfig ser\u00e1 definida, mas voc\u00ea pode querer gerar uma classe PluginConfig dinamicamente baseada nas vari\u00e1veis de ambiente ou outros fatores.</p>"},{"location":"plugins/development/#atributos-de-pluginconfig","title":"Atributos de PluginConfig","text":"Nome Descri\u00e7\u00e3o <code>name</code> Nome do plugin;  mesmo que o diret\u00f3rio fonte <code>verbose_name</code> Nome fo plugin a ser lido por humanos <code>version</code> Vers\u00e3o atual. Sem\u00e2ntica de versionamento \u00e9 encorajada para ser utilizada. <code>description</code> Breve descri\u00e7\u00e3o do pr\u00f3posito do plugin <code>author</code> Nome do autor do plugin <code>author_email</code> Endere\u00e7o de email p\u00fablico do autor <code>base_url</code> Caminho do diret\u00f3rio base para ser utilizado pela URL do plugin (opcional). Se n\u00e3o especificada, o nome do projeto (<code>name</code>) ser\u00e1 utilizado <code>required_settings</code> Lista de qualquer par\u00e2metro de configura\u00e7\u00e3o que deve ser definido pelo usu\u00e1rio <code>default_settings</code> Dicion\u00e1rio (dict) com os par\u00e2metros de configura\u00e7\u00e3o e seus valores padr\u00f5es <code>django_apps</code> Lista de Django apps adicionais para serem utilizados junto com o plugin <code>min_version</code> Vers\u00e3o m\u00ednima do NetBox que o plugin \u00e9 compat\u00edvel <code>max_version</code> Vers\u00e3o m\u00e1xima do NetBox que o plugin \u00e9 compat\u00edvel <code>middleware</code> Lista de classes de middleware para serem adicionadas ap\u00f3s os middlewares nativos do NetBox <code>queues</code> Lista de tarefas de fundo (background taks) de filas para serem criadas <code>search_extensions</code> Caminho tracejado (dotted path) para a lista de classes de search index (padr\u00e3o: <code>search.indexes</code>) <code>template_extensions</code> Caminho tracejado (dotted path) para a lista de classes de extens\u00e3o de template (padr\u00e3o: <code>template_content.template_extensions</code>) <code>menu_items</code> Caminho tracejado (dotted path) para a lista de items do menu fornecidos pelo plugin (padr\u00e3o: <code>navigation.menu_items</code>) <code>graphql_schema</code> Caminho tracejado (dotted path) para a classe de esquema do plugin de GraphQL, se houver uma (padr\u00e3o: <code>graphql.schema</code>) <code>user_preferences</code> Caminho tracejado (dotted path) para o dicion\u00e1rio (dict) de mapeamento das prefer\u00eancias do usu\u00e1rio definidas pelo plugin (padr\u00e3o: <code>preferences.preferences</code>) <p>Todas as configura\u00e7\u00f5es obrigat\u00f3rios devem ser configuradas pelo usu\u00e1rio. Se houver um par\u00e2metro de configura\u00e7\u00e3o listada tanto em <code>required_settings</code> e <code>default_settings</code>, a configura\u00e7\u00e3o padr\u00e3o ser\u00e1 ignorada.</p> <p>Tip</p> <p>Os par\u00e2metros de configura\u00e7\u00e3o do Plugin podem ser acessados usando a fun\u00e7\u00e3o <code>get_plugin_config()</code>. Por exemplo:</p> <pre><code>from extras.plugins import get_plugin_config\nget_plugin_config('my_plugin', 'verbose_name')\n</code></pre>"},{"location":"plugins/development/#observacoes-importantes-sobre-django_apps","title":"Observa\u00e7\u00f5es Importantes Sobre <code>django_apps</code>","text":"<p>Carregar apps adicionais podem causar mais malef\u00edcios do que benef\u00edcios que poderiam causar a identifica\u00e7\u00e3o de problemas do NetBox em si mais dif\u00edcil. O atributo <code>django_apps</code> \u00e9 usada somente para casos avan\u00e7ados que exigem uma integra\u00e7\u00e3o maior com o Django.</p> <p>Os Apps dessa lista s\u00e3o inserios antes da <code>PluginConfig</code> do plugin na ordem em que s\u00e3o definidas. Adicionar o m\u00f3dulo <code>PluginConfig</code> do plugin nessa lista muda o comportamento e permite que os apps sejam carregados depois do plugin.</p> <p>Qualquer app adicional deve ser instalado dvem estar dentro do mesmo ambiente virtual Python do NetBox ou exce\u00e7\u00f5es <code>ImproperlyConfigured</code> ser\u00e3o criadas ao carregar o plugin.</p>"},{"location":"plugins/development/#criando-o-setuppy","title":"Criando o setup.py","text":"<p><code>setup.py</code> \u00e9 o script de setup usado para empacotar e instalar nosso plugin uma vez que foi finalizado. A fun\u00e7\u00e3o prim\u00e1ria desse script \u00e9 chamar a a fun\u00e7\u00e3o da biblioteca setuptools <code>setup()</code> para criar o pacote de distribui\u00e7\u00e3o do Python. N\u00f3s podemos passar v\u00e1rios argumentos para controlar a cria\u00e7\u00e3o do pacote, assim como fornecer meta dados sobre o plugin. Um exemplo de <code>setup.py</code> abaixo:</p> <pre><code>from setuptools import find_packages, setup\n\nsetup(\n    name='my-example-plugin',\n    version='0.1',\n    description='Um plugin de exemplo',\n    url='https://github.com/jeremystretch/my-example-plugin',\n    author='Jeremy Stretch',\n    license='Apache 2.0',\n    install_requires=[],\n    packages=find_packages(),\n    include_package_data=True,\n    zip_safe=False,\n)\n</code></pre> <p>V\u00e1rios desses par\u00e2metros s\u00e3o auto explicativos, verifique a documenta\u00e7\u00e3o do setuptools.</p> <p>Info</p> <p><code>zip_safe=False</code> \u00e9 obrigat\u00f3rio pois a intera\u00e7\u00e3o atual do plugin n\u00e3o \u00e9 segura com zip devido a seguinte issue de python issue19699</p>"},{"location":"plugins/development/#crindo-um-ambiente-virtual","title":"Crindo um Ambiente Virtual","text":"<p>\u00c9 extremamente recomendado criar um ambiente virtual do Python para o desenvolvimento do seu plugin, oposto ao utilizar os pacotes system-wide. Ir\u00e1 suportar o controle completo das vers\u00f5es instaladas de todas as depend\u00eancias para evitar o conflito com os pacotes do sistema. O ambiente pode estar onde voc\u00ea quiser, no entanto deve ser excluido do controlo de revis\u00e3o. (Uma conve\u00e7\u00e3o popular \u00e9 manter todos os ambientes virutais dentro do diret\u00f3rio do usu\u00e1rio, exemplo <code>~/.virtualenvs/</code>.)</p> <pre><code>python3 -m venv ~/.virtualenvs/my_plugin\n</code></pre> <p>Voc\u00ea pode permitir o NetBox dispon\u00edvel dentro do ambiente ao criar um arquivo de caminho (path) para sua localiza\u00e7\u00e3o. Isso ir\u00e1 adicionar o caminho (path) para ativa\u00e7\u00e3o. (Certifique-se de ajsutar o comando abaixo para especificar o caminho de ambiente virtual, a vers\u00e3o do Python e a instala\u00e7\u00e3o do NetBox.)</p> <pre><code>echo /opt/netbox/netbox &gt; $VENV/lib/python3.8/site-packages/netbox.pth\n</code></pre>"},{"location":"plugins/development/#instalacao-de-desenvolvimento","title":"Instala\u00e7\u00e3o de Desenvolvimento","text":"<p>Para facilitar o desenvolvimento, \u00e9 recomendando seguir em frente e instalar o plugin neste ponto utilizando o modo do setuptools <code>develop</code>. Ir\u00e1 criar um link simb\u00f3lico dentro do seu ambiente virtual para o diret\u00f3rio de desenvolvimento do plugin. Chame <code>setup.py</code> do diret\u00f3rio root do plugin com o argumento <code>develop</code> (no lugar de <code>install</code>):</p> <pre><code>$ python setup.py develop\n</code></pre>"},{"location":"plugins/development/#configurando-o-netbox","title":"Configurando o NetBox","text":"<p>Para habilitar o plugin do NetBox, adicione o par\u00e2metro <code>PLUGINS</code> em <code>configuration.py</code>:</p> <pre><code>PLUGINS = [\n    'my_plugin',\n]\n</code></pre>"},{"location":"plugins/development/background-tasks/","title":"Tarefas de Fundo (Background Taks)","text":"<p>O NetBox suporta o enfileiramento de tarefas que precisam ser realizadas no background, desacoplada do ciclo de request-response (requisi\u00e7\u00e3o-reposta), usando a biblioteca Python RQ. Tr\u00eas tarefas de queue (fila) de diferentes prioridades s\u00e3o definidas por padr\u00e3o:</p> <ul> <li>Alta (High)</li> <li>Padr\u00e3o (Default)</li> <li>Baixa (Low)</li> </ul> <p>Qualquer tarefa na fila de prioridade \"alta\" (high) s\u00e3o completadas antes da fila \"padr\u00e3o\" (default), e qualquer tarefa na fila padr\u00e3o \u00e9 completada antes da fila \"baixa\" (low)</p> <p>Plugins podem tamb\u00e9m adicionar filas customizadas conforme sua pr\u00f3pria necessidade utilizando o atributo <code>queues</code> abaixo da classe <code>PluginConfig</code>. Um exemplo est\u00e1 incluso abaixo:</p> <pre><code>class MyPluginConfig(PluginConfig):\n    name = 'meu_plugin'\n    ...\n    queues = [\n        'foo',\n        'bar',\n    ]\n</code></pre> <p>A classe <code>PluginConfig</code> acima cria duas filas (queues) customizadas com os seguintes nomes <code>meu_plugin.foo</code> e <code>meu_plugin.bar</code>. (O nome do plugin \u00e9 salvo como um prefixo em cada fila para evitar conflito entre diferentes plugins.)</p> <p>Warning</p> <p>Por padr\u00e3o, os processos RQ worker do Netbox apenas servem as filas high, default e low. Plugins que queiram introduzir filas customizadas devem orientar seus usu\u00e1rios para tanto reconfigurar o worker padr\u00e3o, ou odar um worker dedicado especificando as filas necess\u00e1rias. Por exemplo:</p> <pre><code>python manage.py rqworker my_plugin.foo my_plugin.bar\n</code></pre>"},{"location":"plugins/development/exceptions/","title":"Exceptions","text":"<p>As classes de exce\u00e7\u00e3o listadas aqui podem ser utilizadas pelos plugins para alterar o comportamento padr\u00e3o do NetBox em v\u00e1rios cen\u00e1rios.</p>"},{"location":"plugins/development/exceptions/#abortrequest","title":"<code>AbortRequest</code>","text":"<p>NetBox fornece v\u00e1ras visualiza\u00e7\u00f5es gen\u00e9ricas e REST API viewsets que facilitam a cria\u00e7\u00e3o, modifica\u00e7\u00e3o e remo\u00e7\u00e3o dos objetos, seja individualmente ou em grupos. Em certas condi\u00e7\u00f5es, pode ser desejado que os plugins interrompam essas a\u00e7\u00f5es e abortem a requisi\u00e7\u00e3o de forma limpa (clean), reportando uma mensagem de erro ao usu\u00e1rio final ou ao usu\u00e1rio da API.</p> <p>Por exemplo, um plugin pode proibiar a cria\u00e7\u00e3o de um site com um nome pro\u00edbido conectando um sinal de recebedor (receiver) do Django <code>pre_save</code> para o modelo de Site:</p> <pre><code>from django.db.models.signals import pre_save\nfrom django.dispatch import receiver\nfrom dcim.models import Site\nfrom utilities.exceptions import AbortRequest\n\nPROHIBITED_NAMES = ('foo', 'bar', 'baz')\n\n@receiver(pre_save, sender=Site)\ndef test_abort_request(instance, **kwargs):\n    if instance.name.lower() in PROHIBITED_NAMES:\n        raise AbortRequest(f\"Site name can't be {instance.name}!\")\n</code></pre> <p>Um erro de mensagem deve ser fornecido para criar uma <code>AbortRequest</code>.  Isso pode ser transmitido ao usu\u00e1rio e deve ter uma raz\u00e3o explicada de forma clara pela qual a requisi\u00e7\u00e3o foi abortada, assim como uma poss\u00edvel solu\u00e7\u00e3o para essa exce\u00e7\u00e3o.</p> <p>Tip</p> <p>Essa exce\u00e7\u00e3o tem a inte\u00e7\u00e3o de ser utilizada para lidar com uma l\u00f3gica complexa de verifica\u00e7\u00e3o e deve ser usada com modera\u00e7\u00e3o. Para a valida\u00e7\u00e3o simples de um objeto (como no exemplo acima) considere utilizar uma regra de valida\u00e7\u00e3o customizada no lugar.</p>"},{"location":"plugins/development/filtersets/","title":"Filtros e Grupos de Filtro (Filter Sets)","text":"<p>Grupos de filtros definem os mecanismos dispon\u00edveis para filtrar ou pesquisar um grupo de objetos no NetBox. Por exemplo, sites (locais) podem ser filtradas pela regi\u00e3o ou grupo pai (parent), status, ID da instala\u00e7\u00e3o (facility) e por a\u00ed vai. O mesmo grupo de filtro deve ser usado de forma consistente para um modelo seja em uma requisi\u00e7\u00e3o feita pela interface web, API REST, ou uma API GraphQL. NetBox utiliza a biblioteca django-filters2 para definir os grupos de filtros.</p>"},{"location":"plugins/development/filtersets/#classes-de-filtersets-grupos-de-filtro","title":"Classes de FilterSets (Grupos de Filtro)","text":"<p>Para suportar funcionalidades adicionais \u00e0s padr\u00f5es dos modelos do NetBox, como a associa\u00e7\u00e3o de tag e suporte a campos customizadas, a classe <code>NetBoxModelFilterSe</code> est\u00e1 dispon\u00edvel para uso dos plugins. Isso deve ser usado pela classe base de grupos de filtros para os modelos (models) do plugin que herdam <code>NetBoxModel</code>. Dentro dessa clase, filtros individuais podem ser declaradas diretamente conforme documenta\u00e7\u00e3o do <code>django-filters</code>. Um exemplo abaixo \u00e9 fornecido.</p> <pre><code># filtersets.py\nimport django_filters\nfrom netbox.filtersets import NetBoxModelFilterSet\nfrom .models import MyModel\n\nclass MyFilterSet(NetBoxModelFilterSet):\n    status = django_filters.MultipleChoiceFilter(\n        choices=(\n            ('foo', 'Foo'),\n            ('bar', 'Bar'),\n            ('baz', 'Baz'),\n        ),\n        null_value=None\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('some', 'other', 'fields')\n</code></pre>"},{"location":"plugins/development/filtersets/#declarando-grupos-de-filtro-filter-sets","title":"Declarando Grupos de Filtro (Filter Sets)","text":"<p>Para utilizar grupos de filtro em uma subclasse de uma visualiza\u00e7\u00e3o gen\u00e9rica do NetBox (como <code>ObjectListView</code> ou <code>BulkEditView</code>), defina o atributo <code>filterset</code> na classe de visualiza\u00e7\u00e3o (view class):</p> <pre><code># views.py\nfrom netbox.views.generic import ObjectListView\nfrom .filtersets import MyModelFilterSet\nfrom .models import MyModel\n\nclass MyModelListView(ObjectListView):\n    queryset = MyModel.objects.all()\n    filterset = MyModelFilterSet\n</code></pre> <p>Para habilitar um grupo de filtro no endpoint da API REST, configure o atributo <code>filterset_class</code> na visualiza\u00e7\u00e3o (view) da API:</p> <pre><code># api/views.py\nfrom myplugin import models, filtersets\nfrom . import serializers\n\nclass MyModelViewSet(...):\n    queryset = models.MyModel.objects.all()\n    serializer_class = serializers.MyModelSerializer\n    filterset_class = filtersets.MyModelFilterSet\n</code></pre>"},{"location":"plugins/development/filtersets/#classes-de-filtro","title":"Classes de Filtro","text":""},{"location":"plugins/development/filtersets/#tagfilter","title":"TagFilter","text":"<p>A classe <code>TagFilter</code> est\u00e1 dispon\u00edvel para todosos modelos que suportam associa\u00e7\u00e3o de tag (os que herdam de <code>NetBoxModel</code> ou <code>TagsMixin</code>). Esse filtro cria uma subclasse do <code>ModelMultipleChoiceFilter</code> para trabalhar com a classe <code>TaggedItem</code>.</p> <pre><code>from django_filters import FilterSet\nfrom extras.filters import TagFilter\n\nclass MyModelFilterSet(FilterSet):\n    tag = TagFilter()\n</code></pre>"},{"location":"plugins/development/forms/","title":"Forms","text":""},{"location":"plugins/development/forms/#classes-de-formularios","title":"Classes de Formul\u00e1rios","text":"<p>O NetBox fornece v\u00e1rias classes formul\u00e1rio base para serem utilizadas pelos plugins.</p> Classes de Formul\u00e1rios Prop\u00f3sito <code>NetBoxModelForm</code> Criar/editar objetos individuais <code>NetBoxModelImportForm</code> Importar objetos de dados CSV em grupo <code>NetBoxModelBulkEditForm</code> Editar m\u00faltiplos objetos simultaneamente <code>NetBoxModelFilterSetForm</code> Filtrar objetos dentro da visualiza\u00e7\u00e3o de lista"},{"location":"plugins/development/forms/#netboxmodelform","title":"<code>NetBoxModelForm</code>","text":"<p>\u00c9 o formul\u00e1rio base para criar e editar modelos do NetBox. Ele extende o <code>ModelForm</code> do Django para adicionar suporte \u00e0s tags e campos customizados.</p> Atributo Descri\u00e7\u00e3o <code>fieldsets</code> Uma tuple de tuplas duplas definindo o layout do formul\u00e1rio (opcional) <p>Exemplo</p> <pre><code>from dcim.models import Site\nfrom netbox.forms import NetBoxModelForm\nfrom utilities.forms.fields import CommentField, DynamicModelChoiceField\nfrom .models import MyModel\n\nclass MyModelForm(NetBoxModelForm):\n    site = DynamicModelChoiceField(\n        queryset=Site.objects.all()\n    )\n    comments = CommentField()\n    fieldsets = (\n        ('Model Stuff', ('name', 'status', 'site', 'tags')),\n        ('Tenancy', ('tenant_group', 'tenant')),\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('name', 'status', 'site', 'comments', 'tags')\n</code></pre> <p>Tip</p> <p>Se o seu formul\u00e1rio tem o campo <code>comments</code>, n\u00e3o h\u00e1 necess\u00e1rio de list\u00e1-lo; sempre ir\u00e1 aparecer por \u00faltimo na p\u00e1gina.</p>"},{"location":"plugins/development/forms/#netboxmodelimportform","title":"<code>NetBoxModelImportForm</code>","text":"<p>Esse formul\u00e1rio facilita a importa\u00e7\u00e3o em grupo de novos objetos do CSV, JSON ou dados em YAML. Como \u00e9 com os formul\u00e1rios dos modelos, voc\u00ea vai precisar declarar uma subclasse <code>Meta</code> especificando o <code>model</code> e <code>fields</code> associados. NetBox tamb\u00e9m fornece v\u00e1rios campos dispon\u00edveis para sempre importados em tipos diferentes de CSV, listados abaixo:</p> <p>Exemplo</p> <pre><code>from dcim.models import Site\nfrom netbox.forms import NetBoxModelImportForm\nfrom utilities.forms import CSVModelChoiceField\nfrom .models import MyModel\n\n\nclass MyModelImportForm(NetBoxModelImportForm):\n    site = CSVModelChoiceField(\n        queryset=Site.objects.all(),\n        to_field_name='name',\n        help_text='Assigned site'\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('name', 'status', 'site', 'comments')\n</code></pre> <p>Note</p> <p>A classe do formul\u00e1rio foi previamente nomeada de <code>NetBoxModelCSVForm</code>. Foi renomeada para na vers\u00e3o v3.4 do NetBox para suportar os formatos JSON e YAML em adi\u00e7\u00e3o ao CSV. A classe <code>NetBoxModelCSVForm</code> foi mantida para compatibilidade com vers\u00f5es anteriores e fun\u00e7\u00f5es iguais a <code>NetBoxModelImportForm</code>. No entanto, autores de plugins devem estar cientes que compatibilidade com vers\u00f5es anterior ser\u00e3o removidas na vers\u00e3o v3.5. do NetBox.</p>"},{"location":"plugins/development/forms/#netboxmodelbulkeditform","title":"<code>NetBoxModelBulkEditForm</code>","text":"<p>Esse formul\u00e1rio (form) facilita a edi\u00e7\u00e3o de m\u00faltiplos objetos em grupo (bulk). Diferente do modelo do formul\u00e1rio, esse formul\u00e1rio n\u00e3o tem uma classe filha chamada de <code>Meta</code>, e deve explicitamente definir cada campo. Todos os campos os campos dentro de um grupo de edi\u00e7\u00e3o s\u00e3o geralmente declarados com <code>required=False</code>.</p> <p>This form facilitates editing multiple objects in bulk. Unlike a model form, this form does not have a child <code>Meta</code> class, and must explicitly define each field. All fields in a bulk edit form are generally declared with <code>required=False</code>.</p> Atributo Descri\u00e7\u00e3o <code>model</code> O medelo do objeto sendo editado <code>fieldsets</code> Uma tupla de tuplas duplas definindo o layout do formul\u00e1rio (opcional) <code>nullable_fields</code> Uma tupla de campos que podem ser anulados (definidos como <code>empty</code>) usando a edi\u00e7\u00e3o de formul\u00e1rios em grupo (opcional) <p>Exemplo</p> <pre><code>from django import forms\nfrom dcim.models import Site\nfrom netbox.forms import NetBoxModelImportForm\nfrom utilities.forms import CommentField, DynamicModelChoiceField\nfrom .models import MyModel, MyModelStatusChoices\n\n\nclass MyModelEditForm(NetBoxModelImportForm):\n    name = forms.CharField(\n        required=False\n    )\n    status = forms.ChoiceField(\n        choices=MyModelStatusChoices,\n        required=False\n    )\n    site = DynamicModelChoiceField(\n        queryset=Site.objects.all(),\n        required=False\n    )\n    comments = CommentField()\n\n    model = MyModel\n    fieldsets = (\n        ('Model Stuff', ('name', 'status', 'site')),\n    )\n    nullable_fields = ('site', 'comments')\n</code></pre>"},{"location":"plugins/development/forms/#netboxmodelfiltersetform","title":"<code>NetBoxModelFilterSetForm</code>","text":"<p>A classe do formul\u00e1rio \u00e9 utilizada para renderizar o formul\u00e1rio para expressamente filtrar a lista de objetos. Os campos devem corresponder aos filtros definidos no grupo de filtros do modelo.</p> Atributo Descri\u00e7\u00e3o <code>model</code> O modelo do objeto sendo editado <code>fieldsets</code> Uma tupla de tuplas dupla definindo o layout do formul\u00e1rio (opcional) <p>Exemplo</p> <pre><code>from dcim.models import Site\nfrom netbox.forms import NetBoxModelFilterSetForm\nfrom utilities.forms import DynamicModelMultipleChoiceField, MultipleChoiceField\nfrom .models import MyModel, MyModelStatusChoices\n\nclass MyModelFilterForm(NetBoxModelFilterSetForm):\n    site_id = DynamicModelMultipleChoiceField(\n        queryset=Site.objects.all(),\n        required=False\n    )\n    status = MultipleChoiceField(\n        choices=MyModelStatusChoices,\n        required=False\n    )\n\n    model = MyModel\n</code></pre>"},{"location":"plugins/development/forms/#campos-com-propositos-gerais","title":"Campos com Pr\u00f3positos Gerais","text":"<p>Em adi\u00e7\u00e3o ao campos de formul\u00e1rio definidos pelo Django, o NetBox fornece diferentes classes de campos para uso dentro do formul\u00e1rio para lidar com tipos de dados espec\u00edficos. Eles podem ser importados de <code>utilities.forms.fields</code> e s\u00e3o documentados abaixo.</p> <p>::: utilities.forms.ColorField     options:       members: false</p> <p>::: utilities.forms.CommentField     options:       members: false</p> <p>::: utilities.forms.JSONField     options:       members: false</p> <p>::: utilities.forms.MACAddressField     options:       members: false</p> <p>::: utilities.forms.SlugField     options:       members: false</p>"},{"location":"plugins/development/forms/#campos-de-escolha-choice-field","title":"Campos de Escolha (Choice Field)","text":"<p>::: utilities.forms.ChoiceField     options:       members: false</p> <p>::: utilities.forms.MultipleChoiceField     options:       members: false</p>"},{"location":"plugins/development/forms/#campos-dinamicos-de-um-objeto","title":"Campos Din\u00e2micos de um Objeto","text":"<p>::: utilities.forms.DynamicModelChoiceField     options:       members: false</p> <p>::: utilities.forms.DynamicModelMultipleChoiceField     options:       members: false</p>"},{"location":"plugins/development/forms/#tipos-de-campos-de-conteudo","title":"Tipos de Campos de Conte\u00fado","text":"<p>::: utilities.forms.ContentTypeChoiceField     options:       members: false</p> <p>::: utilities.forms.ContentTypeMultipleChoiceField     options:       members: false</p>"},{"location":"plugins/development/forms/#campos-de-importacao-de-csv","title":"Campos de Importa\u00e7\u00e3o de CSV","text":"<p>::: utilities.forms.CSVChoiceField     options:       members: false</p> <p>::: utilities.forms.CSVMultipleChoiceField     options:       members: false</p> <p>::: utilities.forms.CSVModelChoiceField     options:       members: false</p> <p>::: utilities.forms.CSVContentTypeField     options:       members: false</p> <p>::: utilities.forms.CSVMultipleContentTypeField     options:       members: false</p>"},{"location":"plugins/development/graphql-api/","title":"GraphQL API","text":""},{"location":"plugins/development/graphql-api/#definindo-o-esquema-da-classe-schema-class","title":"Definindo o Esquema da Classe (Schema Class)","text":"<p>Um plugin pode extender a API do GraphQL do NetBox registrando sua pr\u00f3pria classe de esquema (schema class). Por padr\u00e3o, NetBox ir\u00e1 tentar importar o <code>graphql.schena</code> do plugin, se existir. O caminho pode ser sobreposto definindo o <code>graphql_schema</code> na inst\u00e2ncia de PluginConfig como uma caminho pontilhado (dotted path) para a classe desejada do Python. Essa classe deve ser uma subclasse de <code>graphene.ObjectType</code>. A plugin can extend NetBox's GraphQL API by registering its own schema class. By default, NetBox will attempt to import <code>graphql.schema</code> from the plugin, if it exists. This path can be overridden by defining <code>graphql_schema</code> on the PluginConfig instance as the dotted path to the desired Python class. This class must be a subclass of <code>graphene.ObjectType</code>.</p>"},{"location":"plugins/development/graphql-api/#exemplo","title":"Exemplo","text":"<pre><code># graphql.py\nimport graphene\nfrom netbox.graphql.types import NetBoxObjectType\nfrom netbox.graphql.fields import ObjectField, ObjectListField\nfrom . import filtersets, models\n\nclass MyModelType(NetBoxObjectType):\n\n    class Meta:\n        model = models.MyModel\n        fields = '__all__'\n        filterset_class = filtersets.MyModelFilterSet\n\nclass MyQuery(graphene.ObjectType):\n    mymodel = ObjectField(MyModelType)\n    mymodel_list = ObjectListField(MyModelType)\n\nschema = MyQuery\n</code></pre>"},{"location":"plugins/development/graphql-api/#objetos-graphql","title":"Objetos GraphQL","text":"<p>O NetBox fornece dois tipos de classes de objeto para serem utilizadas pelos plugins:</p> <p>::: netbox.graphql.types.BaseObjectType     options:       members: false</p> <p>::: netbox.graphql.types.NetBoxObjectType     options:       members: false</p>"},{"location":"plugins/development/graphql-api/#campos-graphql","title":"Campos GraphQL","text":"<p>O NetBox fornece duas classes de campos para serem utilizadas pelos plugins:</p> <p>::: netbox.graphql.fields.ObjectField     options:       members: false</p> <p>::: netbox.graphql.fields.ObjectListField     options:       members: false</p>"},{"location":"plugins/development/models/","title":"Modelos da Banco de Dados","text":""},{"location":"plugins/development/models/#criando-modelos-models","title":"Criando Modelos (Models)","text":"<p>Se o seu plugin for introduzir um novo tipo de objet ono NetBox, voc\u00ea prov\u00e1vel vai querer criar um modelo Django para isso. Um modelo \u00e9 essencialmente a representa\u00e7\u00e3o de uma tabela do banco de dados, com atributos que representam colunas individuais. Inst\u00e2ncias do modelo (objetos) podem ser criados, manipulados e deletados utilizando queries. Modelos devem ser definidos dentro do arquivo chamado de <code>models.py</code>.</p> <p>Abaxo est\u00e1 um exemplo do arquivo <code>models.py</code> contendo o modelo com dois campos de texto (caracteres):</p> <pre><code>from django.db import models\n\nclass MyModel(models.Model):\n    foo = models.CharField(max_length=50)\n    bar = models.CharField(max_length=50)\n\n    def __str__(self):\n        return f'{self.foo} {self.bar}'\n</code></pre> <p>Todo modelo inclui por padr\u00e3o uma chave prim\u00e1ria num\u00e9rica (primary key). Esse valor \u00e9 gerado automaticamente pelo banco de dados, e pode ser referenciado como <code>pk</code> ou <code>id</code>.</p>"},{"location":"plugins/development/models/#habilitando-as-funcoes-do-netbox","title":"Habilitando as Fun\u00e7\u00f5es do NetBox","text":"<p>Os podemos do plugin podem fazer utilizar certas caracter\u00edsticas e fun\u00e7\u00f5es do NetBox ao herdar a classe <code>NetBoxModel</code> do NetBox. Essa classe extende o modelo do plugin para habilitar essas caracter\u00edsticas \u00fanicas ao NetBox, incluindo:</p> <ul> <li>Registro de Log (Change Logging)</li> <li>Campos Customizados</li> <li>Links Customizados</li> <li>Valida\u00e7\u00e3o Customizada</li> <li>Exporta\u00e7\u00e3o de Templates</li> <li>Journaling</li> <li>Tags</li> <li>Webhooks</li> </ul> <p>Essa classe performa duas fun\u00e7\u00f5es cruciais:</p> <ol> <li>Aplica qualquer campo, m\u00e9todo e/ou atributos necess\u00e1rios para a opera\u00e7\u00e3o destas fun\u00e7\u00f5es e caracter\u00edsticas.</li> <li>Registra o modelo no NetBox para utilizar essas fun\u00e7\u00f5es e caracter\u00edsticas.</li> </ol> <p>Simplesmente crie uma subclasse do <code>NetBoxModel</code> quando for definir um modelo dentro do seu plugin:</p> <pre><code># models.py\nfrom django.db import models\nfrom netbox.models import NetBoxModel\n\nclass MyModel(NetBoxModel):\n    foo = models.CharField()\n    ...\n</code></pre>"},{"location":"plugins/development/models/#propriedades-do-netboxmodel","title":"Propriedades do NetBoxModel","text":""},{"location":"plugins/development/models/#docs_url","title":"<code>docs_url</code>","text":"<p>Esse atributo especifica a URL pela a qual a documenta\u00e7\u00e3o deste modelo pode ser alcan\u00e7ada. Por padr\u00e3o, ela retornar\u00e1 <code>/static/docs/models/&lt;app_label&gt;/&lt;model_name&gt;/</code>. Modelos de Plugin podem sobrepor isso com uma URL customizada. Por exemplo, voc\u00ea pode querer direcionar o usu\u00e1rio para a sua pr\u00f3pria documenta\u00e7\u00e3o hospedada em ReadTheDocs.</p>"},{"location":"plugins/development/models/#habilitando-as-funcoes-e-caracteristicas-individualmente","title":"Habilitando as Fun\u00e7\u00f5es e Caracter\u00edsticas Individualmente","text":"<p>Se voc\u00ea preferir, ao inv\u00e9s, habilitar somente um subgrupo dessas caracter\u00edsticas do modelo do plugim o NetBox fornece uma classe \"mix-in\" para cada caracter\u00edstica. Voc\u00ea pode criar uma subclasse de cada uma individualmente ao definir um modelo. (Seu modelo tamb\u00e9m precisar\u00e1 herdar a classe nativa do Django <code>Model</code>.)</p> <p>Por exemplo, se voc\u00ea quiser suportar somente tags e templates de exporta\u00e7\u00e3o, n\u00f3s herdamos as classes <code>ExportTemplateMixin</code> e <code>TagsMixin</code>, e classe <code>Model</code> do Django. (Herdar todas os mixins \u00e9 mesma coisa que criar uma subclasse de <code>NetBoxModel</code>.)</p> <pre><code># models.py\nfrom django.db import models\nfrom netbox.models.features import ExportTemplatesMixin, TagsMixin\n\nclass MyModel(ExportTemplatesMixin, TagsMixin, models.Model):\n    foo = models.CharField()\n    ...\n</code></pre>"},{"location":"plugins/development/models/#migracoes-do-banco-de-dados","title":"Migra\u00e7\u00f5es do Banco de Dados","text":"<p>Uma vez que voc\u00ea tenha completado de definir os modelos do seu plugin, voc\u00ea precisar\u00e1 criar um esquema de migra\u00e7\u00e3o do banco de dados. Um arquivo de migra\u00e7\u00e3o \u00e9 essencialmente um grupo de instru\u00e7\u00f5es para manipular o banco de dados do PostgreSQL para suportar seu novo modelo, ou altera um modelo existente. Criar migra\u00e7\u00f5es podem normalmente serem feitas automaticamente pelo comando de ger\u00eancia <code>makemigrations</code> do Django. (Certifique-se de seu plugin foi instalado e habilite-o, de outra forma, n\u00e3o ser\u00e1 encontrado.)</p> <p>Note</p> <p>O NetBox for\u00e7a uma medidade seguran\u00e7a sobre o comando <code>makemigrations</code> para proteger que os usu\u00e1rios regulares (normais) criem um esquema de migra\u00e7\u00e3o errado. Para habilitar esse comando no desenvolvimento de plugins, configure <code>DEVELOPER=True</code> no arquivo do NetBox <code>configuration.py</code>.</p> <pre><code>$ ./manage.py makemigrations my_plugin \nMigrations for 'my_plugin':\n  /home/jstretch/animal_sounds/my_plugin/migrations/0001_initial.py\n    - Create model MyModel\n</code></pre> <p>Agora, n\u00f3s podemos aplica\u00e7\u00e3o a mgira\u00e7\u00e3o do banco de dados com o comando <code>migrate</code>:</p> <pre><code>$ ./manage.py migrate my_plugin\nOperations to perform:\n  Apply all migrations: my_plugin\nRunning migrations:\n  Applying my_plugin.0001_initial... OK\n</code></pre> <p>Para mais informa\u00e7\u00f5es sobre a migra\u00e7\u00e3o do banco de dados, veja a documenta\u00e7\u00e3o do Django.</p>"},{"location":"plugins/development/models/#referencia-das-funcoes-dos-mixins","title":"Refer\u00eancia das Fun\u00e7\u00f5es dos Mixins","text":"<p>Warning</p> <p>Note que somente a classe que aparece na documenta\u00e7\u00e3o que \u00e9 suportada. Embora outras classes possam estar presentes dentro do m\u00f3dulo <code>features</code>, eles n\u00e3o s\u00e3o suportados para uso dos plugins.</p> <p>::: netbox.models.features.ChangeLoggingMixin</p> <p>::: netbox.models.features.CloningMixin</p> <p>::: netbox.models.features.CustomLinksMixin</p> <p>::: netbox.models.features.CustomFieldsMixin</p> <p>::: netbox.models.features.CustomValidationMixin</p> <p>::: netbox.models.features.ExportTemplatesMixin</p> <p>::: netbox.models.features.JournalingMixin</p> <p>::: netbox.models.features.TagsMixin</p> <p>::: netbox.models.features.WebhooksMixin</p>"},{"location":"plugins/development/models/#grupos-de-escolha-choice-sets","title":"Grupos de Escolha (Choice Sets)","text":"<p>Para que cada campo do modelo de se\u00e7\u00e3o suporte um ou mais valores com uma lista de escolhas pr\u00e9-definidas, NetBox fornece a classe de utilidades <code>ChoiceSet</code>. Pode ser usado no lugar de um tuple de escolhas regular para fornecer funcionalidades melhoradas, como configura\u00e7\u00e3o din\u00e2mica e colora\u00e7\u00e3o. (Veja a documenta\u00e7\u00e3o do Django sobre o par\u00e2metro <code>choices</code> para os campos de modelo suportados.)</p> <p>To define choices for a model field, subclass <code>ChoiceSet</code> and define a tuple named <code>CHOICES</code>, of which each member is a two- or three-element tuple. These elements are: Para definir as escolhas de um campo do modelo, crie uma subclasse de <code>ChoiceSet</code> e defina uma tuple com o nome de <code>CHOICES</code>, na qual cada membro \u00e9 uma tupla de dois ou tr\u00eas elementos. Esses elementos s\u00e3o:</p> <ul> <li>O valor do banco de dados</li> <li>Uma tag (label) correspondente para ser lida por humanos</li> <li>Uma cor associada (opcional)</li> </ul> <p>Um exemplo completo \u00e9 fornecido abaixo.</p> <p>Note</p> <p>Autores podem achar \u00fatil declarar cada um dos valores do banco de dados como uma constante dentro da classe e referenci\u00e1-las dentro dos membros de <code>CHOICES</code>. Essa conven\u00e7\u00e3o permite que os valores sejam referenciados fora da classe, no entanto n\u00e3o \u00e9 estritamente obrigat\u00f3rio.</p>"},{"location":"plugins/development/models/#configuracao-dinamica","title":"Configura\u00e7\u00e3o Din\u00e2mica","text":"<p>Algumas escolhas de campos do mudelo podem ser configurados pelo administrador. Por exemplo, os valores padr\u00f5es do campo do modelo do Site <code>status</code> pode ser substitu\u00eddo ou suplementado com escolhas customizadas. Para habilitar a configura\u00e7\u00e3o din\u00e2mica para a subclasse de um ChoiceSet, defina a <code>key</code> como um texto (string) especificando o modelo e o nome do campo ao qual se aplica. Por exemplo:</p> <pre><code>from utilities.choices import ChoiceSet\n\nclass StatusChoices(ChoiceSet):\n    key = 'MyModel.status'\n</code></pre> <p>Para extender ou substituir os valores padr\u00f5es para o grupo de escolhas, o administrador do NetBox pode referenci\u00e1-lo no par\u00e2metro de configura\u00e7\u00e3o em <code>FIELD_CHOICES</code>. Por exemplo, o campo de <code>status</code> no <code>MyModel</code> dentro de <code>my_plugin</code> iria ser referenciado como:</p> <pre><code>FIELD_CHOICES = {\n    'my_plugin.MyModel.status': (\n        # Escolhas customizadas\n    )\n}\n</code></pre>"},{"location":"plugins/development/models/#exemplo","title":"Exemplo","text":"<pre><code># choices.py\nfrom utilities.choices import ChoiceSet\n\nclass StatusChoices(ChoiceSet):\n    key = 'MyModel.status'\n\n    STATUS_FOO = 'foo'\n    STATUS_BAR = 'bar'\n    STATUS_BAZ = 'baz'\n\n    CHOICES = [\n        (STATUS_FOO, 'Foo', 'red'),\n        (STATUS_BAR, 'Bar', 'green'),\n        (STATUS_BAZ, 'Baz', 'blue'),\n    ]\n</code></pre> <p>Warning</p> <p>Para configura\u00e7\u00e3o din\u00e2mica funcionar corretamente, <code>CHOICES</code> devem ser uma lista mut\u00e1veis, no lugar de uma tuple.</p> <pre><code># models.py\nfrom django.db import models\nfrom .choices import StatusChoices\n\nclass MyModel(models.Model):\n    status = models.CharField(\n        max_length=50,\n        choices=StatusChoices,\n        default=StatusChoices.STATUS_FOO\n    )\n</code></pre>"},{"location":"plugins/development/navigation/","title":"Navigation","text":""},{"location":"plugins/development/navigation/#menus","title":"Menus","text":"<p>Note</p> <p>This feature was introduced in NetBox v3.4.</p> <p>A plugin can register its own submenu as part of NetBox's navigation menu. This is done by defining a variable named <code>menu</code> in <code>navigation.py</code>, pointing to an instance of the <code>PluginMenu</code> class. Each menu must define a label and grouped menu items (discussed below), and may optionally specify an icon. An example is shown below.</p> navigation.py<pre><code>from extras.plugins import PluginMenu\n\nmenu = PluginMenu(\n    label='My Plugin',\n    groups=(\n        ('Foo', (item1, item2, item3)),\n        ('Bar', (item4, item5)),\n    ),\n    icon_class='mdi mdi-router'\n)\n</code></pre> <p>Note that each group is a two-tuple containing a label and an iterable of menu items. The group's label serves as the section header within the submenu. A group label is required even if you have only one group of items.</p> <p>Tip</p> <p>The path to the menu class can be modified by setting <code>menu</code> in the PluginConfig instance.</p> <p>A <code>PluginMenu</code> has the following attributes:</p> Attribute Required Description <code>label</code> Yes The text displayed as the menu heading <code>groups</code> Yes An iterable of named groups containing menu items <code>icon_class</code> - The CSS name of the icon to use for the heading <p>Tip</p> <p>Supported icons can be found at Material Design Icons</p>"},{"location":"plugins/development/navigation/#the-default-menu","title":"The Default Menu","text":"<p>If your plugin has only a small number of menu items, it may be desirable to use NetBox's shared \"Plugins\" menu rather than creating your own. To do this, simply declare <code>menu_items</code> as a list of <code>PluginMenuItems</code> in <code>navigation.py</code>. The listed items will appear under a heading bearing the name of your plugin in the \"Plugins\" submenu.</p> navigation.py<pre><code>menu_items = (item1, item2, item3)\n</code></pre> <p>Tip</p> <p>The path to the menu items list can be modified by setting <code>menu_items</code> in the PluginConfig instance.</p>"},{"location":"plugins/development/navigation/#menu-items","title":"Menu Items","text":"<p>Each menu item represents a link and (optionally) a set of buttons comprising one entry in NetBox's navigation menu. Menu items are defined as PluginMenuItem instances. An example is shown below.</p> navigation.py<pre><code>from extras.plugins import PluginMenuButton, PluginMenuItem\nfrom utilities.choices import ButtonColorChoices\n\nitem1 = PluginMenuItem(\n    link='plugins:myplugin:myview',\n    link_text='Some text',\n    buttons=(\n        PluginMenuButton('home', 'Button A', 'fa fa-info', ButtonColorChoices.BLUE),\n        PluginMenuButton('home', 'Button B', 'fa fa-warning', ButtonColorChoices.GREEN),\n    )\n)\n</code></pre> <p>A <code>PluginMenuItem</code> has the following attributes:</p> Attribute Required Description <code>link</code> Yes Name of the URL path to which this menu item links <code>link_text</code> Yes The text presented to the user <code>permissions</code> - A list of permissions required to display this link <code>buttons</code> - An iterable of PluginMenuButton instances to include"},{"location":"plugins/development/navigation/#menu-buttons","title":"Menu Buttons","text":"<p>Each menu item can include a set of buttons. These can be handy for providing shortcuts related to the menu item. For instance, most items in NetBox's navigation menu include buttons to create and import new objects.</p> <p>A <code>PluginMenuButton</code> has the following attributes:</p> Attribute Required Description <code>link</code> Yes Name of the URL path to which this button links <code>title</code> Yes The tooltip text (displayed when the mouse hovers over the button) <code>icon_class</code> Yes Button icon CSS class <code>color</code> - One of the choices provided by <code>ButtonColorChoices</code> <code>permissions</code> - A list of permissions required to display this button <p>Any buttons associated within a menu item will be shown only if the user has permission to view the link, regardless of what permissions are set on the buttons.</p> <p>Tip</p> <p>Supported icons can be found at Material Design Icons</p>"},{"location":"plugins/development/rest-api/","title":"REST API","text":"<p>Os plugins podem declarar endpoints customizados da API REST do NetBox para obter e manipular modelos ou outros dados. Esse com compartamento \u00e9 bem similar \u00e0s visualiza\u00e7\u00f5es (views), exceto que ao inv\u00e9s de renderizar um conte\u00fado arbitr\u00e1rio usando um template, os dados s\u00e3o retornados no formato JSON utilizando um serializador (serializer).</p> <p>Falando de forma geral, n\u00e3o h\u00e1 muitos componentes espec\u00edficos do NetBox para impletar a funcionalidade de API REST e mum Plugin. O NetBox utiliza o Django REST Framework (DRF) para sua API REST, enquanto que os autores de plugin podem replicar facilmente os padr\u00f5es encontrados na implementa\u00e7\u00e3o do NetBox. Alguns breves exemplos s\u00e3o inclu\u00eddos abaixo para refer\u00eancia.</p>"},{"location":"plugins/development/rest-api/#layout-do-codigo","title":"Layout do C\u00f3digo","text":"<p>A abordagem recomendada \u00e9 separar a API dos serializadores (serializers), visualiza\u00e7\u00f5es (views), e URLs em m\u00f3dulos separados sobre o diret\u00f3rio <code>/api</code> para manter as coisas limpas, particularmente para projetos maiores. O arquivo <code>api/__init__.py</code> pode importar componentes relevantes de cada subm\u00f3dulo para permitir todos os componentes doa API diretamente de qualquer lugar. No entanto, isso \u00e9 meramente uma conve\u00e7\u00e3o e n\u00e3o \u00e9 estritamente obrigat\u00f3ria.</p> <pre><code>project-name/\n  - plugin_name/\n    - api/\n      - __init__.py\n      - serializers.py\n      - urls.py\n      - views.py\n    ...\n</code></pre>"},{"location":"plugins/development/rest-api/#serializador-serializers","title":"Serializador (Serializers)","text":""},{"location":"plugins/development/rest-api/#serializadores-de-modelos-model-serializers","title":"Serializadores de Modelos (Model Serializers)","text":"<p>Serializadores s\u00e3o respons\u00e1veis por converter objetos Python em dados JSON de forma conveniente aos consumidores (usu\u00e1rios) e vice-versa. O NetBox fornece a classe <code>NetBoxModelSerializer</code> para ser utilizada pelo plugin para lidar com a associa\u00e7\u00e3o de tags e dados de campos customizados. (As caracter\u00edsticas e fun\u00e7\u00f5es dispon\u00edveis podem ser inclusas da mesma forma nas classes <code>CustomFieldModelSerializer</code> e <code>TaggableModelSerializer</code>.)</p>"},{"location":"plugins/development/rest-api/#exemplo","title":"Exemplo","text":"<p>Para criar um serializador (serializer) para o modelo do plugin, fa\u00e7a uma subclasse do <code>NetBoxModelSerializer</code> em <code>api/serializer.py</code>. Especifique a classe do modelo e os campos a serem inclusos dentro da classe de serializador <code>Meta</code>. \u00c9 geralmente indicado a incluir o atributo <code>url</code> em cada serializador. Ir\u00e1 renderizar o link diretamente para acessar o objeto sendo renderizado.</p> <pre><code># api/serializers.py\nfrom rest_framework import serializers\nfrom netbox.api.serializers import NetBoxModelSerializer\nfrom my_plugin.models import MyModel\n\nclass MyModelSerializer(NetBoxModelSerializer):\n    url = serializers.HyperlinkedIdentityField(\n        view_name='plugins-api:myplugin-api:mymodel-detail'\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('id', 'foo', 'bar', 'baz')\n</code></pre>"},{"location":"plugins/development/rest-api/#serializadores-aninhados-nested-serializer","title":"Serializadores Aninhados (Nested Serializer)","text":"<p>H\u00e1 dois casos que torna-se geralmente desejado mostrar apenas uma m\u00ednima representa\u00e7\u00e3o do objeto:</p> <ol> <li>Ao mostrar um objeto relacionado ao que est\u00e1 sendo visto (por exemplo, a regi\u00e3o que o site est\u00e1 associado)</li> <li>Ao listar v\u00e1rios objetos utilizando o modo \"brief\" (resumido)</li> </ol> <p>Para acomod\u00e1-los, \u00e9 recomendado criar um serializador aninhado acompanhado do serializador completo de cada modelo. O NetBox fornece a classe <code>WritableNestedSerializer</code> para somente esse prop\u00f3sito. Essa classe aceita o valor de primary key na escrita, mas mostra a representa\u00e7\u00e3o do objeto para ser lido pelas requisi\u00e7\u00f5es. Inclui tamb\u00e9m uma tributo de leitura chamado <code>display</code> que expressa a representa\u00e7\u00e3o do objeto.</p>"},{"location":"plugins/development/rest-api/#exemplo_1","title":"Exemplo","text":"<pre><code># api/serializers.py\nfrom rest_framework import serializers\nfrom netbox.api.serializers import WritableNestedSerializer\nfrom my_plugin.models import MyModel\n\nclass NestedMyModelSerializer(WritableNestedSerializer):\n    url = serializers.HyperlinkedIdentityField(\n        view_name='plugins-api:myplugin-api:mymodel-detail'\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('id', 'display', 'foo')\n</code></pre>"},{"location":"plugins/development/rest-api/#viewsets-grupos-de-visualizacoes","title":"Viewsets (Grupos de Visualiza\u00e7\u00f5es)","text":"<p>Como \u00e9 na interface do usu\u00e1rio, a visualiza\u00e7\u00e3o de uma API REST lida com a l\u00f3gica de mostrar e interagir com os objetos NetBox. O NetBox fornece a classe <code>NetBoxModelViewSet</code> que extende a classe <code>ModelViewSet</code> nativa da DRF para lidar com opera\u00e7\u00f5es em grupo (bulk) e valida\u00e7\u00e3o de objeto.</p> <p>Diferente da interface do usu\u00e1rio, normalmente apenas um grupo de visualiza\u00e7\u00e3o (view set) \u00e9 exigida por modelo: Essa visualiza\u00e7\u00e3o lida com todos os tipos de requisi\u00e7\u00e3o (<code>GET</code>, <code>POST</code>, <code>DELETE</code>, etc.).</p>"},{"location":"plugins/development/rest-api/#exemplo_2","title":"Exemplo","text":"<p>Para criar um grupo de visualiza\u00e7\u00e3o (viewset) para o modelo de um plugin, crie uma subclasse de <code>NetBoxModelViewSet</code> em <code>api/views.py</code> e defina os atributos <code>queryset</code> e <code>serializer_class</code>.</p> <pre><code># api/views.py\nfrom netbox.api.viewsets import ModelViewSet\nfrom my_plugin.models import MyModel\nfrom .serializers import MyModelSerializer\n\nclass MyModelViewSet(ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer\n</code></pre>"},{"location":"plugins/development/rest-api/#roteadores-routers","title":"Roteadores (Routers)","text":"<p>Roteadores mapeiam a URL com as visualiza\u00e7\u00f5es da API REST (endpoints). O NetBox n\u00e3o fornece qualquer componente customizado para isso; a classe <code>DefaultRouter</code> fornecida pelo DRF deve ser suficiente para a maioria dos casos.</p> <p>Roteadores podem ser expostas em <code>api/urls.py</code>. Esse arquivo deve definir uma vari\u00e1vel nomeada de <code>urlpatterns</code>.</p>"},{"location":"plugins/development/rest-api/#exemplo_3","title":"Exemplo","text":"<pre><code># api/urls.py\nfrom netbox.api.routers import NetBoxRouter\nfrom .views import MyModelViewSet\n\nrouter = NetBoxRouter()\nrouter.register('my-model', MyModelViewSet)\nurlpatterns = router.urls\n</code></pre> <p>Isso ir\u00e1 fazer a visualiza\u00e7\u00e3o (view) do plugin acess\u00edvel por <code>/api/plugins/my-plugin/my-model/</code>.</p> <p>Warning</p> <p>Os exemplos fornecidos aqui tem a inten\u00e7\u00e3o de servir uma refer\u00eancia m\u00ednima de implementa\u00e7\u00e3o. A documenta\u00e7\u00e3o n\u00e3o inclui autentica\u00e7\u00e3o, performance, ou uma variedade de outras preocupa\u00e7\u00f5es que o autor de um plugin pode ter que resolver.</p>"},{"location":"plugins/development/search/","title":"Pesquisa (Search)","text":"<p>Note</p> <p>Essa fun\u00e7\u00e3o foi introduzida na vers\u00e3o v3.4 do NetBox.</p> <p>Os plugins podem definir e registrar seus pr\u00f3pios modelos para extender a funcionalidade nativa de pesquisa do NetBox. Normalmente, um plugin pode incluir um arquivo chamado de <code>search.py</code> que cont\u00e9m todos os indexes de pesquisa para seus modelos (veja o exemplo abaixo).</p> <pre><code># search.py\nfrom netbox.search import SearchIndex\nfrom .models import MyModel\n\nclass MyModelIndex(SearchIndex):\n    model = MyModel\n    fields = (\n        ('name', 100),\n        ('description', 500),\n        ('comments', 5000),\n    )\n</code></pre> <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Para registrar um ou mais indexes dentro do NetBox, defina uma lista nomeada de <code>indexes</code> no final do arquivo: ======= Para registrar um ou mais indexes no NetBox, defina uma lista nomeada de <code>indexes</code> no inal do arquivo:</p> <p>10d642ea55302d0cdd3c2087600272f4406da1df</p> <pre><code>indexes = [MyModelIndex]\n</code></pre> <p>Tip</p> <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD     O caminho (path) para a lista de indexes pode ser modificada pela configura\u00e7\u00e3o <code>search_indexes</code> na inst\u00e2ncia de <code>PluginConfig</code>. =======     O caminho (path) para a lista de pesquisa de indexes pode ser modificada pela configura\u00e7\u00e3o <code>search_indexes</code> na inst\u00e2ncia de <code>PluginConfig</code>.</p> <p>10d642ea55302d0cdd3c2087600272f4406da1df</p> <p>::: netbox.search.SearchIndex</p>"},{"location":"plugins/development/staged-changes/","title":"Mudan\u00e7as Pendentes","text":"<p>Danger</p> <p>Essa caracter\u00edstica est\u00e1 sob desenvolvimento ativo e \u00e9 considerada experimental em sua natureza. Seu uso em produ\u00e7\u00e3o \u00e9 fortemente n\u00e3o recomendada neste momento.</p> <p>Note</p> <p>Essa caracter\u00edstica foi introduzida na vers\u00e3o v3.4.</p> <p>O NetBox fornece uma API program\u00e1tica para permitir a cria\u00e7\u00e3o, modifica\u00e7\u00e3o e remo\u00e7\u00e3o de objetos sem realmente salvar (fazer o commit) dessas mudan\u00e7as pro banco de dados ativo. Isso pode ser utilizado para performar um conjunto de opera\u00e7\u00f5es em grupo do tipo \"dry run\", ou preparar um grupo de mudan\u00e7as para aprova\u00e7\u00e3o administrativa, por exemplo.</p> <p>Para come\u00e7ar com mudan\u00e7as pendentes (staging changes), primeiro crie uma branch (ramo):</p> <pre><code>from extras.models import Branch\n\nbranch1 = Branch.objects.create(name='branch1')\n</code></pre> <p>Ent\u00e3o, ative a branch usando o gerenciador de contexto <code>checkout()</code> e comece suas mudan\u00e7as. Isso inicia uma nova transa\u00e7\u00e3o no banco de dados.</p> <pre><code>from extras.models import Branch\nfrom netbox.staging import checkout\n\nbranch1 = Branch.objects.get(name='branch1')\nwith checkout(branch1):\n    Site.objects.create(name='New Site', slug='new-site')\n    # ...\n</code></pre> <p>Ao sair do contexto, a transa\u00e7\u00e3o do banco de dados \u00e9 automaticamente revertida (rolled back) se suas mudan\u00e7as gravadas como staged changes s\u00e3o revertidas. Entrar novamente na branch, ir\u00e1 criar uma nova transa\u00e7\u00e3o do banco de dados e automaticamente aplicar\u00e1 qualquer mudan\u00e7a pendente associada com essa branch.</p> <p>Para aplicar as mudan\u00e7as dentro da branch, chame o m\u00e9todo da branch <code>commit()</code>:</p> <pre><code>from extras.models import Branch\n\nbranch1 = Branch.objects.get(name='branch1')\nbranch1.commit()\n</code></pre> <p>Salvar (commiting) uma branch \u00e9 uma opera\u00e7\u00e3o all-or-none (tudo ou nada): qualquer exce\u00e7\u00e3o ir\u00e1 reverter o grupo inteiro de mudan\u00e7as. Depois de salvar (realizar o commit) com sucesso de uma branch, todos os objetos <code>StagedChanges</code> ser\u00e3o automaticamente deletados (no entanto, a branch em si permanecer\u00e1 e poder\u00e1 ser reutilizada).</p>"},{"location":"plugins/development/tables/","title":"Tabelas","text":"<p>O NetBox utiliza a biblioteca <code>django-tables2</code> para renderizar tabelas de objetos din\u00e2micas. Essas tabelas mostram a lista de objetos e podem ser ordenadas e filtradas com diversos par\u00e2metros.</p>"},{"location":"plugins/development/tables/#netboxtable","title":"NetBoxTable","text":"<p>Para fornecer funcionalidades adicionais al\u00e9m do grupo de fun\u00e7\u00f5es suportads pela classe <code>Table</code> dentro de <code>django-tables2</code>. O NetBox fornece a classe <code>NetBoxTable</code>. Essa classe de tabela customizada inclui o suporte de:</p> <ul> <li>Configura\u00e7\u00e3o do usu\u00e1rio para exibi\u00e7\u00e3o de coluna e ordenamento</li> <li>Colunas de campos customizados &amp; links customizados</li> <li>A pr\u00e9-obten\u00e7\u00e3o autom\u00e1tica de objetos relacionados</li> </ul> <p>Isso inclui diversas colunas padr\u00f5es diversas:</p> <ul> <li><code>pk</code> - Um checkbox para selecionar o objeto associado com cada linha de cada tabela (onde aplic\u00e1vel)</li> <li><code>id</code> - O ID n\u00famero do objeto do banco de dados, como um hyperlink (link) da visualiza\u00e7\u00e3o do objeto (escondida por padr\u00e3o)</li> <li><code>actions</code> - Um menu de dropdown apresentando a\u00e7\u00f5es espec\u00edficas do objeto dispon\u00edveis ao usu\u00e1rio</li> </ul>"},{"location":"plugins/development/tables/#exemplo","title":"Exemplo","text":"<pre><code># tables.py\nimport django_tables2 as tables\nfrom netbox.tables import NetBoxTable\nfrom .models import MyModel\n\nclass MyModelTable(NetBoxTable):\n    name = tables.Column(\n        linkify=True\n    )\n    ...\n\n    class Meta(NetBoxTable.Meta):\n        model = MyModel\n        fields = ('pk', 'id', 'name', ...)\n        default_columns = ('pk', 'name', ...)\n</code></pre>"},{"location":"plugins/development/tables/#configuracao-da-tabela","title":"Configura\u00e7\u00e3o da Tabela","text":"<p>A classe <code>NetBoxTabel</code> oferece fun\u00e7\u00f5es din\u00e2micas de configura\u00e7\u00e3o para permitir que os usu\u00e1rios mudem a exibi\u00e7\u00e3o de suas colunas ao ordenas as prefer\u00eancias. Para configurar uma tabela para requisi\u00e7\u00f5es espec\u00edficas, simplesmente chame o m\u00e9todo <code>configure()</code> e passe o objeto corrente <code>HTTPRequest</code>. Por exemplo:</p> <pre><code>table = MyModelTable(data=MyModel.objects.all())\ntable.configure(request)\n</code></pre> <p>Automaticamente ser\u00e1 aplicadas prefer\u00eancias especificadas pelo usu\u00e1rio para a tabela. (Se estiver utilizando uma visualiza\u00e7\u00e3o gen\u00e9rica (generic view) fornecida pelo NetBox, configura\u00e7\u00e3o da tabela \u00e9 automaticamente provisionada.)</p>"},{"location":"plugins/development/tables/#colunas","title":"Colunas","text":"<p>As classes da coluna listadas abaixo s\u00e3o suportadas para serem utilizadas pelos plugins. Essas classes podem ser importadas de <code>netbox.tables.columns</code>.</p> <p>::: netbox.tables.BooleanColumn     options:       members: false</p> <p>::: netbox.tables.ChoiceFieldColumn     options:       members: false</p> <p>::: netbox.tables.ColorColumn     options:       members: false</p> <p>::: netbox.tables.ColoredLabelColumn     options:       members: false</p> <p>::: netbox.tables.ContentTypeColumn     options:       members: false</p> <p>::: netbox.tables.ContentTypesColumn     options:       members: false</p> <p>::: netbox.tables.MarkdownColumn     options:       members: false</p> <p>::: netbox.tables.TagColumn     options:       members: false</p> <p>::: netbox.tables.TemplateColumn     options:       members:         - init</p>"},{"location":"plugins/development/templates/","title":"Templates","text":"<p>Templates s\u00e3o utilizados para renderizar o conte\u00fado HTML gerados pelo grupo de dados de contexto. O NetBox fornece um grupo de templates nativos para ser utilizados pelas visualiza\u00e7\u00f5es (views) do plugin. Os autores de plugins podem extender esses templates para minimar o trabalho necess\u00e1rio para criar templates customizados enquanto que garante que o conte\u00fado produzido pelo plugin esteja de acordo com o layout e estilo do NetBox. Esses templates s\u00e3o escritos em Django Template Language (DTL).</p>"},{"location":"plugins/development/templates/#template-file-structure-estrutura-de-arquivos-do-template","title":"Template File Structure Estrutura de Arquivos do Template","text":"<p>Os templates do plugin devem estar dentro do caminho do arquivo <code>templates/&lt;plugin-name&gt;</code> dentro do root do plugin. Por exemplo, se o nome do seu plugin <code>my_plugin</code> e cria um template nomeado de <code>foo.html</code>, deve ser salvo como <code>templates/my_plugin/foo.html</code>. (Voc\u00ea com certeza pode utilizar sub diret\u00f3rios abaixo desse ponto tamb\u00e9m). Isso garante que a engine de template possa localizar o template para renderiza\u00e7\u00e3o.</p>"},{"location":"plugins/development/templates/#blocos-padroes-standard-blocks","title":"Blocos Padr\u00f5es (Standard Blocks)","text":"<p>Os blocos de templates abaixo est\u00e3o dispon\u00edveis em todos os templates.</p> Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>title</code> Sim T\u00edtulo da p\u00e1gina <code>content</code> Sim Conte\u00fado da p\u00e1giina <code>head</code> - Conte\u00fado para incluir o elemento <code>&lt;head&gt;</code> no HTML <code>footer</code> - Conte\u00fado do rodap\u00e9 (footer) da p\u00e1gina <code>footer_links</code> - Se\u00e7\u00e3o de links do rodap\u00e9 da p\u00e1gina <code>javascript</code> - Conte\u00fado JavaScript para ser incluso no final do elemento <code>&lt;body&gt;</code> do HTML <p>Note</p> <p>Para mais informa\u00e7\u00f5es em como o blocos de templates funcionam, consulte a documenta\u00e7\u00e3o do Django.</p>"},{"location":"plugins/development/templates/#templates-base","title":"Templates Base","text":""},{"location":"plugins/development/templates/#layouthtml","title":"layout.html","text":"<p>Caminho (path): <code>base/layout.html</code></p> <p>O NetBox fornece um template base para garantir uma experi\u00eancia do usu\u00e1rio consistente, que os plugins podem extender seu pr\u00f3prio conte\u00fado. Esse template \u00e9 utilizado por um prop\u00f3sito geral que pode ser utilizado quando uma fun\u00e7\u00e3o espec\u00edfica do template abaixo s\u00e3o suportados.</p>"},{"location":"plugins/development/templates/#blocos-blocks","title":"Blocos (Blocks)","text":"Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>header</code> - Cabe\u00e7alho da P\u00e1gina <code>tabs</code> - Tabs de navega\u00e7\u00e3o horizontais <code>modals</code> - Elementos de modelo (modal) do Bootstrap 5"},{"location":"plugins/development/templates/#exemplo","title":"Exemplo","text":"<p>Um exemplo do template do plugin que extende o <code>layout.html</code> est\u00e1 incluso abaixo.</p> <pre><code>{% extends 'base/layout.html' %}\n\n{% block header %}\n  &lt;h1&gt;My Custom Header&lt;/h1&gt;\n{% endblock header %}\n\n{% block content %}\n  &lt;p&gt;{{ some_plugin_context_var }}&lt;/p&gt;\n{% endblock content %}\n</code></pre> <p>A primeira linha do template instrui o Django a extender o template base do NetBox, e as se\u00e7\u00f5es <code>block</code> injetam nosso conte\u00fado customizado dentro dos blocos <code>header</code> e <code>content</code>.</p> <p>Note</p> <p>O Django renderiza os templates com sua pr\u00f3pria linguagem customizada. Isso \u00e9 muito similar ao Jinja2, no entanto h\u00e1 distin\u00e7\u00f5es importantes as quais os autores devem estar cientes. Certifique-se de se familiarizar com a linguagem template do Django antes de tentar criar seus novos templates.</p>"},{"location":"plugins/development/templates/#templates-genericos-da-visualizacao-generic-view-templates","title":"Templates Gen\u00e9ricos da Visualiza\u00e7\u00e3o (Generic View Templates)","text":""},{"location":"plugins/development/templates/#objecthtml","title":"object.html","text":"<p>Caminho (path): <code>generic/object.html</code></p> <p>Esse template \u00e9 usado pela visualiza\u00e7\u00e3o gen\u00e9rica <code>ObjectView</code> (generic view) para exibir apenas um objeto.</p>"},{"location":"plugins/development/templates/#blocos-blocks_1","title":"Blocos (Blocks)","text":"Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>breadcrumbs</code> - Breadcumb da lista de items (elementos <code>&lt;li&gt;</code> HTML) <code>object_identifier</code> - Um indentificador \u00fanico (string) do objeto <code>extra_controls</code> - Bot\u00f5es de a\u00e7\u00f5es adicionais para serem exibidos <code>extra_tabs</code> - Tabs adicionais para serem inclusas"},{"location":"plugins/development/templates/#contexto-context","title":"Contexto (Context)","text":"Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>object</code> Sim A inst\u00e2ncia do objeto sendo visualizada"},{"location":"plugins/development/templates/#object_edithtml","title":"object_edit.html","text":"<p>Caminho (path): <code>generic/object_edit.html</code></p> <p>Esse template \u00e9 utilizado pela visualiza\u00e7\u00e3o gen\u00e9rica (generic view) para criar ou modificar um \u00fanico objeto.</p>"},{"location":"plugins/development/templates/#blocos-blocks_2","title":"Blocos (Blocks)","text":"Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>form</code> - Conte\u00fado de formul\u00e1rio customizado (dentro do elemento HTML <code>&lt;form&gt;</code>) <code>buttons</code> - Bot\u00f5es do formul\u00e1rio para submet\u00ea-lo"},{"location":"plugins/development/templates/#contexto-context_1","title":"Contexto (Context)","text":"Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>object</code> Sim A inst\u00e2ncia do objeto sendo modificada (none, se estiver criando) <code>form</code> Sim A classe do formul\u00e1rio do objeto sendo criada/modificada <code>return_url</code> Sim A URL que o usu\u00e1rio \u00e9 redirecionado depois de submeter o formul\u00e1rio"},{"location":"plugins/development/templates/#object_deletehtml","title":"object_delete.html","text":"<p>Caminho (path): <code>generic/object_delete.html</code></p> <p>Esse template \u00e9 utilizado pela visualiza\u00e7\u00e3o gen\u00e9rica (generic view) <code>ObjectDeleteView</code> para deletar um objeto \u00fanico.</p>"},{"location":"plugins/development/templates/#blocos-blocks_3","title":"Blocos (Blocks)","text":"<p>None</p>"},{"location":"plugins/development/templates/#contexto-context_2","title":"Contexto (Context)","text":"Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>object</code> Sim A inst\u00e2ncia do objeto sendo deletada <code>form</code> Sim A classe do formul\u00e1rio confirmando a remo\u00e7\u00e3o do objeto <code>return_url</code> Sim A URL que o usu\u00e1rio est\u00e1 sendo redirecionado depois de submeter o formul\u00e1rio"},{"location":"plugins/development/templates/#object_listhtml","title":"object_list.html","text":"<p>Caminho (path): <code>generic/object_list.html</code></p> <p>O template sendo utilizado pela visualiza\u00e7\u00e3o gen\u00e9rica <code>ObjetListView</code> para ser exibida em uma lista filtr\u00e1vel de objetos m\u00faltiplos.</p>"},{"location":"plugins/development/templates/#blocos-blocks_4","title":"Blocos (Blocks)","text":"Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>extra_controls</code> - Bot\u00f5es de a\u00e7\u00f5es adicionais <code>bulk_buttons</code> - Grupo de a\u00e7\u00f5es (bulk actions) de bot\u00f5es adicionais para serem exibidos  abaixo da lista de objetos"},{"location":"plugins/development/templates/#contexto-context_3","title":"Contexto (Context)","text":"Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>model</code> Sim A classe do objeto <code>table</code> Sim A classe da tabela utilizada para renderizar a lista de objetos <code>permissions</code> Sim Um mapeamento para adicionar, alterar e deletar as permiss\u00f5es do uus\u00e1rio corrente <code>actions</code> Sim Uma lista de bot\u00f5es para exibir (<code>add</code>, <code>import</code>, <code>export</code>, <code>bulk_edit</code>, e/ou <code>bulk_delete</code>) <code>filter_form</code> - O formul\u00e1rio de filterset atrelado para filtragem da lista de objetos <code>return_url</code> - A URL retornada para ser passada ao submeter um formul\u00e1rio de opera\u00e7\u00f5es em grupo (bulk operation)"},{"location":"plugins/development/templates/#bulk_importhtml","title":"bulk_import.html","text":"<p>Caminho (path): <code>generic/bulk_import.html</code></p> <p>O template utilizado pela visualiza\u00e7\u00e3o gen\u00e9rica (generic view) <code>BulkImportView</code> para importar m\u00faltiplos objetos de uma vez dos dados de um CSV.</p>"},{"location":"plugins/development/templates/#blocos-blocks_5","title":"Blocos (Blocks)","text":"<p>None</p>"},{"location":"plugins/development/templates/#contexto-context_4","title":"Contexto (Context)","text":"Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>model</code> Sim A classe do objeto <code>form</code> Sim A classe do formul\u00e1rio para importar o CSV <code>return_url</code> - A URL retornada para ser passada ao submeter uma opera\u00e7\u00e3o em grupo (bulk operation) <code>fields</code> - Um diret\u00f3rio de campos de formul\u00e1rio, para op\u00e7\u00f5es de importa\u00e7\u00e3o de exibi\u00e7\u00e3o"},{"location":"plugins/development/templates/#bulk_edithtml","title":"bulk_edit.html","text":"<p>Caminho (path): <code>generic/bulk_edit.html</code></p> <p>O template utiliado pela visualiza\u00e7\u00e3o gen\u00e9rica (generic view) <code>BulkEditView</code> para modificar m\u00faltiplos objetos simultaneamente.</p>"},{"location":"plugins/development/templates/#blocos-blocks_6","title":"Blocos (Blocks)","text":"<p>None</p>"},{"location":"plugins/development/templates/#contexto-context_5","title":"Contexto (Context)","text":"Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>model</code> Sim A classe do objeto <code>form</code> Sim Classe de formul\u00e1rio para edi\u00e7\u00e3o em grupo <code>table</code> Sim Uma classe de tabela utilizada para renderizar a lista de objetos <code>return_url</code> Sim A URL que o usu\u00e1rio \u00e9 redirecionado ao submeter um formul\u00e1rio"},{"location":"plugins/development/templates/#bulk_deletehtml","title":"bulk_delete.html","text":"<p>Caminho (path): <code>generic/bulk_delete.html</code></p> <p>O template utilizado pela visualiza\u00e7\u00e3o gen\u00e9rica (generic view) <code>BulkDeleteView</code> para deletar m\u00faltiplos objetos simultaneamente.</p>"},{"location":"plugins/development/templates/#blocos-blocks_7","title":"Blocos (Blocks)","text":"Nome Obrigat\u00f3rio Desri\u00e7\u00e3o <code>message_extra</code> - Um conte\u00fado de mensagem de aviso suplementar"},{"location":"plugins/development/templates/#contexto-context_6","title":"Contexto (Context)","text":"Nome Obrigat\u00f3rio Descri\u00e7\u00e3o <code>model</code> Yes A classe do objeto <code>form</code> Yes A classe de formul\u00e1rio para remo\u00e7\u00e3o em grupo (bulk delte) <code>table</code> Yes A classe da tabela utilizada para renderizar uma lista de objetos <code>return_url</code> Yes A URL que o usu\u00e1rio \u00e9 redireiconado ap\u00f3s submeter o formul\u00e1rio"},{"location":"plugins/development/templates/#tags","title":"Tags","text":"<p>O template customizado de tags abaixo est\u00e3o dispon\u00edveis no NetBox.</p> <p>Info</p> <p>Esses tamplates de backend s\u00e3o automaticamente carregados: Voc\u00ea n\u00e3o precisa incluir uma tag <code>{% load %}</code> no seu template para ativ\u00e1-los.</p> <p>::: utilities.templatetags.builtins.tags.badge</p> <p>::: utilities.templatetags.builtins.tags.checkmark</p> <p>::: utilities.templatetags.builtins.tags.customfield_value</p> <p>::: utilities.templatetags.builtins.tags.tag</p>"},{"location":"plugins/development/templates/#filtros-filters","title":"Filtros (Filters)","text":"<p>Os filtros de template customizado est\u00e3o dispon\u00edveis no NetBox.</p> <p>Info</p> <p>Esses templates de backend s\u00e3o automaticamente carregados: Voc\u00ea n\u00e3o precisa incluir uma tag <code>{% load %}</code> no seu template para ativ\u00e1-los.</p> <p>::: utilities.templatetags.builtins.filters.bettertitle</p> <p>::: utilities.templatetags.builtins.filters.content_type</p> <p>::: utilities.templatetags.builtins.filters.content_type_id</p> <p>::: utilities.templatetags.builtins.filters.linkify</p> <p>::: utilities.templatetags.builtins.filters.meta</p> <p>::: utilities.templatetags.builtins.filters.placeholder</p> <p>::: utilities.templatetags.builtins.filters.render_json</p> <p>::: utilities.templatetags.builtins.filters.render_markdown</p> <p>::: utilities.templatetags.builtins.filters.render_yaml</p> <p>::: utilities.templatetags.builtins.filters.split</p> <p>::: utilities.templatetags.builtins.filters.tzoffset</p>"},{"location":"plugins/development/views/","title":"Visualiza\u00e7\u00f5es (Views)","text":""},{"location":"plugins/development/views/#escrevendo-visualizacoes-views","title":"Escrevendo Visualiza\u00e7\u00f5es (Views)","text":"<p>Se o seu plugin fornece sua pr\u00f3pria p\u00e1gina dentro da interface web do NetBox, voc\u00ea precisa definir visualiza\u00e7\u00f5es (views). Uma view \u00e9 um peda\u00e7o l\u00f3gico que performa uma a\u00e7\u00e3o e/ou renderiza uma p\u00e1gina quando a requisi\u00e7\u00e3o \u00e9 feita para uma URL particular. O conte\u00fado HTML \u00e9 renderizado usando template. As visualiza\u00e7\u00f5es s\u00e3o normalmente definidas em <code>views.py</code>, e os padr\u00f5es da URl est\u00e3o em <code>urls.py</code>.</p> <p>Por exemplo, vamos escrever uma visualiza\u00e7\u00e3o (view) que exibe um animal rand\u00f4mico e o som que o mesmo faz. N\u00f3s iremos usar uma classe gen\u00e9rica do Django <code>View</code> para minimizar a quantidade de c\u00f3digo \"desnecess\u00e1rio\" para ser utilizado.</p> <pre><code>from django.shortcuts import render\nfrom django.views.generic import View\nfrom .models import Animal\n\nclass RandomAnimalView(View):\n\"\"\"\n    Mostra um animal rand\u00f4micamente selecionado.\n    \"\"\"\n    def get(self, request):\n        animal = Animal.objects.order_by('?').first()\n        return render(request, 'netbox_animal_sounds/animal.html', {\n            'animal': animal,\n        })\n</code></pre> <p>A visualiza\u00e7\u00e3o retorna uma inst\u00e2ncia rand\u00f4mica de <code>Animal</code> do banco de dados e passa como uma vari\u00e1vel de contexto ao renderizar um template nomeado de <code>animal.html</code>. As requisi\u00e7\u00f5es HTTP do tipo <code>GET</code> s\u00e3o lidadas pelo m\u00e9todo de visualiza\u00e7\u00e3o (views) <code>get()</code>, enquanto que requisi\u00e7\u00f5es <code>POST</code> s\u00e3o lidadas pelo m\u00e9todo <code>post()</code>.</p> <p>Nosso exemplo acima \u00e9 extremamente simples, mas visualiza\u00e7\u00f5es podem ser sobre qualquer coisa. Elas s\u00e3o utilizadas geralmente nos lugares onde a funcionalidade do plugin ir\u00e1 estar. Visualiza\u00e7\u00f5es n\u00e3o est\u00e3o limitadas para retornar somente conte\u00fado HTML: Uma visualiza\u00e7\u00e3o (view) pode retornar um arquivo CSV ou imagem, por exemplo. Para mais informa\u00e7\u00f5es sobre visualiza\u00e7\u00e3o, veja a documenta\u00e7\u00e3o do Django.</p>"},{"location":"plugins/development/views/#registrando-a-url","title":"Registrando a URL","text":"<p>Para fazer uma visualiza\u00e7\u00e3o acess\u00edvel aos usu\u00e1rios, n\u00f3s precisamos registrar uma URL para isso. N\u00f3s fazemos isso em <code>urls.py</code> ao definir uma vari\u00e1vel em <code>urlpatterns</code> contendo uma lista de caminhos (paths).</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('random/', views.RandomAnimalView.as_view(), name='random_animal'),\n]\n</code></pre> <p>O padr\u00e3o da URL (pattern) tem tr\u00eas componentes:</p> <ul> <li><code>route</code> - A por\u00e7\u00e3o \u00fanica da URL dedicada \u00e0 essa visualiza\u00e7\u00e3o</li> <li><code>view</code> - A visualiza\u00e7\u00e3o em si</li> <li><code>name</code> - Um breve nome utilizado para identificar o caminho (path) da URL internamente</li> </ul> <p>Isso permite que nossa visualiza\u00e7\u00e3o seja acess\u00edvel na URL <code>/plugins/animal-sounds/random/</code>. (Lembre, nossa classe <code>AnimalSoundsConfig</code> do nossa URL base do plugin \u00e9 definida para <code>animal-sounds</code>.). Visualizar a URL deve mostrar o template base do NetBox com nosso conte\u00fado customizado dentro disto.</p>"},{"location":"plugins/development/views/#classes-de-visualizacao-view-classes","title":"Classes de Visualiza\u00e7\u00e3o (View Classes)","text":"<p>O NetBox fornece uma classe de visualiza\u00e7\u00e3o gen\u00e9rica (generic view) documentada abaixa para facilitar as opera\u00e7\u00f5es comuns, como criar, visualizar, modificar e deletar objetos. Os plugins podem criar uma subclasse dessas visualiza\u00e7\u00f5es para seu pr\u00f3prio uso.</p> Classe da Visualiza\u00e7\u00e3o Descri\u00e7\u00e3o <code>ObjectView</code> Mostrar um objeto \u00fanico <code>ObjectEditView</code> Criar ou editar um objeto \u00fanico <code>ObjectDeleteView</code> Deletar um objeto \u00fanico <code>ObjectChildrenView</code> Uma lista de objetos filhos (child) dentro do contexto de um pai (parent) <code>ObjectListView</code> Visualizar uma lista de objetos <code>BulkImportView</code> Importar um grupo (set) de novos objetos <code>BulkEditView</code> Editar m\u00faltiplos objetos <code>BulkDeleteView</code> Deletar m\u00faltiplos objetos <p>Warning</p> <p>Note que somente a classe que aparece na documenta\u00e7\u00e3o \u00e9 a suportada atualmente. Embora outras classes podem estar presentes dentro do m\u00f3dulo <code>views.generic</code>, elas n\u00e3o s\u00e3o mais suportadas para serem utilizadas pelos plugins.</p>"},{"location":"plugins/development/views/#exemplo-de-uso","title":"Exemplo de Uso","text":"<pre><code># views.py\nfrom netbox.views.generic import ObjectEditView\nfrom .models import Thing\n\nclass ThingEditView(ObjectEditView):\n    queryset = Thing.objects.all()\n    template_name = 'myplugin/thing.html'\n    ...\n</code></pre>"},{"location":"plugins/development/views/#visualizacoes-do-objeto-object-views","title":"Visualiza\u00e7\u00f5es do Objeto (Object Views)","text":"<p>Abaixo est\u00e3o as defini\u00e7\u00f5es da classe para a visualiza\u00e7\u00e3o do objeto no NetBox (object view). Essas visualiza\u00e7\u00f5es lidam com as a\u00e7\u00f5es de CRUD para objetos individuais. A visualiza\u00e7\u00e3o, adi\u00e7\u00e3o/modifica\u00e7\u00e3o e remo\u00e7\u00e3o da visualiza\u00e7\u00e3o de cada visualiza\u00e7\u00e3o herda de <code>BaseObjectView</code>, que n\u00e3o tem a inte\u00e7\u00e3o de ser utilizada diretamente.</p> <p>::: netbox.views.generic.base.BaseObjectView     options:       members:         - get_queryset         - get_object         - get_extra_context</p> <p>::: netbox.views.generic.ObjectView     options:       members:         - get_template_name</p> <p>::: netbox.views.generic.ObjectEditView     options:       members:         - alter_object</p> <p>::: netbox.views.generic.ObjectDeleteView     options:       members: false</p> <p>::: netbox.views.generic.ObjectChildrenView     options:       members:         - get_children         - prep_table_data</p>"},{"location":"plugins/development/views/#visualizacoes-de-objetos-multiplos-multi-object-views","title":"Visualiza\u00e7\u00f5es de Objetos M\u00faltiplos (Multi-Object Views)","text":"<p>Abaixo est\u00e3o as defini\u00e7\u00f5es da classe de visualiza\u00e7\u00e3o de m\u00faltiplos objetos do NetBox. Essa visualiza\u00e7\u00e3o lida com a\u00e7\u00f5es simultaneamente para grupos de objetos. A lista, importa\u00e7\u00e3o, edi\u00e7\u00e3o e remo\u00e7\u00e3o de visualiza\u00e7\u00e3o herda individualmente de <code>BaseMultiObjectView</code>, que n\u00e3o tem a inte\u00e7\u00e3o de ser utilizada diretamente.</p> <p>::: netbox.views.generic.base.BaseMultiObjectView     options:       members:         - get_queryset         - get_extra_context</p> <p>::: netbox.views.generic.ObjectListView     options:       members:         - get_table         - export_table         - export_template</p> <p>::: netbox.views.generic.BulkImportView     options:       members:         - save_object</p> <p>::: netbox.views.generic.BulkEditView     options:       members: false</p> <p>::: netbox.views.generic.BulkDeleteView     options:       members:         - get_form</p>"},{"location":"plugins/development/views/#caracteristicas-das-visualizacoes-views","title":"Caracter\u00edsticas das Visualiza\u00e7\u00f5es (Views)","text":"<p>Essas visualiza\u00e7\u00f5es s\u00e3o fornecidades para habilitar ou aumentar certas caracter\u00edsticas e fun\u00e7\u00f5es de modelo do NetBox, como o registro de logs e journaling. Normalmente n\u00e3o \u00e9 necess\u00e1rio ter uma subclasse: Elas podem ser utilizadas diretamente, por exemplo no caminho (path) da URL.</p> <p>::: netbox.views.generic.ObjectChangeLogView     options:       members:         - get_form</p> <p>::: netbox.views.generic.ObjectJournalView     options:       members:         - get_form</p>"},{"location":"plugins/development/views/#extendendo-as-visualizacoes-nativas","title":"Extendendo as Visualiza\u00e7\u00f5es Nativas","text":""},{"location":"plugins/development/views/#tabs-adicionais","title":"Tabs Adicionais","text":"<p>Note</p> <p>Essa caracter\u00edstica foi introduzida na vers\u00e3o v3.4 do NetBox</p> <p>Os plugins podem \"atribuit\" (attach) uma visualiza\u00e7\u00e3o customizada ao modelo nativo do NetBox ao registr\u00e1-lo com <code>register_model_view()</code>. Incluir uma tab para essa visualiza\u00e7\u00e3o dentro da interface web do NetBox, declare uma inst\u00e2ncia de <code>TabView</code> nomeada de <code>tab</code>:</p> <pre><code>from dcim.models import Site\nfrom myplugin.models import Stuff\nfrom netbox.views import generic\nfrom utilities.views import ViewTab, register_model_view\n\n@register_model_view(Site, name='myview', path='some-other-stuff')\nclass MyView(generic.ObjectView):\n    ...\n    tab = ViewTab(\n        label='Other Stuff',\n        badge=lambda obj: Stuff.objects.filter(site=obj).count(),\n        permission='myplugin.view_stuff'\n    )\n</code></pre> <p>::: utilities.views.register_model_view</p> <p>::: utilities.views.ViewTab</p>"},{"location":"plugins/development/views/#conteudo-extra-do-template","title":"Conte\u00fado Extra do Template","text":"<p>Os plugins podem injetar conte\u00fado customizado em certas \u00e1reas a visualiza\u00e7\u00e3o nativa do NetBox. Ela pode ser realizada ao criar uma subclasse de <code>PluginTemplateExtension</code>, designando um modelo particular do NetBox e m\u00e9todos pretendidos para renderizar conte\u00fado customizado. Cinco m\u00e9todos est\u00e3o dispon\u00edveis:</p> M\u00e9todo Visualiza\u00e7\u00e3o Descri\u00e7\u00e3o <code>left_page()</code> Visualiza\u00e7\u00e3o do Objeto (Object View) Injeta conte\u00fado na parte esqueda da p\u00e1gina <code>right_page()</code> Visualiza\u00e7\u00e3o do Objeto (Object View) Injeta conte\u00fado na parte direita da p\u00e1gina <code>full_width_page()</code> Visualiza\u00e7\u00e3o do Objeto (Object View) Injeta conte\u00fado sobre a parte inferior inteira da p\u00e1gina <code>buttons()</code> Visualiza\u00e7\u00e3o do Objeto (Object View) Adiciona bot\u00f5es ao topo da p\u00e1gina <code>list_buttons()</code> Visualiza\u00e7\u00e3o da Lista (ListView  ) Adiciona bot\u00f5es ao topo da p\u00e1gina <p>Adicionalmente, um m\u00e9todo <code>render()</code> \u00e9 dispon\u00edvel para conveni\u00eancia. Esse m\u00e9todo aceita o nome de um template para ser renderizado e qualquer dados de contexto adicionais podem ser pasados. Isso tem o uso opcional, no entanto.</p> <p>Quando a <code>PluginTemplateExtension</code> \u00e9 instanciada, os dados de contexto \u00e9 atrelado \u00e0 <code>self.context</code>. Os dados dispon\u00edveis incluem:</p> <ul> <li><code>object</code> - O objeto sendo visualizado (somente a visualiza\u00e7\u00e3o de objeto)</li> <li><code>model</code> - O modelo da lista de visualiza\u00e7\u00e3o (visualiza\u00e7\u00e3o de lista somente)</li> <li><code>request</code> - TA requisi\u00e7\u00e3o corrente (atual)</li> <li><code>settings</code> - Configura\u00e7\u00f5es Globais do NetBox</li> <li><code>config</code> - Par\u00e2metros de Configura\u00e7\u00e3o espec\u00edficas do Plugin</li> </ul> <p>Por exemplo, acessar <code>{{ request.user }}</code> dentro do template ir\u00e1 retornar o usu\u00e1rio atual.</p> <p>Subclasses declaradas devem ser postas dentro de uma lista ou tuple para integra\u00e7\u00e3o co mo NetBox. Por padr\u00e3o, o NetBox procura por um iter\u00e1vel nomeado de <code>template_extensions</code> dentro do arquivo <code>template_content.py</code>. (Pode ser sobreposto pela configura\u00e7\u00e3o <code>template_extensions</code> para um valor customizado do <code>PluginConfig</code> do seu plugin.). Existe um exemplo abaixo.</p> <pre><code>from extras.plugins import PluginTemplateExtension\nfrom .models import Animal\n\nclass SiteAnimalCount(PluginTemplateExtension):\n    model = 'dcim.site'\n\n    def right_page(self):\n        return self.render('netbox_animal_sounds/inc/animal_count.html', extra_context={\n            'animal_count': Animal.objects.count(),\n        })\n\ntemplate_extensions = [SiteAnimalCount]\n</code></pre>"},{"location":"reference/conditions/","title":"Condi\u00e7\u00f5es","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>Conditions are NetBox's mechanism for evaluating whether a set data meets a prescribed set of conditions. It allows the author to convey simple logic by declaring an arbitrary number of attribute-value-operation tuples nested within a hierarchy of logical AND and OR statements.</p>"},{"location":"reference/conditions/#conditions","title":"Conditions","text":"<p>A condition is expressed as a JSON object with the following keys:</p> Key name Required Default Description attr Yes - Name of the key within the data being evaluated value Yes - The reference value to which the given data will be compared op No <code>eq</code> The logical operation to be performed negate No False Negate (invert) the result of the condition's evaluation"},{"location":"reference/conditions/#available-operations","title":"Available Operations","text":"<ul> <li><code>eq</code>: Equals</li> <li><code>gt</code>: Greater than</li> <li><code>gte</code>: Greater than or equal to</li> <li><code>lt</code>: Less than</li> <li><code>lte</code>: Less than or equal to</li> <li><code>in</code>: Is present within a list of values</li> <li><code>contains</code>: Contains the specified value</li> </ul>"},{"location":"reference/conditions/#accessing-nested-keys","title":"Accessing Nested Keys","text":"<p>To access nested keys, use dots to denote the path to the desired attribute. For example, assume the following data:</p> <pre><code>{\n\"a\": {\n\"b\": {\n\"c\": 123\n}\n}\n}\n</code></pre> <p>The following condition will evaluate as true:</p> <pre><code>{\n\"attr\": \"a.b.c\",\n\"value\": 123\n}\n</code></pre>"},{"location":"reference/conditions/#examples","title":"Examples","text":"<p><code>name</code> equals \"foo\":</p> <pre><code>{\n\"attr\": \"name\",\n\"value\": \"foo\"\n}\n</code></pre> <p><code>name</code> does not equal \"foo\"</p> <pre><code>{\n\"attr\": \"name\",\n\"value\": \"foo\",\n\"negate\": true\n}\n</code></pre> <p><code>asn</code> is greater than 65000:</p> <pre><code>{\n\"attr\": \"asn\",\n\"value\": 65000,\n\"op\": \"gt\"\n}\n</code></pre> <p><code>status</code> is not \"planned\" or \"staging\":</p> <pre><code>{\n\"attr\": \"status.value\",\n\"value\": [\"planned\", \"staging\"],\n\"op\": \"in\",\n\"negate\": true\n}\n</code></pre> <p>Evaluating static choice fields</p> <p>Pay close attention when evaluating static choice fields, such as the <code>status</code> field above. These fields typically render as a dictionary specifying both the field's raw value (<code>value</code>) and its human-friendly label (<code>label</code>). be sure to specify on which of these you want to match.</p>"},{"location":"reference/conditions/#condition-sets","title":"Condition Sets","text":"<p>Multiple conditions can be combined into nested sets using AND or OR logic. This is done by declaring a JSON object with a single key (<code>and</code> or <code>or</code>) containing a list of condition objects and/or child condition sets.</p>"},{"location":"reference/conditions/#examples_1","title":"Examples","text":"<p><code>status</code> is \"active\" and <code>primary_ip4</code> is defined or the \"exempt\" tag is applied.</p> <pre><code>{\n\"or\": [\n{\n\"and\": [\n{\n\"attr\": \"status.value\",\n\"value\": \"active\"\n},\n{\n\"attr\": \"primary_ip4\",\n\"value\": null,\n\"negate\": true\n}\n]\n},\n{\n\"attr\": \"tags\",\n\"value\": \"exempt\",\n\"op\": \"contains\"\n}\n]\n}\n</code></pre>"},{"location":"reference/filtering/","title":"Filtros na API REST","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p>"},{"location":"reference/filtering/#filtering-objects","title":"Filtering Objects","text":"<p>The objects returned by an API list endpoint can be filtered by attaching one or more query parameters to the request URL. For example, <code>GET /api/dcim/sites/?status=active</code> will return only sites with a status of \"active.\"</p> <p>Multiple parameters can be joined to further narrow results. For example, <code>GET /api/dcim/sites/?status=active&amp;region=europe</code> will return only active sites within the Europe region.</p> <p>Generally, passing multiple values for a single parameter will result in a logical OR operation. For example, <code>GET /api/dcim/sites/?region=north-america&amp;region=south-america</code> will return sites in North America or South America. However, a logical AND operation will be used in instances where a field may have multiple values, such as tags. For example, <code>GET /api/dcim/sites/?tag=foo&amp;tag=bar</code> will return only sites which have both the \"foo\" and \"bar\" tags applied.</p>"},{"location":"reference/filtering/#filtering-by-choice-field","title":"Filtering by Choice Field","text":"<p>Some models have fields which are limited to specific choices, such as the <code>status</code> field on the Prefix model. To find all available choices for this field, make an authenticated <code>OPTIONS</code> request to the model's list endpoint, and use <code>jq</code> to extract the relevant parameters:</p> <pre><code>$ curl -s -X OPTIONS \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/ | jq \".actions.POST.status.choices\"\n[\n  {\n    \"value\": \"container\",\n    \"display_name\": \"Container\"\n  },\n  {\n    \"value\": \"active\",\n    \"display_name\": \"Active\"\n  },\n  {\n    \"value\": \"reserved\",\n    \"display_name\": \"Reserved\"\n  },\n  {\n    \"value\": \"deprecated\",\n    \"display_name\": \"Deprecated\"\n  }\n]\n</code></pre> <p>Note</p> <p>The above works only if the API token used to authenticate the request has permission to make a <code>POST</code> request to this endpoint.</p>"},{"location":"reference/filtering/#filtering-by-custom-field","title":"Filtering by Custom Field","text":"<p>To filter results by a custom field value, prepend <code>cf_</code> to the custom field name. For example, the following query will return only sites where a custom field named <code>foo</code> is equal to 123:</p> <pre><code>GET /api/dcim/sites/?cf_foo=123\n</code></pre> <p>Custom fields can be mixed with built-in fields to further narrow results. When creating a custom string field, the type of filtering selected (loose versus exact) determines whether partial or full matching is used.</p>"},{"location":"reference/filtering/#lookup-expressions","title":"Lookup Expressions","text":"<p>Certain model fields also support filtering using additional lookup expressions. This allows for negation and other context-specific filtering.</p> <p>These lookup expressions can be applied by adding a suffix to the desired field's name, e.g. <code>mac_address__n</code>. In this case, the filter expression is for negation and it is separated by two underscores. Below are the lookup expressions that are supported across different field types.</p>"},{"location":"reference/filtering/#numeric-fields","title":"Numeric Fields","text":"<p>Numeric based fields (ASN, VLAN ID, etc) support these lookup expressions:</p> Filter Description <code>n</code> Not equal to <code>lt</code> Less than <code>lte</code> Less than or equal to <code>gt</code> Greater than <code>gte</code> Greater than or equal to <p>Here is an example of a numeric field lookup expression that will return all VLANs with a VLAN ID greater than 900:</p> <pre><code>GET /api/ipam/vlans/?vid__gt=900\n</code></pre>"},{"location":"reference/filtering/#string-fields","title":"String Fields","text":"<p>String based (char) fields (Name, Address, etc) support these lookup expressions:</p> Filter Description <code>n</code> Not equal to <code>ic</code> Contains (case-insensitive) <code>nic</code> Does not contain (case-insensitive) <code>isw</code> Starts with (case-insensitive) <code>nisw</code> Does not start with (case-insensitive) <code>iew</code> Ends with (case-insensitive) <code>niew</code> Does not end with (case-insensitive) <code>ie</code> Exact match (case-insensitive) <code>nie</code> Inverse exact match (case-insensitive) <code>empty</code> Is empty (boolean) <p>Here is an example of a lookup expression on a string field that will return all devices with <code>switch</code> in the name:</p> <pre><code>GET /api/dcim/devices/?name__ic=switch\n</code></pre>"},{"location":"reference/filtering/#foreign-keys-other-fields","title":"Foreign Keys &amp; Other Fields","text":"<p>Certain other fields, namely foreign key relationships support just the negation expression: <code>n</code>. Here is an example of a lookup expression on a foreign key, it would return all the VLANs that don't have a VLAN Group ID of 3203:</p> <pre><code>GET /api/ipam/vlans/?group_id__n=3203\n</code></pre>"},{"location":"reference/filtering/#ordering-objects","title":"Ordering Objects","text":"<p>To order results by a particular field, include the <code>ordering</code> query parameter. For example, order the list of sites according to their facility values:</p> <pre><code>GET /api/dcim/sites/?ordering=facility\n</code></pre> <p>To invert the ordering, prepend a hyphen to the field name:</p> <pre><code>GET /api/dcim/sites/?ordering=-facility\n</code></pre> <p>Multiple fields can be specified by separating the field names with a comma. For example:</p> <pre><code>GET /api/dcim/sites/?ordering=facility,-name\n</code></pre>"},{"location":"reference/markdown/","title":"Markdown","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>NetBox supports markdown rendering for certain text fields.</p>"},{"location":"reference/markdown/#syntax","title":"Syntax","text":"Table of Contents <p>Headers Emphasis Lists Links Images Code Blocks Tables Blockquotes Inline HTML Horizontal Rule Line Breaks </p> <p></p>"},{"location":"reference/markdown/#headers","title":"Headers","text":"<pre><code># H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n</code></pre>"},{"location":"reference/markdown/#h1","title":"H1","text":""},{"location":"reference/markdown/#h2","title":"H2","text":""},{"location":"reference/markdown/#h3","title":"H3","text":""},{"location":"reference/markdown/#h4","title":"H4","text":"H5 H6"},{"location":"reference/markdown/#emphasis","title":"Emphasis","text":"<pre><code>Emphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n</code></pre> <p>Emphasis, aka italics, with asterisks or underscores.</p> <p>Strong emphasis, aka bold, with asterisks or underscores.</p> <p>Combined emphasis with asterisks and underscores.</p> <p>Strikethrough uses two tildes. ~~Scratch this.~~</p> <p></p>"},{"location":"reference/markdown/#lists","title":"Lists","text":"<p>(In this example, leading and trailing spaces are shown with with dots: \u22c5)</p> <pre><code>1. First ordered list item\n2. Another item\n\u22c5\u22c5* Unordered sub-list. \n1. Actual numbers don't matter, just that it's a number\n\u22c5\u22c51. Ordered sub-list\n4. And another item.\n\n\u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n\u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5\n\u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5\n\u22c5\u22c5\u22c5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n</code></pre> <ol> <li>First ordered list item</li> <li>Another item</li> <li>Unordered sub-list. </li> <li>Actual numbers don't matter, just that it's a number</li> <li>Ordered sub-list</li> <li>And another item.</li> </ol> <p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).</p> <p>To have a line break without a paragraph, you will need to use two trailing spaces.    Note that this line is separate, but within the same paragraph.    (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li>Unordered list can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p></p>"},{"location":"reference/markdown/#links","title":"Links","text":"<p>There are two ways to create links.</p> <pre><code>[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links. \nhttp://www.example.com or &lt;http://www.example.com&gt; and sometimes \nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n</code></pre> <p>I'm an inline-style link</p> <p>I'm an inline-style link with title</p> <p>I'm a reference-style link</p> <p>You can use numbers for reference-style link definitions</p> <p>Or leave it empty and use the link text itself.</p> <p>URLs and URLs in angle brackets will automatically get turned into links.  http://www.example.com or http://www.example.com and sometimes  example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p></p>"},{"location":"reference/markdown/#images","title":"Images","text":"<pre><code>Here's the NetBox logo (hover to see the title text):\n\nInline-style: \n![alt text](/static/netbox_logo.png \"Logo Title Text 1\")\n\nReference-style: \n![alt text][logo]\n\n[logo]: /static/netbox_logo.png \"Logo Title Text 2\"\n</code></pre> <p>Here's the NetBox logo (hover to see the title text):</p> <p>Inline-style:  </p> <p>Reference-style:  </p> <p></p>"},{"location":"reference/markdown/#code-blocks","title":"Code blocks","text":"<pre><code>Inline `code` has `back-ticks around` it.\n</code></pre> <p>Inline <code>code</code> has <code>back-ticks around</code> it.</p> <p>Blocks of code are fenced by lines with three back-ticks <code>```</code></p> <pre><code>```\nvar s = \"Code block\";\nalert(s);\n```\n</code></pre> <pre><code>var s = \"Code block\";\nalert(s);\n</code></pre> <p></p>"},{"location":"reference/markdown/#tables","title":"Tables","text":"<pre><code>Colons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the \nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n</code></pre> <p>Colons can be used to align columns.</p> Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> Markdown Less Pretty Still <code>renders</code> nicely 1 2 3 <p></p>"},{"location":"reference/markdown/#blockquotes","title":"Blockquotes","text":"<pre><code>&gt; Blockquotes are very handy in email to emulate reply text.\n&gt; This line is part of the same quote.\n\nQuote break.\n\n&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. \n</code></pre> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> <p>Quote break.</p> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote. </p> <p></p>"},{"location":"reference/markdown/#inline-html","title":"Inline HTML","text":"<p>You can also use raw HTML in your Markdown, and it'll mostly work pretty well. </p> <pre><code>&lt;dl&gt;\n  &lt;dt&gt;Definition list&lt;/dt&gt;\n  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;\n\n  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;\n  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre> Definition list Is something people use sometimes. Markdown in HTML Does *not* work **very** well. Use HTML tags. <p></p>"},{"location":"reference/markdown/#horizontal-rule","title":"Horizontal Rule","text":"<pre><code>Three or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n</code></pre> <p>Three or more...</p> <p>Hyphens</p> <p>Asterisks</p> <p>Underscores</p> <p></p>"},{"location":"reference/markdown/#line-breaks","title":"Line Breaks","text":"<pre><code>Here's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n</code></pre> <p>Here's a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a separate paragraph.</p> <p>This line is also begins a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the same paragraph.</p> <p>Based on Markdown-Cheatsheet by adam-p licensed under CC-BY</p>"},{"location":"release-notes/","title":"Resumo (em Ingl\u00eas ainda)","text":"<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>"},{"location":"release-notes/#release-notes","title":"Release Notes","text":"<p>=======</p>"},{"location":"release-notes/#descricao-das-versoes-release-notes","title":"Descri\u00e7\u00e3o das Vers\u00f5es (Release Notes)","text":"<p>Info</p> <p>English (en): This page was not translated yet! Portuguese (pt-br): Essa p\u00e1gina n\u00e3o foi traduzida ainda!</p> <p>e06ef5523ba15ec31b7ed58bf5799b98023831bc</p> <p>NetBox releases are numbered as major, minor, and patch releases. For example, version 3.1.0 is a minor release, and v3.1.5 is a patch release. Briefly, these can be described as follows:</p> <ul> <li>Major - Introduces or removes an entire API or other core functionality</li> <li>Minor - Implements major new features but may include breaking changes for API consumers or other integrations</li> <li>Patch - A maintenance release which fixes bugs and may introduce backward-compatible enhancements</li> </ul> <p>Minor releases are published in April, August, and December of each calendar year. Patch releases are published as needed to address bugs and fulfill minor feature requests, typically around every one to two weeks.</p> <p>This page contains a history of all major and minor releases since NetBox v2.0. For more detail on a specific patch release, please see the release notes page for that specific minor release.</p>"},{"location":"release-notes/#version-34-december-2022","title":"Version 3.4 (December 2022)","text":"<ul> <li>New Global Search (#10560)</li> <li>Virtual Device Contexts (#7854)</li> <li>Saved Filters (#9623)</li> <li>JSON/YAML Bulk Imports (#4347)</li> <li>Update Existing Objects via Bulk Import (#7961)</li> <li>Scheduled Reports &amp; Scripts (#8366)</li> <li>API for Staged Changes (#10851)</li> </ul>"},{"location":"release-notes/#version-33-august-2022","title":"Version 3.3 (August 2022)","text":"<ul> <li>Multi-object Cable Terminations (#9102)</li> <li>L2VPN Modeling (#8157)</li> <li>PoE Interface Attributes (#1099)</li> <li>Half-Height Rack Units (#51)</li> <li>Restrict API Tokens by Client IP (#8233)</li> <li>Reference User in Permission Constraints (#9074)</li> <li>Custom Field Grouping (#8495)</li> <li>Toggle Custom Field Visibility (#9166)</li> </ul>"},{"location":"release-notes/#version-32-april-2022","title":"Version 3.2 (April 2022)","text":"<ul> <li>Plugins Framework Extensions (#8333)</li> <li>Modules &amp; Module Types (#7844)</li> <li>Custom Object Fields (#7006)</li> <li>Custom Status Choices (#8054)</li> <li>Improved User Preferences (#7759)</li> <li>Inventory Item Roles (#3087)</li> <li>Inventory Item Templates (#8118)</li> <li>Service Templates (#1591)</li> <li>Automatic Provisioning of Next Available VLANs (#2658)</li> </ul>"},{"location":"release-notes/#version-31-december-2021","title":"Version 3.1 (December 2021)","text":"<ul> <li>Contact Objects (#1344)</li> <li>Wireless Networks (#3979)</li> <li>Dynamic Configuration Updates (#5883)</li> <li>First Hop Redundancy Protocol (FHRP) Groups (#6235)</li> <li>Conditional Webhooks (#6238)</li> <li>Interface Bridging (#6346)</li> <li>Multiple ASNs per Site (#6732)</li> <li>Single Sign-On (SSO) Authentication (#7649)</li> </ul>"},{"location":"release-notes/#version-30-august-2021","title":"Version 3.0 (August 2021)","text":"<ul> <li>Updated User Interface (#5893)</li> <li>GraphQL API (#2007)</li> <li>IP Ranges (#834)</li> <li>Custom Model Validation (#5963)</li> <li>SVG Cable Traces (#6000)</li> <li>New Views for Models Previously Under the Admin UI (#6466)</li> <li>REST API Token Provisioning (#5264)</li> <li>New Housekeeping Command (#6590)</li> <li>Custom Queue Support for Plugins (#6651)</li> </ul>"},{"location":"release-notes/#version-211-april-2021","title":"Version 2.11 (April 2021)","text":"<ul> <li>Journaling Support (#151)</li> <li>Parent Interface Assignments (#1519)</li> <li>Pre- and Post-Change Snapshots in Webhooks (#3451)</li> <li>Mark as Connected Without a Cable (#3648)</li> <li>Allow Assigning Devices to Locations (#4971)</li> <li>Dynamic Object Exports (#4999)</li> <li>Variable Scope Support for VLAN Groups (#5284)</li> <li>New Site Group Model (#5892)</li> <li>Improved Change Logging (#5913)</li> <li>Provider Network Modeling (#5986)</li> </ul>"},{"location":"release-notes/#version-210-december-2020","title":"Version 2.10 (December 2020)","text":"<ul> <li>Route Targets (#259)</li> <li>REST API Bulk Deletion (#3436)</li> <li>REST API Bulk Update (#4882)</li> <li>Reimplementation of Custom Fields (#4878)</li> <li>Improved Cable Trace Performance (#4900)</li> </ul>"},{"location":"release-notes/#version-29-august-2020","title":"Version 2.9 (August 2020)","text":"<ul> <li>Object-Based Permissions (#554)</li> <li>Background Execution of Scripts &amp; Reports (#2006)</li> <li>Named Virtual Chassis (#2018)</li> <li>Changes to Tag Creation (#3703)</li> <li>Dedicated Model for VM Interfaces (#4721)</li> <li>REST API Endpoints for Users and Groups (#4877)</li> </ul>"},{"location":"release-notes/#version-28-april-2020","title":"Version 2.8 (April 2020)","text":"<ul> <li>Remote Authentication Support (#2328)</li> <li>Plugins (#3351)</li> </ul>"},{"location":"release-notes/#version-27-january-2020","title":"Version 2.7 (January 2020)","text":"<ul> <li>Enhanced Device Type Import (#451)</li> <li>Bulk Import of Device Components (#822)</li> <li>External File Storage (#1814)</li> <li>Rack Elevations Rendered via SVG (#2248)</li> </ul>"},{"location":"release-notes/#version-26-june-2019","title":"Version 2.6 (June 2019)","text":"<ul> <li>Power Panels and Feeds (#54)</li> <li>Caching (#2647)</li> <li>View Permissions (#323)</li> <li>Custom Links (#969)</li> <li>Prometheus Metrics (#3104)</li> </ul>"},{"location":"release-notes/#version-25-december-2018","title":"Version 2.5 (December 2018)","text":"<ul> <li>Patch Panels and Cables (#20)</li> </ul>"},{"location":"release-notes/#version-24-august-2018","title":"Version 2.4 (August 2018)","text":"<ul> <li>Webhooks (#81)</li> <li>Tagging (#132)</li> <li>Contextual Configuration Data (#1349)</li> <li>Change Logging (#1898)</li> </ul>"},{"location":"release-notes/#version-23-february-2018","title":"Version 2.3 (February 2018)","text":"<ul> <li>Virtual Chassis (#99)</li> <li>Interface VLAN Assignments (#150)</li> <li>Bulk Object Creation via the API (#1553)</li> <li>Automatic Provisioning of Next Available Prefixes (#1694)</li> <li>Bulk Renaming of Device/VM Components (#1781)</li> </ul>"},{"location":"release-notes/#version-22-october-2017","title":"Version 2.2 (October 2017)","text":"<ul> <li>Virtual Machines and Clusters (#142)</li> <li>Custom Validation Reports (#1511)</li> </ul>"},{"location":"release-notes/#version-21-july-2017","title":"Version 2.1 (July 2017)","text":"<ul> <li>IP Address Roles (#819)</li> <li>Automatic Provisioning of Next Available IP (#1246)</li> <li>NAPALM Integration (#1348)</li> </ul>"},{"location":"release-notes/#version-20-may-2017","title":"Version 2.0 (May 2017)","text":"<ul> <li>API 2.0 (#113)</li> <li>Image Attachments (#152)</li> <li>Global Search (#159) &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</li> <li> </li> <li>Rack Elevations View (#951) <p>e06ef5523ba15ec31b7ed58bf5799b98023831bc</p> </li> </ul>"},{"location":"release-notes/#rack-elevations-view-951","title":"Rack Elevations View (#951)","text":""},{"location":"release-notes/version-2.0/","title":"NetBox v2.0 Release Notes","text":""},{"location":"release-notes/version-2.0/#v2010-2017-07-14","title":"v2.0.10 (2017-07-14)","text":""},{"location":"release-notes/version-2.0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#1312 - Catch error when attempting to activate a user key with an invalid private key</li> <li>#1333 - Corrected label on is_console_server field of DeviceType bulk edit form</li> <li>#1338 - Allow importing prefixes with \"container\" status</li> <li>#1339 - Fixed disappearing checkbox column under django-tables2 v1.7+</li> <li>#1342 - Allow designation of users and groups when creating/editing a secret role</li> </ul>"},{"location":"release-notes/version-2.0/#v209-2017-07-10","title":"v2.0.9 (2017-07-10)","text":""},{"location":"release-notes/version-2.0/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#1319 - Fixed server error when attempting to create console/power connections</li> <li>#1325 - Retain interface attachment when editing a circuit termination</li> </ul>"},{"location":"release-notes/version-2.0/#v208-2017-07-05","title":"v2.0.8 (2017-07-05)","text":""},{"location":"release-notes/version-2.0/#enhancements","title":"Enhancements","text":"<ul> <li>#1298 - Calculate prefix utilization based on its status (container or non-container)</li> <li>#1303 - Highlight installed interface connections in green on device view</li> <li>#1315 - Enforce lowercase file extensions for image attachments</li> </ul>"},{"location":"release-notes/version-2.0/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#1279 - Fix primary_ip assignment during IP address import</li> <li>#1281 - Show LLDP neighbors tab on device view only if necessary conditions are met</li> <li>#1282 - Fixed tooltips on \"mark connected/planned\" toggle buttons for device connections</li> <li>#1288 - Corrected permission name for deleting image attachments</li> <li>#1289 - Retain inside NAT assignment when editing an IP address</li> <li>#1297 - Allow passing custom field choice selection PKs to API as string-quoted integers</li> <li>#1299 - Corrected permission name for adding services to devices</li> </ul>"},{"location":"release-notes/version-2.0/#v207-2017-06-15","title":"v2.0.7 (2017-06-15)","text":""},{"location":"release-notes/version-2.0/#enhancements_1","title":"Enhancements","text":"<ul> <li>#626 - Added bulk disconnect function for console/power/interface connections on device view</li> </ul>"},{"location":"release-notes/version-2.0/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#1238 - Fix error when editing an IP with a NAT assignment which has no assigned device</li> <li>#1263 - Differentiate add and edit permissions for objects</li> <li>#1265 - Fix console/power/interface connection validation when selecting a device via live search</li> <li>#1266 - Prevent terminating a circuit to an already-connected interface</li> <li>#1268 - Fix CSV import error under Python 3</li> <li>#1273 - Corrected status choices in IP address import form</li> <li>#1274 - Exclude unterminated circuits from topology maps</li> <li>#1275 - Raise validation error on prefix import when multiple VLANs are found</li> </ul>"},{"location":"release-notes/version-2.0/#v206-2017-06-12","title":"v2.0.6 (2017-06-12)","text":""},{"location":"release-notes/version-2.0/#enhancements_2","title":"Enhancements","text":"<ul> <li>#40 - Added IP utilization graph to prefix list</li> <li>#704 - Allow filtering VLANs by group when editing prefixes</li> <li>#913 - Added headers to object CSV exports</li> <li>#990 - Enable logging configuration in configuration.py</li> <li>#1180 - Simplified the process of finding related devices when viewing a device</li> </ul>"},{"location":"release-notes/version-2.0/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#1253 - Improved <code>upgrade.sh</code> to allow forcing Python2</li> </ul>"},{"location":"release-notes/version-2.0/#v205-2017-06-08","title":"v2.0.5 (2017-06-08)","text":""},{"location":"release-notes/version-2.0/#notes","title":"Notes","text":"<p>The maximum number of objects an API consumer can request has been set to 1000 (e.g. <code>?limit=1000</code>). This limit can be modified by defining <code>MAX_PAGE_SIZE</code> in confgiuration.py. (To remove this limit, set <code>MAX_PAGE_SIZE=0</code>.)</p>"},{"location":"release-notes/version-2.0/#enhancements_3","title":"Enhancements","text":"<ul> <li>#655 - Implemented header-based CSV import of objects</li> <li>#1190 - Allow partial string matching when searching on custom fields</li> <li>#1237 - Enabled setting limit=0 to disable pagination in API requests; added <code>MAX_PAGE_SIZE</code> configuration setting</li> </ul>"},{"location":"release-notes/version-2.0/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#837 - Enforce uniqueness where applicable during bulk import of IP addresses</li> <li>#1226 - Improved validation for custom field values submitted via the API</li> <li>#1232 - Improved rack space validation on bulk import of devices (see #655)</li> <li>#1235 - Fix permission name for adding/editing inventory items</li> <li>#1236 - Truncate rack names in elevations list; add facility ID</li> <li>#1239 - Fix server error when creating VLANGroup via API</li> <li>#1243 - Catch ValueError in IP-based object filters</li> <li>#1244 - Corrected \"device\" secrets filter to accept a device name</li> </ul>"},{"location":"release-notes/version-2.0/#v204-2017-05-25","title":"v2.0.4 (2017-05-25)","text":""},{"location":"release-notes/version-2.0/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#1206 - Fix redirection in admin UI after activating secret keys when BASE_PATH is set</li> <li>#1207 - Include nested LAG serializer when showing interface connections (API)</li> <li>#1210 - Fix TemplateDoesNotExist errors on browsable API views</li> <li>#1212 - Allow assigning new VLANs to global VLAN groups</li> <li>#1213 - Corrected table header ordering links on object list views</li> <li>#1214 - Add status to list of required fields on child device import form</li> <li>#1219 - Fix image attachment URLs when BASE_PATH is set</li> <li>#1220 - Suppressed innocuous warning about untracked migrations under Python 3</li> <li>#1229 - Fix validation error on forms where API search is used</li> </ul>"},{"location":"release-notes/version-2.0/#v203-2017-05-18","title":"v2.0.3 (2017-05-18)","text":""},{"location":"release-notes/version-2.0/#enhancements_4","title":"Enhancements","text":"<ul> <li>#1196 - Added a lag_id filter to the API interfaces view</li> <li>#1198 - Allow filtering unracked devices on device list</li> </ul>"},{"location":"release-notes/version-2.0/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#1157 - Hide nav menu search bar on small displays</li> <li>#1186 - Corrected VLAN edit form so that site assignment is not required</li> <li>#1187 - Fixed table pagination by introducing a custom table template</li> <li>#1188 - Serialize interface LAG as nested objected (API)</li> <li>#1189 - Enforce consistent ordering of objects returned by a global search</li> <li>#1191 - Bulk selection of IPs under a prefix incorrect when \"select all\" is used</li> <li>#1195 - Unable to create an interface connection when searching for peer device</li> <li>#1197 - Fixed status assignment during bulk import of devices, prefixes, IPs, and VLANs</li> <li>#1199 - Bulk import of secrets does not prompt user to generate a session key</li> <li>#1200 - Form validation error when connecting power ports to power outlets</li> </ul>"},{"location":"release-notes/version-2.0/#v202-2017-05-15","title":"v2.0.2 (2017-05-15)","text":""},{"location":"release-notes/version-2.0/#enhancements_5","title":"Enhancements","text":"<ul> <li>#1122 - Include NAT inside IPs in IP address list</li> <li>#1137 - Allow filtering devices list by rack</li> <li>#1170 - Include A and Z sites for circuits in global search results</li> <li>#1172 - Linkify racks in side-by-side elevations view</li> <li>#1177 - Render planned connections as dashed lines on topology maps</li> <li>#1179 - Adjust topology map text color based on node background</li> <li>On all object edit forms, allow filtering the tenant list by tenant group</li> </ul>"},{"location":"release-notes/version-2.0/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#1158 - Exception thrown when creating a device component with an invalid name</li> <li>#1159 - Only superusers can see \"edit IP\" buttons on the device interfaces list</li> <li>#1160 - Linkify secrets and tenants in global search results</li> <li>#1161 - Fix \"add another\" behavior when creating an API token</li> <li>#1166 - Fixed bulk IP address creation when assigning tenants</li> <li>#1168 - Total count of objects missing from list view paginator</li> <li>#1171 - Allow removing site assignment when bulk editing VLANs</li> <li>#1173 - Tweak interface manager to fall back to naive ordering</li> </ul>"},{"location":"release-notes/version-2.0/#v201-2017-05-10","title":"v2.0.1 (2017-05-10)","text":""},{"location":"release-notes/version-2.0/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#1149 - Port list does not populate when creating a console or power connection</li> <li>#1150 - Error when uploading image attachments with Unicode names under Python 2</li> <li>#1151 - Server error: name 'escape' is not defined</li> <li>#1152 - Unable to edit user keys</li> <li>#1153 - UnicodeEncodeError when searching for non-ASCII characters on Python 2</li> </ul>"},{"location":"release-notes/version-2.0/#v200-2017-05-09","title":"v2.0.0 (2017-05-09)","text":""},{"location":"release-notes/version-2.0/#new-features","title":"New Features","text":""},{"location":"release-notes/version-2.0/#api-20-113","title":"API 2.0 (#113)","text":"<p>The NetBox API has been completely rewritten and now features full read/write ability.</p>"},{"location":"release-notes/version-2.0/#image-attachments-152","title":"Image Attachments (#152)","text":"<p>Users are now able to attach photos and other images to sites, racks, and devices. (Please ensure that the new <code>media</code> directory is writable by the system account NetBox runs as.)</p>"},{"location":"release-notes/version-2.0/#global-search-159","title":"Global Search (#159)","text":"<p>NetBox now supports searching across all primary object types at once.</p>"},{"location":"release-notes/version-2.0/#rack-elevations-view-951","title":"Rack Elevations View (#951)","text":"<p>A new view has been introduced to display the elevations of multiple racks side-by-side.</p>"},{"location":"release-notes/version-2.0/#enhancements_6","title":"Enhancements","text":"<ul> <li>#154 - Expanded device status field to include options other than active/offline</li> <li>#430 - Include circuits when rendering topology maps</li> <li>#578 - Show topology maps not assigned to a site on the home view</li> <li>#1100 - Add a \"view all\" link to completed bulk import views is_pool for prefixes)</li> <li>#1110 - Expand bulk edit forms to include boolean fields (e.g. toggle is_pool for prefixes)</li> </ul>"},{"location":"release-notes/version-2.0/#bug-fixes_10","title":"Bug Fixes","text":"<p>From v1.9.6:</p> <ul> <li>#403 - Record console/power/interface connects and disconnects as user actions</li> <li>#853 -  Added \"status\" field to device bulk import form</li> <li>#1101 - Fix AJAX scripting for device component selection forms</li> <li>#1103 - Correct handling of validation errors when creating IP addresses in bulk</li> <li>#1104 - Fix VLAN assignment on prefix import</li> <li>#1115 - Enabled responsive (side-scrolling) tables for small screens</li> <li>#1116 - Correct object links on recursive deletion error</li> <li>#1125 - Include MAC addresses on a device's interface list</li> <li>#1144 - Allow multiple status selections for Prefix, IP address, and VLAN filters</li> </ul> <p>From beta3:</p> <ul> <li>#1113 - Fixed server error when attempting to delete an image attachment</li> <li>#1114 - Suppress OSError when attempting to access a deleted image attachment</li> <li>#1126 - Fixed server error when editing a user key via admin UI attachment</li> <li>#1132 - Prompt user to unlock session key when importing secrets</li> </ul>"},{"location":"release-notes/version-2.0/#additional-changes","title":"Additional Changes","text":"<ul> <li>The Module DCIM model has been renamed to InventoryItem to better reflect its intended function, and to make room for work on #824.</li> <li>Redundant portions of the admin UI have been removed (#973).</li> <li>The Docker build components have been moved into their own repository.</li> </ul>"},{"location":"release-notes/version-2.1/","title":"NetBox v2.1 Release Notes","text":""},{"location":"release-notes/version-2.1/#v216-2017-10-11","title":"v2.1.6 (2017-10-11)","text":""},{"location":"release-notes/version-2.1/#enhancements","title":"Enhancements","text":"<ul> <li>#1548 - Automatically populate tenant assignment when adding an IP address from the prefix view</li> <li>#1561 - Added primary IP to the devices table in global search</li> <li>#1563 - Made necessary updates for Django REST Framework v3.7.0</li> </ul>"},{"location":"release-notes/version-2.1/#v215-2017-09-25","title":"v2.1.5 (2017-09-25)","text":""},{"location":"release-notes/version-2.1/#enhancements_1","title":"Enhancements","text":"<ul> <li>#1484 - Added individual \"add VLAN\" buttons on the VLAN groups list</li> <li>#1485 - Added <code>BANNER_LOGIN</code> configuration setting to display a banner on the login page</li> <li>#1499 - Added utilization graph to child prefixes table</li> <li>#1523 - Improved the natural ordering of interfaces (thanks to @tarkatronic)</li> <li>#1536 - Improved formatting of aggregate prefix statistics</li> </ul>"},{"location":"release-notes/version-2.1/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#1469 - Allow a NAT IP to be assigned as the primary IP for a device</li> <li>#1472 - Prevented truncation when displaying secret strings containing HTML characters</li> <li>#1486 - Ignore subinterface IDs when validating LLDP neighbor connections</li> <li>#1489 - Corrected server error on validation of empty required custom field</li> <li>#1507 - Fixed error when creating the next available IP from a prefix within a VRF</li> <li>#1520 - Redirect on GET request to bulk edit/delete views</li> <li>#1522 - Removed object create/edit forms from the browsable API</li> </ul>"},{"location":"release-notes/version-2.1/#v214-2017-08-30","title":"v2.1.4 (2017-08-30)","text":""},{"location":"release-notes/version-2.1/#enhancements_2","title":"Enhancements","text":"<ul> <li>#1326 - Added dropdown widget with common values for circuit speed fields</li> <li>#1341 - Added a <code>MEDIA_ROOT</code> configuration setting to specify where uploaded files are stored on disk</li> <li>#1376 - Ignore anycast addresses when detecting duplicate IPs</li> <li>#1402 - Increased max length of name field for device components</li> <li>#1431 - Added interface form factor for 10GBASE-CX4</li> <li>#1432 - Added a <code>commit_rate</code> field to the circuits list search form</li> <li>#1460 - Hostnames with no domain are now acceptable in custom URL fields</li> </ul>"},{"location":"release-notes/version-2.1/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#1429 - Fixed uptime formatting on device status page</li> <li>#1433 - Fixed <code>devicetype_id</code> filter for DeviceType components</li> <li>#1443 - Fixed API validation error involving custom field data</li> <li>#1458 - Corrected permission name on prefix/VLAN roles list</li> </ul>"},{"location":"release-notes/version-2.1/#v213-2017-08-15","title":"v2.1.3 (2017-08-15)","text":""},{"location":"release-notes/version-2.1/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#1330 - Raise validation error when assigning an unrelated IP as the primary IP for a device</li> <li>#1389 - Avoid splitting carat/prefix on prefix list</li> <li>#1400 - Removed redundant display of assigned device interface from IP address list</li> <li>#1414 - Selecting a site from the rack filters automatically updates the available rack groups</li> <li>#1419 - Allow editing image attachments without re-uploading an image</li> <li>#1420 - Exclude virtual interfaces from device LLDP neighbors view</li> <li>#1421 - Improved model validation logic for API serializers</li> <li>Fixed page title capitalization in the browsable API</li> </ul>"},{"location":"release-notes/version-2.1/#v212-2017-08-04","title":"v2.1.2 (2017-08-04)","text":""},{"location":"release-notes/version-2.1/#enhancements_3","title":"Enhancements","text":"<ul> <li>#992 - Allow the creation of multiple services per device with the same protocol and port</li> <li>Tweaked navigation menu styling</li> </ul>"},{"location":"release-notes/version-2.1/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#1388 - Fixed server error when searching globally for IPs/prefixes (rolled back #1379)</li> <li>#1390 - Fixed IndexError when viewing available IPs within large IPv6 prefixes</li> </ul>"},{"location":"release-notes/version-2.1/#v211-2017-08-02","title":"v2.1.1 (2017-08-02)","text":""},{"location":"release-notes/version-2.1/#enhancements_4","title":"Enhancements","text":"<ul> <li>#893 - Allow filtering by null values for NullCharacterFields (e.g. return only unnamed devices)</li> <li>#1368 - Render reservations in rack elevations view</li> <li>#1374 - Added NAPALM_ARGS and NAPALM_TIMEOUT configiuration parameters</li> <li>#1375 - Renamed <code>NETBOX_USERNAME</code> and <code>NETBOX_PASSWORD</code> configuration parameters to <code>NAPALM_USERNAME</code> and <code>NAPALM_PASSWORD</code></li> <li>#1379 - Allow searching devices by interface MAC address in global search</li> </ul>"},{"location":"release-notes/version-2.1/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#461 - Display a validation error when attempting to assigning a new child device to a rack face/position</li> <li>#1385 - Connected device API endpoint no longer requires authentication if <code>LOGIN_REQUIRED</code> is False</li> </ul>"},{"location":"release-notes/version-2.1/#v210-2017-07-25","title":"v2.1.0 (2017-07-25)","text":""},{"location":"release-notes/version-2.1/#new-features","title":"New Features","text":""},{"location":"release-notes/version-2.1/#ip-address-roles-819","title":"IP Address Roles (#819)","text":"<p>The IP address model now supports the assignment of a functional role to help identify special-purpose IPs. These include:</p> <ul> <li>Loopback</li> <li>Secondary</li> <li>Anycast</li> <li>VIP</li> <li>VRRP</li> <li>HSRP</li> <li>GLBP</li> </ul>"},{"location":"release-notes/version-2.1/#automatic-provisioning-of-next-available-ip-1246","title":"Automatic Provisioning of Next Available IP (#1246)","text":"<p>A new API endpoint has been added at <code>/api/ipam/prefixes/&lt;pk&gt;/available-ips/</code>. A GET request to this endpoint will return a list of available IP addresses within the prefix (up to the pagination limit). A POST request will automatically create and return the next available IP address.</p>"},{"location":"release-notes/version-2.1/#napalm-integration-1348","title":"NAPALM Integration (#1348)","text":"<p>The NAPALM automation library provides an abstracted interface for pulling live data (e.g. uptime, software version, running config, LLDP neighbors, etc.) from network devices. The NetBox API has been extended to support executing read-only NAPALM methods on devices defined in NetBox. To enable this functionality, ensure that NAPALM has been installed (<code>pip install napalm</code>) and the <code>NETBOX_USERNAME</code> and <code>NETBOX_PASSWORD</code> configuration parameters have been set in configuration.py.</p>"},{"location":"release-notes/version-2.1/#enhancements_5","title":"Enhancements","text":"<ul> <li>#838 - Display details of all objects being edited/deleted in bulk</li> <li>#1041 - Added enabled and MTU fields to the interface model</li> <li>#1121 - Added asset_tag and description fields to the InventoryItem model</li> <li>#1141 - Include RD when listing VRFs in a form selection field</li> <li>#1203 - Implemented query filters for all models</li> <li>#1218 - Added IEEE 802.11 wireless interface types</li> <li>#1269 - Added circuit termination to interface serializer</li> <li>#1320 - Removed checkbox from confirmation dialog</li> </ul>"},{"location":"release-notes/version-2.1/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#1079 - Order interfaces naturally via API</li> <li>#1285 - Enforce model validation when creating/editing objects via the API</li> <li>#1358 - Correct VRF example values in IP/prefix import forms</li> <li>#1362 - Raise validation error when attempting to create an API key that's too short</li> <li>#1371 - Extend DeviceSerializer.parent_device to include standard fields</li> </ul>"},{"location":"release-notes/version-2.1/#api-changes","title":"API changes","text":"<ul> <li>Added a new API endpoint which makes NAPALM accessible via NetBox</li> <li>Device components (console ports, power ports, interfaces, etc.) can only be filtered by a single device name or ID. This limitation was necessary to allow the natural ordering of interfaces according to the device's parent device type.</li> <li>Added two new fields to the interface serializer: <code>enabled</code> (boolean) and <code>mtu</code> (unsigned integer)</li> <li>Modified the interface serializer to include three discrete fields relating to connections: <code>is_connected</code> (boolean), <code>interface_connection</code>, and <code>circuit_termination</code></li> <li>Added two new fields to the inventory item serializer: <code>asset_tag</code> and <code>description</code></li> <li>Added \"wireless\" to interface type filter (in addition to physical, virtual, and LAG)</li> <li>Added a new endpoint at /api/ipam/prefixes//available-ips/ to retrieve or create available IPs within a prefix <li>Extended <code>parent_device</code> on DeviceSerializer to include the <code>url</code> and <code>display_name</code> of the parent Device, and the <code>url</code> of the DeviceBay</li>"},{"location":"release-notes/version-2.10/","title":"NetBox v2.10","text":""},{"location":"release-notes/version-2.10/#v21010-2021-04-15","title":"v2.10.10 (2021-04-15)","text":""},{"location":"release-notes/version-2.10/#enhancements","title":"Enhancements","text":"<ul> <li>#5796 - Add DC terminal power port, outlet types</li> <li>#5980 - Add Saf-D-Grid power port, outlet types</li> <li>#6157 - Support Markdown rendering for report logs</li> <li>#6160 - Add F connector port type</li> <li>#6168 - Add SFP56 50GE interface type</li> </ul>"},{"location":"release-notes/version-2.10/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#5419 - Update parent device/VM when deleting a primary IP</li> <li>#5643 - Fix VLAN assignment when editing VM interfaces in bulk</li> <li>#5652 - Update object data when renaming a custom field</li> <li>#6056 - Optimize change log cleanup</li> <li>#6144 - Fix MAC address field display in VM interfaces search form</li> <li>#6152 - Fix custom field filtering for cables, virtual chassis</li> <li>#6162 - Fix choice field filters (multiple models)</li> </ul>"},{"location":"release-notes/version-2.10/#v2109-2021-04-12","title":"v2.10.9 (2021-04-12)","text":""},{"location":"release-notes/version-2.10/#enhancements_1","title":"Enhancements","text":"<ul> <li>#5526 - Add MAC address search field to VM interfaces list</li> <li>#5756 - Omit child devices from non-racked devices list under rack view</li> <li>#5840 - Add column to cable termination objects to display cable color</li> <li>#6054 - Display NAPALM-enabled device tabs only when relevant</li> <li>#6083 - Support disabling TLS certificate validation for Redis</li> </ul>"},{"location":"release-notes/version-2.10/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#5805 - Fix missing custom field filters for cables, rack reservations</li> <li>#6070 - Add missing <code>count_ipaddresses</code> attribute to VMInterface serializer</li> <li>#6073 - Permit users to manage their own REST API tokens without needing explicit permission</li> <li>#6081 - Fix interface connections REST API endpoint</li> <li>#6082 - Support colons in webhook header values</li> <li>#6108 - Do not infer tenant assignment from parent objects for prefixes, IP addresses</li> <li>#6117 - Handle exception when attempting to assign an MPTT-enabled model as its own parent</li> <li>#6131 - Correct handling of boolean fields when cloning objects</li> </ul>"},{"location":"release-notes/version-2.10/#v2108-2021-03-26","title":"v2.10.8 (2021-03-26)","text":""},{"location":"release-notes/version-2.10/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#6060 - Fix exception on cable trace in UI (regression from #5650)</li> </ul>"},{"location":"release-notes/version-2.10/#v2107-2021-03-25","title":"v2.10.7 (2021-03-25)","text":""},{"location":"release-notes/version-2.10/#enhancements_2","title":"Enhancements","text":"<ul> <li>#5641 - Allow filtering device components by label</li> <li>#5723 - Allow customization of the geographic mapping service via <code>MAPS_URL</code> config parameter</li> <li>#5736 - Allow changing site assignment when bulk editing devices</li> <li>#5953 - Support Markdown rendering for custom script descriptions</li> <li>#6040 - Add UI search fields for asset tag for devices and racks</li> </ul>"},{"location":"release-notes/version-2.10/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#5595 - Restore ability to delete an uploaded device type image</li> <li>#5650 - Denote when the total length of a cable trace may exceed the indicated value</li> <li>#5962 - Ensure consistent display of change log action labels</li> <li>#5966 - Skip Markdown reference link when tabbing through form fields</li> <li>#5977 - Correct validation of <code>RELEASE_CHECK_URL</code> config parameter</li> <li>#6006 - Fix VLAN group/site association for bulk prefix import</li> <li>#6010 - Eliminate duplicate virtual chassis search results</li> <li>#6012 - Pre-populate attributes when creating an available child prefix via the UI</li> <li>#6023 - Fix display of bottom banner with uBlock Origin enabled</li> </ul>"},{"location":"release-notes/version-2.10/#v2106-2021-03-09","title":"v2.10.6 (2021-03-09)","text":""},{"location":"release-notes/version-2.10/#enhancements_3","title":"Enhancements","text":"<ul> <li>#5592 - Add IP addresses count to VRF view</li> <li>#5630 - Add QSFP+ (64GFC) FibreChannel Interface option</li> <li>#5884 - Enable custom links for device components</li> <li>#5914 - Add edit/delete buttons for IP addresses on interface view</li> <li>#5942 - Add button to add a new IP address on interface view</li> </ul>"},{"location":"release-notes/version-2.10/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#5703 - Fix VRF and Tenant field population when adding IP addresses from prefix</li> <li>#5819 - Enable ordering of virtual machines by primary IP address</li> <li>#5872 - Ordering of devices by primary IP should respect <code>PREFER_IPV4</code> configuration parameter</li> <li>#5922 - Fix options for filtering object permissions in admin UI</li> <li>#5935 - Fix filtering prefixes list by multiple prefix values</li> <li>#5948 - Invalidate cached queries when running <code>renaturalize</code></li> </ul>"},{"location":"release-notes/version-2.10/#v2105-2021-02-24","title":"v2.10.5 (2021-02-24)","text":""},{"location":"release-notes/version-2.10/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#5315 - Fix site unassignment from VLAN when using \"None\" option</li> <li>#5626 - Fix REST API representation for circuit terminations connected to non-interface endpoints</li> <li>#5716 - Fix filtering rack reservations by custom field</li> <li>#5718 - Fix bulk editing of services when no port(s) are defined</li> <li>#5735 - Ensure consistent treatment of duplicate IP addresses</li> <li>#5738 - Fix redirect to device components view after disconnecting a cable</li> <li>#5753 - Fix Redis Sentinel password application for caching</li> <li>#5786 - Allow setting null tenant group on tenant via REST API</li> <li>#5841 - Disallow the creation of available prefixes/IP addresses in violation of assigned permission constraints</li> </ul>"},{"location":"release-notes/version-2.10/#v2104-2021-01-26","title":"v2.10.4 (2021-01-26)","text":""},{"location":"release-notes/version-2.10/#enhancements_4","title":"Enhancements","text":"<ul> <li>#5542 - Show cable trace lengths in both meters and feet</li> <li>#5570 - Add \"management only\" filter widget for interfaces list</li> <li>#5586 - Allow filtering virtual chassis by name and master</li> <li>#5612 - Add GG45 and TERA port types, and CAT7a and CAT8 cable types</li> <li>#5678 - Show available type choices for all device component import forms</li> </ul>"},{"location":"release-notes/version-2.10/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#5232 - Correct swagger definition for ip_prefixes_available-ips_create API</li> <li>#5574 - Restrict the creation of device bay templates on non-parent device types</li> <li>#5584 - Restore power utilization panel under device view</li> <li>#5597 - Fix ordering devices by primary IP address</li> <li>#5603 - Fix display of white cables in trace view</li> <li>#5639 - Fix filtering connection lists by device name</li> <li>#5640 - Fix permissions assessment when adding VM interfaces in bulk</li> <li>#5648 - Include VC member interfaces on interfaces tab count when viewing VC master</li> <li>#5665 - Validate rack group is assigned to same site when creating a rack</li> <li>#5683 - Correct rack elevation displayed when viewing a reservation</li> </ul>"},{"location":"release-notes/version-2.10/#v2103-2021-01-05","title":"v2.10.3 (2021-01-05)","text":""},{"location":"release-notes/version-2.10/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#5049 - Add check for LLDP neighbor chassis name to lldp_neighbors</li> <li>#5301 - Fix misleading error when racking a device with invalid parameters</li> <li>#5311 - Update child objects when a rack group is moved to a new site</li> <li>#5518 - Fix persistent vertical scrollbar</li> <li>#5533 - Fix bulk editing of objects with required custom fields</li> <li>#5540 - Fix exception when viewing a provider with one or more tags assigned</li> <li>#5543 - Fix rendering of config contexts with cluster assignment for devices</li> <li>#5546 - Add custom field bulk edit support for cables, power panels, rack reservations, and virtual chassis</li> <li>#5547 - Add custom field bulk import support for cables, power panels, rack reservations, and virtual chassis</li> <li>#5551 - Restore missing import button on services list</li> <li>#5557 - Fix VRF route target assignment via REST API</li> <li>#5558 - Fix regex validation support for custom URL fields</li> <li>#5563 - Fix power feed cable trace link</li> <li>#5564 - Raise validation error if a power port template's <code>allocated_draw</code> exceeds its <code>maximum_draw</code></li> <li>#5569 - Ensure consistent labeling of interface <code>mgmt_only</code> field</li> <li>#5573 - Report inconsistent values when migrating custom field data</li> </ul>"},{"location":"release-notes/version-2.10/#v2102-2020-12-21","title":"v2.10.2 (2020-12-21)","text":""},{"location":"release-notes/version-2.10/#enhancements_5","title":"Enhancements","text":"<ul> <li>#5489 - Add filters for type and width to racks list</li> <li>#5496 - Add form field to filter rack reservation by user</li> </ul>"},{"location":"release-notes/version-2.10/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#5254 - Require plugin authors to set zip_safe=False</li> <li>#5468 - Fix unlocking secrets from device/VM view</li> <li>#5473 - Fix alignment of rack names in elevations list</li> <li>#5478 - Fix display of route target description</li> <li>#5484 - Fix \"tagged\" indication in VLAN members list</li> <li>#5486 - Optimize retrieval of config context data for device/VM REST API views</li> <li>#5487 - Support filtering rack type/width with multiple values</li> <li>#5488 - Fix caching error when viewing cable trace after toggling cable status</li> <li>#5498 - Fix filtering rack reservations by username</li> <li>#5499 - Fix filtering of displayed device/VM interfaces by regex</li> <li>#5507 - Fix custom field data assignment via UI for IP addresses, secrets</li> <li>#5510 - Fix filtering by boolean custom fields</li> </ul>"},{"location":"release-notes/version-2.10/#v2101-2020-12-15","title":"v2.10.1 (2020-12-15)","text":""},{"location":"release-notes/version-2.10/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#5444 - Don't force overwriting of boolean fields when bulk editing interfaces</li> <li>#5450 - API serializer foreign count fields do not have a default value</li> <li>#5453 - Correct change log representation when creating a cable</li> <li>#5458 - Creating a component template throws an exception</li> <li>#5461 - Rack Elevations throw reverse match exception</li> <li>#5463 - Back-to-back Circuit Termination throws AttributeError exception</li> <li>#5465 - Correct return URL when disconnecting a cable from a device</li> <li>#5466 - Fix validation for required custom fields</li> <li>#5470 - Fix exception when making <code>OPTIONS</code> request for a REST API list endpoint</li> </ul>"},{"location":"release-notes/version-2.10/#v2100-2020-12-14","title":"v2.10.0 (2020-12-14)","text":"<p>NOTE: This release completely removes support for embedded graphs.</p> <p>NOTE: The Django templating language (DTL) is no longer supported for export templates. Ensure that all export templates use Jinja2 before upgrading.</p>"},{"location":"release-notes/version-2.10/#new-features","title":"New Features","text":""},{"location":"release-notes/version-2.10/#route-targets-259","title":"Route Targets (#259)","text":"<p>This release introduces support for modeling L3VPN route targets, which can be used to control the redistribution of advertised prefixes among VRFs. Each VRF may be assigned one or more route targets in the import and/or export direction. Like VRFs, route targets may be assigned to tenants and support tag assignment.</p>"},{"location":"release-notes/version-2.10/#rest-api-bulk-deletion-3436","title":"REST API Bulk Deletion (#3436)","text":"<p>The REST API now supports the bulk deletion of objects of the same type in a single request. Send a <code>DELETE</code> HTTP request to the list to the model's list endpoint (e.g. <code>/api/dcim/sites/</code>) with a list of JSON objects specifying the numeric ID of each object to be deleted. For example, to delete sites with IDs 10, 11, and 12, issue the following request:</p> <pre><code>curl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10}, {\"id\": 11}, {\"id\": 12}]'\n</code></pre>"},{"location":"release-notes/version-2.10/#rest-api-bulk-update-4882","title":"REST API Bulk Update (#4882)","text":"<p>Similar to bulk deletion, the REST API also now supports bulk updates. Send a <code>PUT</code> or <code>PATCH</code> HTTP request to the list to the model's list endpoint (e.g. <code>/api/dcim/sites/</code>) with a list of JSON objects specifying the numeric ID of each object and the attribute(s) to be updated. For example, to set a description for sites with IDs 10 and 11, issue the following request:</p> <pre><code>curl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10, \"description\": \"Foo\"}, {\"id\": 11, \"description\": \"Bar\"}]'\n</code></pre>"},{"location":"release-notes/version-2.10/#reimplementation-of-custom-fields-4878","title":"Reimplementation of Custom Fields (#4878)","text":"<p>NetBox v2.10 introduces a completely overhauled approach to custom fields. Whereas previous versions used CustomFieldValue instances to store values, custom field data is now stored directly on each model instance as JSON data and may be accessed using the <code>cf</code> property:</p> <pre><code>&gt;&gt;&gt; site = Site.objects.first()\n&gt;&gt;&gt; site.cf\n{'site_code': 'US-RAL01'}\n&gt;&gt;&gt; site.cf['foo'] = 'ABC'\n&gt;&gt;&gt; site.full_clean()\n&gt;&gt;&gt; site.save()\n&gt;&gt;&gt; site = Site.objects.first()\n&gt;&gt;&gt; site.cf\n{'foo': 'ABC', 'site_code': 'US-RAL01'}\n</code></pre> <p>Additionally, custom selection field choices are now defined on the CustomField model within the admin UI, which greatly simplifies working with choice values.</p>"},{"location":"release-notes/version-2.10/#improved-cable-trace-performance-4900","title":"Improved Cable Trace Performance (#4900)","text":"<p>All end-to-end cable paths are now cached using the new CablePath backend model. This allows NetBox to now immediately return the complete path originating from any endpoint directly from the database, rather than having to trace each cable recursively. It also resolves some systemic validation issues present in the original implementation.</p> <p>Note: As part of this change, cable traces will no longer traverse circuits: A circuit termination will be considered the origin or destination of an end-to-end path.</p>"},{"location":"release-notes/version-2.10/#enhancements_6","title":"Enhancements","text":"<ul> <li>#609 - Add min/max value and regex validation for custom fields</li> <li>#1503 - Allow assigment of secrets to virtual machines</li> <li>#1692 - Allow assigment of inventory items to parent items in web UI</li> <li>#2179 - Support the use of multiple port numbers when defining a service</li> <li>#4897 - Allow filtering by content type identified as <code>&lt;app&gt;.&lt;model&gt;</code> string</li> <li>#4918 - Add a REST API endpoint (<code>/api/status/</code>) which returns NetBox's current operational status</li> <li>#4956 - Include inventory items on primary device view</li> <li>#4967 - Support tenant assignment for aggregates</li> <li>#5003 - CSV import now accepts slug values for choice fields</li> <li>#5146 - Add custom field support for cables, power panels, rack reservations, and virtual chassis</li> <li>#5154 - The web interface now consumes the entire browser window</li> <li>#5190 - Add a REST API endpoint for retrieving content types (<code>/api/extras/content-types/</code>)</li> <li>#5274 - Add REST API support for custom fields</li> <li>#5399 - Show options for cable endpoint types during bulk import</li> <li>#5411 - Include cable tags in trace view</li> </ul>"},{"location":"release-notes/version-2.10/#other-changes","title":"Other Changes","text":"<ul> <li>#1846 - Enable MPTT for InventoryItem hierarchy</li> <li>#2755 - Switched from Font Awesome/Glyphicons to Material Design icons</li> <li>#4349 - Dropped support for embedded graphs</li> <li>#4360 - Dropped support for the Django template language from export templates</li> <li>#4711 - Renamed Webhook <code>obj_type</code> to <code>content_types</code></li> <li>#4941 - <code>commit</code> argument is now required argument in a custom script's <code>run()</code> method</li> <li>#5011 - Standardized name field lengths across all models</li> <li>#5139 - Omit utilization statistics from RIR list</li> <li>#5225 - Circuit termination port speed is now an optional field</li> </ul>"},{"location":"release-notes/version-2.10/#rest-api-changes","title":"REST API Changes","text":"<ul> <li>Added support for <code>PUT</code>, <code>PATCH</code>, and <code>DELETE</code> operations on list endpoints (bulk update and delete)</li> <li>Added the <code>/extras/content-types/</code> endpoint for Django ContentTypes</li> <li>Added the <code>/extras/custom-fields/</code> endpoint for custom fields</li> <li>Removed the <code>/extras/_custom_field_choices/</code> endpoint (replaced by new custom fields endpoint)</li> <li>Added the <code>/status/</code> endpoint to convey NetBox's current status</li> <li>circuits.CircuitTermination:<ul> <li>Added the <code>/trace/</code> endpoint</li> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li><code>port_speed</code> may now be null</li> </ul> </li> <li>dcim.Cable: Added <code>custom_fields</code></li> <li>dcim.ConsolePort:<ul> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li>Removed <code>connection_status</code> from nested serializer</li> </ul> </li> <li>dcim.ConsoleServerPort:<ul> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li>Removed <code>connection_status</code> from nested serializer</li> </ul> </li> <li>dcim.FrontPort:<ul> <li>Replaced the <code>/trace/</code> endpoint with <code>/paths/</code>, which returns a list of cable paths</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> </ul> </li> <li>dcim.Interface:<ul> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li>Removed <code>connection_status</code> from nested serializer</li> </ul> </li> <li>dcim.InventoryItem: The <code>_depth</code> field has been added to reflect MPTT positioning</li> <li>dcim.PowerFeed:<ul> <li>Added the <code>/trace/</code> endpoint</li> <li>Added fields <code>connected_endpoint</code>, <code>connected_endpoint_type</code>, <code>connected_endpoint_reachable</code>, <code>cable_peer</code>, and <code>cable_peer_type</code></li> </ul> </li> <li>dcim.PowerOutlet:<ul> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li>Removed <code>connection_status</code> from nested serializer</li> </ul> </li> <li>dcim.PowerPanel: Added <code>custom_fields</code></li> <li>dcim.PowerPort<ul> <li>Replaced <code>connection_status</code> with <code>connected_endpoint_reachable</code> (boolean)</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> <li>Removed <code>connection_status</code> from nested serializer</li> </ul> </li> <li>dcim.RackReservation: Added <code>custom_fields</code></li> <li>dcim.RearPort:<ul> <li>Replaced the <code>/trace/</code> endpoint with <code>/paths/</code>, which returns a list of cable paths</li> <li>Added <code>cable_peer</code> and <code>cable_peer_type</code></li> </ul> </li> <li>dcim.VirtualChassis: Added <code>custom_fields</code></li> <li>extras.ExportTemplate: The <code>template_language</code> field has been removed</li> <li>extras.Graph: This API endpoint has been removed (see #4349)</li> <li>extras.ImageAttachment: Filtering by <code>content_type</code> now takes a string in the form <code>&lt;app&gt;.&lt;model&gt;</code></li> <li>extras.ObjectChange: Filtering by <code>changed_object_type</code> now takes a string in the form <code>&lt;app&gt;.&lt;model&gt;</code></li> <li>ipam.Aggregate: Added <code>tenant</code> field</li> <li>ipam.RouteTarget: New endpoint</li> <li>ipam.Service: Renamed <code>port</code> to <code>ports</code>; now holds a list of one or more port numbers</li> <li>ipam.VRF: Added <code>import_targets</code> and <code>export_targets</code> fields</li> <li>secrets.Secret: Removed <code>device</code> field; replaced with <code>assigned_object</code> generic foreign key. This may represent either a device or a virtual machine. Assign an object by setting <code>assigned_object_type</code> and <code>assigned_object_id</code>.</li> </ul>"},{"location":"release-notes/version-2.11/","title":"NetBox v2.11","text":""},{"location":"release-notes/version-2.11/#v21112-2021-08-23","title":"v2.11.12 (2021-08-23)","text":""},{"location":"release-notes/version-2.11/#enhancements","title":"Enhancements","text":"<ul> <li>#6748 - Add site group filter to devices list</li> <li>#6790 - Recognize a /32 IPv4 address as a child of a /32 IPv4 prefix</li> <li>#6872 - Add table configuration button to child prefixes view</li> <li>#6929 - Introduce <code>LOGIN_PERSISTENCE</code> configuration parameter to persist user sessions</li> <li>#7011 - Add search field to VM interfaces filter form</li> </ul>"},{"location":"release-notes/version-2.11/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#5968 - Model forms should save empty custom field values as null</li> <li>#6326 - Enable filtering assigned VLANs by group in interface edit form</li> <li>#6686 - Force assignment of null custom field values to objects</li> <li>#6776 - Fix erroneous webhook dispatch on failure to save objects</li> <li>#6974 - Show contextual label for IP address role</li> <li>#7012 - Fix hidden \"add components\" dropdown on devices list</li> </ul>"},{"location":"release-notes/version-2.11/#v21111-2021-08-12","title":"v2.11.11 (2021-08-12)","text":""},{"location":"release-notes/version-2.11/#enhancements_1","title":"Enhancements","text":"<ul> <li>#6883 - Add C21 &amp; C22 power types</li> <li>#6921 - Employ a sandbox when rendering Jinja2 code for increased security</li> </ul>"},{"location":"release-notes/version-2.11/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#6740 - Add import button to VM interfaces list</li> <li>#6892 - Fix validation of unit ranges when creating a rack reservation</li> <li>#6896 - Fix validation of IP address assigned as device/VM primary via NAT relation</li> <li>#6902 - Populate device field when cloning device components</li> <li>#6908 - Allow assignment of scope to VLAN groups upon import</li> <li>#6909 - Remove extraneous <code>site</code> column from VLAN group import form</li> <li>#6910 - Fix exception on invalid CSV import column name</li> <li>#6918 - Fix return URL persistence when adding multiple objects sequentially</li> <li>#6935 - Remove extraneous columns from inventory item and device bay tables</li> <li>#6936 - Add missing <code>parent</code> column to inventory item import form</li> </ul>"},{"location":"release-notes/version-2.11/#v21110-2021-07-28","title":"v2.11.10 (2021-07-28)","text":""},{"location":"release-notes/version-2.11/#enhancements_2","title":"Enhancements","text":"<ul> <li>#6560 - Enable CSV import via uploaded file</li> <li>#6644 - Add 6P/4P pass-through port types</li> <li>#6771 - Add count of inventory items to manufacturer view</li> <li>#6785 - Add \"hardwired\" type for power port types</li> </ul>"},{"location":"release-notes/version-2.11/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#5442 - Fix assignment of permissions based on LDAP groups</li> <li>#5627 - Fix filtering of interface connections list</li> <li>#6759 - Fix assignment of parent interfaces for bulk import</li> <li>#6773 - Add missing <code>display</code> field to rack unit serializer</li> <li>#6774 - Fix A/Z assignment when swapping circuit terminations</li> <li>#6777 - Fix default value validation for custom text fields</li> <li>#6778 - Rack reservation should display rack's location</li> <li>#6780 - Include rack location in navigation breadcrumbs</li> <li>#6794 - Fix device name display on device status view</li> <li>#6812 - Limit reported prefix utilization to 100%</li> <li>#6822 - Use consistent maximum value for interface MTU</li> </ul>"},{"location":"release-notes/version-2.11/#other-changes","title":"Other Changes","text":"<ul> <li>#6781 - Database query caching is now disabled by default</li> </ul>"},{"location":"release-notes/version-2.11/#v2119-2021-07-08","title":"v2.11.9 (2021-07-08)","text":""},{"location":"release-notes/version-2.11/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#6456 - API schema type should be boolean for <code>_occupied</code> on cable termination models</li> <li>#6710 - Fix assignment of VM interface parent via REST API</li> <li>#6714 - Fix rendering of device type component creation forms</li> </ul>"},{"location":"release-notes/version-2.11/#v2118-2021-07-06","title":"v2.11.8 (2021-07-06)","text":""},{"location":"release-notes/version-2.11/#enhancements_3","title":"Enhancements","text":"<ul> <li>#5503 - Annotate short date &amp; time fields with their longer form</li> <li>#6138 - Add an <code>empty</code> filter modifier for character fields</li> <li>#6200 - Add rack reservations to global search</li> <li>#6368 - Enable virtual chassis assignment during bulk import of devices</li> <li>#6620 - Show assigned VMs count under device role view</li> <li>#6666 - Show management-only status under interface detail view</li> <li>#6667 - Display VM memory as GB/TB as appropriate</li> </ul>"},{"location":"release-notes/version-2.11/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#6626 - Fix site field on VM search form; add site group</li> <li>#6637 - Fix group assignment in \"available VLANs\" link under VLAN group view</li> <li>#6640 - Disallow numeric values in custom text fields</li> <li>#6652 - Fix exception when adding components in bulk to multiple devices</li> <li>#6676 - Fix device/VM counts per cluster under cluster type/group views</li> <li>#6680 - Allow setting custom field values for VM interfaces on initial creation</li> <li>#6695 - Fix exception when importing device type with invalid front port definition</li> </ul>"},{"location":"release-notes/version-2.11/#v2117-2021-06-16","title":"v2.11.7 (2021-06-16)","text":""},{"location":"release-notes/version-2.11/#enhancements_4","title":"Enhancements","text":"<ul> <li>#6455 - Permit /32 IPv4 and /128 IPv6 prefixes</li> <li>#6493 - Show change log diff for non-atomic (pre-2.11) changes</li> <li>#6564 - Add N connector type for pass-through ports</li> <li>#6588 - Add support for webp files as front/rear device type images</li> <li>#6589 - Standardize breadcrumb navigation for power panels and feeds</li> </ul>"},{"location":"release-notes/version-2.11/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#6553 - ProviderNetwork search should match on name</li> <li>#6562 - Disable ordering of secrets by assigned object</li> <li>#6563 - Fix filtering by location for cable connection forms</li> <li>#6584 - Fix ordering of nested inventory items</li> <li>#6602 - Fix deletion of devices with cables attached</li> </ul>"},{"location":"release-notes/version-2.11/#v2116-2021-06-04","title":"v2.11.6 (2021-06-04)","text":""},{"location":"release-notes/version-2.11/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#6544 - Fix migration error when upgrading with VRF(s) defined</li> </ul>"},{"location":"release-notes/version-2.11/#v2115-2021-06-04","title":"v2.11.5 (2021-06-04)","text":"<p>NOTE: This release includes a database migration that calculates and annotates prefix depth. It may impose a noticeable delay on the upgrade process: Users should anticipate roughly one minute of delay per 100 thousand prefixes being updated.</p>"},{"location":"release-notes/version-2.11/#enhancements_5","title":"Enhancements","text":"<ul> <li>#6087 - Improved prefix hierarchy rendering</li> <li>#6487 - Add location filter to cable connection form</li> <li>#6501 - Expose prefix depth and children on REST API serializer</li> <li>#6527 - Support Markdown for report descriptions</li> <li>#6540 - Add a \"flat\" column to the prefix table</li> </ul>"},{"location":"release-notes/version-2.11/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#6064 - Fix object permission assignments for user and group models</li> <li>#6217 - Disallow passing of string values for integer custom fields</li> <li>#6284 - Avoid sending redundant webhooks when adding/removing tags</li> <li>#6492 - Correct tag population in post-change data resulting from REST API changes</li> <li>#6496 - Fix upgrade script when Python installed in nonstandard path</li> <li>#6502 - Correct permissions evaluation for running a report via the REST API</li> <li>#6517 - Fix assignment of user when creating rack reservations via REST API</li> <li>#6525 - Paginate related IPs table under IP address view</li> </ul>"},{"location":"release-notes/version-2.11/#v2114-2021-05-25","title":"v2.11.4 (2021-05-25)","text":""},{"location":"release-notes/version-2.11/#enhancements_6","title":"Enhancements","text":"<ul> <li>#5121 - Add content type filters for tags</li> <li>#6358 - Add search field for VLAN groups</li> <li>#6393 - Add <code>description</code> filter for IP addresses</li> <li>#6400 - Add cyan color choice for plugin buttons</li> <li>#6422 - Enable filtering users by group under admin UI</li> <li>#6441 - Improve UI paginator to optimize page object count</li> </ul>"},{"location":"release-notes/version-2.11/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#6376 - Fix assignment of VLAN groups to clusters, cluster groups via REST API</li> <li>#6398 - Avoid exception when deleting device connected to self via circuit</li> <li>#6426 - Allow assigning virtual chassis member interfaces to LAG on VC master</li> <li>#6438 - Fix missing descriptions and label for device type imports and exports</li> <li>#6465 - Fix typo in installed plugins REST API endpoint</li> <li>#6467 - Fix access to metrics on custom <code>BASE_PATH</code> when login is required</li> <li>#6468 - Disable ordering VLAN groups list by scope object</li> </ul>"},{"location":"release-notes/version-2.11/#v2113-2021-05-07","title":"v2.11.3 (2021-05-07)","text":""},{"location":"release-notes/version-2.11/#enhancements_7","title":"Enhancements","text":"<ul> <li>#6197 - Introduced <code>SESSION_COOKIE_NAME</code> config parameter</li> <li>#6318 - Add OM5 MMF cable type</li> <li>#6351 - Add aggregates count to tenant view</li> <li>#6359 - Enable custom links for organizational and nested group models</li> </ul>"},{"location":"release-notes/version-2.11/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#6240 - Fix display of available VLAN ranges under VLAN group view</li> <li>#6308 - Fix linking of available VLANs in VLAN group view</li> <li>#6309 - Restrict parent VM interface assignment to the parent VM</li> <li>#6312 - Interface device filter should return all virtual chassis interfaces only if device is master</li> <li>#6313 - Fix device type instance count under manufacturer view</li> <li>#6321 - Restore \"add an IP\" button under prefix IPs view</li> <li>#6333 - Fix filtering of circuit terminations by primary key</li> <li>#6339 - Improve ordering of interfaces when viewing virtual chassis master</li> <li>#6350 - Include first &amp; last IP addresses when allocating available IPv6 addresses via the REST API</li> <li>#6355 - Fix caching error when swapping A/Z circuit terminations</li> <li>#6357 - Fix ProviderNetwork nested API serializer</li> <li>#6363 - Correct pre-population of cluster group when creating a cluster</li> <li>#6369 - Fix interface assignment for VLANs in non-scoped groups</li> </ul>"},{"location":"release-notes/version-2.11/#v2112-2021-04-27","title":"v2.11.2 (2021-04-27)","text":""},{"location":"release-notes/version-2.11/#enhancements_8","title":"Enhancements","text":"<ul> <li>#6275 - Linkify rack, device counts on locations list</li> <li>#6278 - Note device locations on cable traces</li> <li>#6287 - Add option to clear assigned max length filter on prefixes list</li> </ul>"},{"location":"release-notes/version-2.11/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>#6236 - Journal entry title should account for configured timezone</li> <li>#6246 - Permit full-length descriptions when creating device components and VM interfaces</li> <li>#6248 - Fix table column reconfiguration under Chrome</li> <li>#6252 - Fix assignment of console port speed values above 19.2kbps</li> <li>#6254 - Disable ordering of space column in racks table</li> <li>#6258 - Fix parent assignment for SiteGroup API serializer</li> <li>#6262 - Support filtering by created/updated time for all relevant objects</li> <li>#6267 - Fix cable tracing API endpoint for circuit terminations</li> <li>#6289 - Fix assignment of VC member interfaces to LAG interfaces</li> </ul>"},{"location":"release-notes/version-2.11/#v2111-2021-04-21","title":"v2.11.1 (2021-04-21)","text":""},{"location":"release-notes/version-2.11/#enhancements_9","title":"Enhancements","text":"<ul> <li>#6161 - Enable ordering of device component tables</li> <li>#6179 - Enable natural ordering for virtual machines</li> <li>#6189 - Add ability to search for locations by name or description</li> <li>#6190 - Allow filtering devices with no location assigned</li> <li>#6210 - Include child locations on location view</li> </ul>"},{"location":"release-notes/version-2.11/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>#6184 - Fix parent object table column in prefix IP addresses list</li> <li>#6188 - Support custom field filtering for regions, site groups, and locations</li> <li>#6196 - Fix object list display for users with read-only permissions</li> <li>#6215 - Restore tenancy section in virtual machine form</li> </ul>"},{"location":"release-notes/version-2.11/#v2110-2021-04-16","title":"v2.11.0 (2021-04-16)","text":"<p>Note: NetBox v2.11 is the last major release that will support Python 3.6. Beginning with NetBox v3.0, Python 3.7 or later will be required.</p>"},{"location":"release-notes/version-2.11/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>All objects now use numeric IDs in their UI view URLs instead of slugs. You may need to update external references to NetBox objects. (Note that this does not affect the REST API.)</li> <li>The UI now uses numeric IDs when filtering object lists. You may need to update external links to filtered object lists. (Note that the slug- and name-based filters will continue to work, however the filter selection fields within the UI will not be automatically populated.)</li> <li>The RackGroup model has been renamed to Location (see #4971). Its REST API endpoint has changed from <code>/api/dcim/rack-groups/</code> to <code>/api/dcim/locations/</code>.</li> <li>The foreign key field <code>group</code> on dcim.Rack has been renamed to <code>location</code>.</li> <li>The foreign key field <code>site</code> on ipam.VLANGroup has been replaced with the <code>scope</code> generic foreign key (see #5284).</li> <li>Custom script ObjectVars no longer support the <code>queryset</code> parameter: Use <code>model</code> instead (see #5995).</li> </ul>"},{"location":"release-notes/version-2.11/#new-features","title":"New Features","text":""},{"location":"release-notes/version-2.11/#journaling-support-151","title":"Journaling Support (#151)","text":"<p>NetBox now supports journaling for all primary objects. The journal is a collection of human-generated notes and comments about an object maintained for historical context. It supplements NetBox's change log to provide additional information about why changes have been made or to convey events which occur outside NetBox. Unlike the change log, in which records typically expire after some time, journal entries persist for the life of the associated object.</p>"},{"location":"release-notes/version-2.11/#parent-interface-assignments-1519","title":"Parent Interface Assignments (#1519)","text":"<p>Virtual device and VM interfaces can now be assigned to a \"parent\" interface by setting the <code>parent</code> field on the interface object. This is helpful for associating subinterfaces with their physical counterpart. For example, you might assign virtual interfaces Gi0/0.100 and Gi0/0.200 as children of the physical interface Gi0/0.</p>"},{"location":"release-notes/version-2.11/#pre-and-post-change-snapshots-in-webhooks-3451","title":"Pre- and Post-Change Snapshots in Webhooks (#3451)","text":"<p>In conjunction with the newly improved change logging functionality (#5913), outgoing webhooks now include both pre- and post-change representations of the modified object. These are available in the rendering context as a dictionary named <code>snapshots</code> with keys <code>prechange</code> and <code>postchange</code>. For example, here are the abridged snapshots resulting from renaming a site and changing its status:</p> <pre><code>\"snapshots\": {\n\"prechange\": {\n\"name\": \"Site 1\",\n\"slug\": \"site-1\",\n\"status\": \"active\",\n...\n},\n\"postchange\": {\n\"name\": \"Site 2\",\n\"slug\": \"site-2\",\n\"status\": \"planned\",\n...\n}\n}\n</code></pre> <p>Note: The pre-change snapshot for a newly created will always be null, as will the post-change snapshot for a deleted object.</p>"},{"location":"release-notes/version-2.11/#mark-as-connected-without-a-cable-3648","title":"Mark as Connected Without a Cable (#3648)","text":"<p>Cable termination objects (circuit terminations, power feeds, and most device components) can now be marked as \"connected\" without actually attaching a cable. This helps simplify the process of modeling an infrastructure boundary where we don't necessarily know or care what is connected to an attachment point, but still need to reflect the termination as being occupied.</p> <p>In addition to the new <code>mark_connected</code> boolean field, the REST API representation of these objects now also includes a read-only boolean field named <code>_occupied</code>. This conveniently returns true if either a cable is attached or <code>mark_connected</code> is true.</p>"},{"location":"release-notes/version-2.11/#allow-assigning-devices-to-locations-4971","title":"Allow Assigning Devices to Locations (#4971)","text":"<p>Devices can now be assigned to locations (formerly known as rack groups) within a site without needing to be assigned to a particular rack. This is handy for assigning devices to rooms or floors within a building where racks are not used. The <code>location</code> foreign key field has been added to the Device model to support this.</p>"},{"location":"release-notes/version-2.11/#dynamic-object-exports-4999","title":"Dynamic Object Exports (#4999)","text":"<p>When exporting a list of objects in NetBox, users now have the option of selecting the \"current view\". This will render CSV output matching the current configuration of the table being viewed. For example, if you modify the sites list to display only the site name, tenant, and status, the rendered CSV will include only these columns, and they will appear in the order chosen.</p> <p>The legacy static export behavior has been retained to ensure backward compatibility for dependent integrations. However, users are strongly encouraged to adapt custom export templates where needed as this functionality will be removed in v3.0.</p>"},{"location":"release-notes/version-2.11/#variable-scope-support-for-vlan-groups-5284","title":"Variable Scope Support for VLAN Groups (#5284)","text":"<p>In previous releases, VLAN groups could be assigned only to a site. To afford more flexibility in conveying the true scope of an L2 domain, a VLAN group can now be assigned to a region, site group (new in v2.11), site, location, or rack. VLANs assigned to a group will be available only to devices and virtual machines which exist within its scope.</p> <p>For example, a VLAN within a group assigned to a location will be available only to devices assigned to that location (or one of its child locations), or to a rack within that location.</p>"},{"location":"release-notes/version-2.11/#new-site-group-model-5892","title":"New Site Group Model (#5892)","text":"<p>This release introduces the new SiteGroup model, which can be used to organize sites similar to the existing Region model. Whereas regions are intended for geographically arranging sites into countries, states, and so on, the new site group model can be used to organize sites by functional role or other arbitrary classification. Using regions and site groups in conjunction provides two dimensions along which sites can be organized, offering greater flexibility to the user.</p>"},{"location":"release-notes/version-2.11/#improved-change-logging-5913","title":"Improved Change Logging (#5913)","text":"<p>The ObjectChange model (which is used to record the creation, modification, and deletion of NetBox objects) now explicitly records the pre-change and post-change state of each object, rather than only the post-change state. This was done to present a more clear depiction of each change being made, and to prevent the erroneous association of a previous unlogged change with its successor.</p>"},{"location":"release-notes/version-2.11/#provider-network-modeling-5986","title":"Provider Network Modeling (#5986)","text":"<p>A new provider network model has been introduced to represent the boundary of a network that exists outside the scope of NetBox. Each instance of this model must be assigned to a provider, and circuits can now terminate to either provider networks or to sites. The use of this model will likely be extended by future releases to support overlay and virtual circuit modeling.</p>"},{"location":"release-notes/version-2.11/#enhancements_10","title":"Enhancements","text":"<ul> <li>#4833 - Allow assigning config contexts by device type</li> <li>#5344 - Add support for custom fields in tables</li> <li>#5370 - Extend custom field support to organizational models</li> <li>#5375 - Add <code>speed</code> attribute to console port models</li> <li>#5401 - Extend custom field support to device component models</li> <li>#5425 - Create separate tabs for VMs and devices under the cluster view</li> <li>#5451 - Add support for multiple-selection custom fields</li> <li>#5608 - Add REST API endpoint for custom links</li> <li>#5610 - Add REST API endpoint for webhooks</li> <li>#5757 - Add unique identifier to every object view</li> <li>#5830 - Add <code>as_attachment</code> to ExportTemplate to control download behavior</li> <li>#5848 - Filter custom fields by content type in format <code>&lt;app_label&gt;.&lt;model&gt;</code></li> <li>#5891 - Add <code>display</code> field to all REST API serializers</li> <li>#5894 - Use primary keys when filtering object lists by related objects in the UI</li> <li>#5895 - Rename RackGroup to Location</li> <li>#5901 - Add <code>created</code> and <code>last_updated</code> fields to device component models</li> <li>#5971 - Add dedicated views for organizational models</li> <li>#5972 - Enable bulk editing for organizational models</li> <li>#5975 - Allow partial (decimal) vCPU allocations for virtual machines</li> <li>#6001 - Paginate component tables under device views</li> <li>#6038 - Include tagged objects list on tag view</li> <li>#6088 - Improved table configuration form</li> <li>#6097 - Redirect old slug-based object views</li> <li>#6125 - Add locations count to home page</li> <li>#6146 - Add bulk disconnect support for power feeds</li> <li>#6149 - Support image attachments for locations</li> </ul>"},{"location":"release-notes/version-2.11/#bug-fixes-from-v211-beta1","title":"Bug Fixes (from v2.11-beta1)","text":"<ul> <li>#5583 - Eliminate redundant change records when adding/removing tags</li> <li>#6100 - Fix VM interfaces table \"add interfaces\" link</li> <li>#6104 - Fix location column on racks table</li> <li>#6105 - Hide checkboxes for VMs under cluster VMs view</li> <li>#6106 - Allow assigning a virtual interface as the parent of an existing interface</li> <li>#6107 - Fix rack selection field on device form</li> <li>#6110 - Fix handling of TemplateColumn values for table export</li> <li>#6123 - Prevent device from being assigned to mismatched site and location</li> <li>#6124 - Location <code>parent</code> filter should return all child locations (not just those directly assigned)</li> <li>#6130 - Improve display of assigned models in custom fields list</li> <li>#6155 - Fix admin links for plugins, background tasks</li> <li>#6171 - Fix display of horizontally-scrolling object lists</li> <li>#6173 - Fix assigned device/VM count when bulk editing/deleting device roles</li> <li>#6176 - Correct position of MAC address field when creating VM interfaces</li> <li>#6177 - Prevent VM interface from being assigned as its own parent</li> </ul>"},{"location":"release-notes/version-2.11/#other-changes_1","title":"Other Changes","text":"<ul> <li>#1638 - Migrate all primary keys to 64-bit integers</li> <li>#5873 - Use numeric IDs in all object URLs</li> <li>#5938 - Deprecated support for Python 3.6</li> <li>#5990 - Deprecated <code>display_field</code> parameter for custom script ObjectVar and MultiObjectVar fields</li> <li>#5995 - Dropped backward compatibility for <code>queryset</code> parameter on ObjectVar and MultiObjectVar (use <code>model</code> instead)</li> <li>#6014 - Moved the virtual machine interfaces list to a separate view</li> <li>#6071 - Cable traces now traverse circuits</li> </ul>"},{"location":"release-notes/version-2.11/#rest-api-changes","title":"REST API Changes","text":"<ul> <li>All primary keys are now 64-bit integers</li> <li>All model serializers now include a <code>display</code> field to be used for the presentation of an object to a human user</li> <li>All device components<ul> <li>Added support for custom fields</li> <li>Added <code>created</code> and <code>last_updated</code> fields to track object creation and modification</li> </ul> </li> <li>All device component templates<ul> <li>Added <code>created</code> and <code>last_updated</code> fields to track object creation and modification</li> </ul> </li> <li>All organizational models<ul> <li>Added support for custom fields</li> </ul> </li> <li>All cable termination models (cabled device components, power feeds, and circuit terminations)<ul> <li>Added <code>mark_connected</code> boolean field to force connection status</li> <li>Added <code>_occupied</code> read-only boolean field as common attribute for determining whether an object is occupied</li> </ul> </li> <li>Renamed RackGroup to Location<ul> <li>The <code>/dcim/rack-groups/</code> endpoint is now <code>/dcim/locations/</code></li> </ul> </li> <li>circuits.CircuitTermination<ul> <li>Added the <code>provider_network</code> field</li> <li>Removed the <code>connected_endpoint</code>, <code>connected_endpoint_type</code>, and <code>connected_endpoint_reachable</code> fields</li> <li>The <code>trace/</code> endpoint has been replaced with <code>paths/</code></li> </ul> </li> <li>circuits.ProviderNetwork<ul> <li>Added the <code>/api/circuits/provider-networks/</code> endpoint</li> </ul> </li> <li>dcim.Device<ul> <li>Added the <code>location</code> field</li> </ul> </li> <li>dcim.Interface<ul> <li>Added the <code>parent</code> field</li> </ul> </li> <li>dcim.PowerPanel<ul> <li>Renamed <code>rack_group</code> field to <code>location</code></li> </ul> </li> <li>dcim.Rack<ul> <li>Renamed <code>group</code> field to <code>location</code></li> </ul> </li> <li>dcim.Site<ul> <li>Added the <code>group</code> foreign key field to SiteGroup</li> </ul> </li> <li>dcim.SiteGroup<ul> <li>Added the <code>/api/dcim/site-groups/</code> endpoint</li> </ul> </li> <li>extras.ConfigContext<ul> <li>Added the <code>site_groups</code> many-to-many field to track the assignment of ConfigContexts to SiteGroups</li> </ul> </li> <li>extras.CustomField<ul> <li>Added new custom field type: <code>multi-select</code></li> </ul> </li> <li>extras.CustomLink<ul> <li>Added the <code>/api/extras/custom-links/</code> endpoint</li> </ul> </li> <li>extras.ExportTemplate<ul> <li>Added the <code>as_attachment</code> boolean field</li> </ul> </li> <li>extras.ObjectChange<ul> <li>Added the <code>prechange_data</code> field</li> <li>Renamed <code>object_data</code> to <code>postchange_data</code></li> </ul> </li> <li>extras.Webhook<ul> <li>Added the <code>/api/extras/webhooks/</code> endpoint</li> </ul> </li> <li>ipam.VLANGroup<ul> <li>Added the <code>scope_type</code>, <code>scope_id</code>, and <code>scope</code> fields (<code>scope</code> is a generic foreign key)</li> <li>Dropped the <code>site</code> foreign key field</li> </ul> </li> <li>virtualization.VirtualMachine<ul> <li><code>vcpus</code> has been changed from an integer to a decimal value</li> </ul> </li> <li>virtualization.VMInterface<ul> <li>Added the <code>parent</code> field</li> </ul> </li> </ul>"},{"location":"release-notes/version-2.2/","title":"NetBox v2.2 Release Notes","text":""},{"location":"release-notes/version-2.2/#v2210-2018-02-21","title":"v2.2.10 (2018-02-21)","text":""},{"location":"release-notes/version-2.2/#enhancements","title":"Enhancements","text":"<ul> <li>#78 - Extended topology maps to support console and power connections</li> <li>#1693 - Allow specifying loose or exact matching for custom field filters</li> <li>#1714 - Standardized CSV export functionality for all object lists</li> <li>#1876 - Added explanatory title text to disabled NAPALM buttons on device view</li> <li>#1885 - Added a device filter field for primary IP</li> </ul>"},{"location":"release-notes/version-2.2/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#1858 - Include device/VM count for cluster list in global search results</li> <li>#1859 - Implemented support for line breaks within CSV fields</li> <li>#1860 - Do not populate initial values for custom fields when editing objects in bulk</li> <li>#1869 - Corrected ordering of VRFs with duplicate names</li> <li>#1886 - Allow setting the primary IPv4/v6 address for a virtual machine via the web UI</li> </ul>"},{"location":"release-notes/version-2.2/#v229-2018-01-31","title":"v2.2.9 (2018-01-31)","text":""},{"location":"release-notes/version-2.2/#enhancements_1","title":"Enhancements","text":"<ul> <li>#144 - Implemented bulk import/edit/delete views for InventoryItems</li> <li>#1073 - Include prefixes/IPs from all VRFs when viewing the children of a container prefix in the global table</li> <li>#1366 - Enable searching for regions by name/slug</li> <li>#1406 - Display tenant description as title text in object tables</li> <li>#1824 - Add virtual machine count to platforms list</li> <li>#1835 - Consistent positioning of previous/next rack buttons</li> </ul>"},{"location":"release-notes/version-2.2/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#1621 - Tweaked LLDP interface name evaluation logic</li> <li>#1765 - Improved rendering of null options for model choice fields in filter forms</li> <li>#1807 - Populate VRF from parent when creating a new prefix</li> <li>#1809 - Populate tenant assignment from parent when creating a new prefix</li> <li>#1818 - InventoryItem API serializer no longer requires specifying a null value for items with no parent</li> <li>#1845 - Correct display of VMs in list with no role assigned</li> <li>#1850 - Fix TypeError when attempting IP address import if only unnamed devices exist</li> </ul>"},{"location":"release-notes/version-2.2/#v228-2017-12-20","title":"v2.2.8 (2017-12-20)","text":""},{"location":"release-notes/version-2.2/#enhancements_2","title":"Enhancements","text":"<ul> <li>#1771 - Added name filter for racks</li> <li>#1772 - Added position filter for devices</li> <li>#1773 - Moved child prefixes table to its own view</li> <li>#1774 - Include a button to refine search results for all object types under global search</li> <li>#1784 - Added <code>cluster_type</code> filters for virtual machines</li> </ul>"},{"location":"release-notes/version-2.2/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#1766 - Fixed display of \"select all\" button on device power outlets list</li> <li>#1767 - Use proper template for 404 responses</li> <li>#1778 - Preserve initial VRF assignment when adding IP addresses in bulk from a prefix</li> <li>#1783 - Added <code>vm_role</code> filter for device roles</li> <li>#1785 - Omit filter forms from browsable API</li> <li>#1787 - Added missing site field to virtualization cluster CSV export</li> </ul>"},{"location":"release-notes/version-2.2/#v227-2017-12-07","title":"v2.2.7 (2017-12-07)","text":""},{"location":"release-notes/version-2.2/#enhancements_3","title":"Enhancements","text":"<ul> <li>#1722 - Added virtual machine count to site view</li> <li>#1737 - Added a <code>contains</code> API filter to find all prefixes containing a given IP or prefix</li> </ul>"},{"location":"release-notes/version-2.2/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#1712 - Corrected tenant inheritance for new IP addresses created from a parent prefix</li> <li>#1721 - Differentiated child IP count from utilization percentage for prefixes</li> <li>#1740 - Delete session_key cookie on logout</li> <li>#1741 - Fixed Unicode support for secret plaintexts</li> <li>#1743 - Include number of instances for device types in global search</li> <li>#1751 - Corrected filtering for IPv6 addresses containing letters</li> <li>#1756 - Improved natural ordering of console server ports and power outlets</li> </ul>"},{"location":"release-notes/version-2.2/#v226-2017-11-16","title":"v2.2.6 (2017-11-16)","text":""},{"location":"release-notes/version-2.2/#enhancements_4","title":"Enhancements","text":"<ul> <li>#1669 - Clicking \"add an IP\" from the prefix view will default to the first available IP within the prefix</li> </ul>"},{"location":"release-notes/version-2.2/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#1397 - Display global search in navigation menu unless display is less than 1200px wide</li> <li>#1599 - Reduce mobile cut-off for navigation menu to 960px</li> <li>#1715 - Added missing import buttons on object lists</li> <li>#1717 - Fixed interface validation for virtual machines</li> <li>#1718 - Set empty label to \"Global\" or VRF field in IP assignment form</li> </ul>"},{"location":"release-notes/version-2.2/#v225-2017-11-14","title":"v2.2.5 (2017-11-14)","text":""},{"location":"release-notes/version-2.2/#enhancements_5","title":"Enhancements","text":"<ul> <li>#1512 - Added a view to search for an IP address being assigned to an interface</li> <li>#1679 - Added IP address roles to device/VM interface lists</li> <li>#1683 - Replaced default 500 handler with custom middleware to provide preliminary troubleshooting assistance</li> <li>#1684 - Replaced prefix <code>parent</code> filter with <code>within</code> and <code>within_include</code></li> </ul>"},{"location":"release-notes/version-2.2/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#1471 - Correct bulk selection of IP addresses within a prefix assigned to a VRF</li> <li>#1642 - Validate device type classification when creating console server ports and power outlets</li> <li>#1650 - Correct numeric ordering for interfaces with no alphabetic type</li> <li>#1676 - Correct filtering of child prefixes upon bulk edit/delete from the parent prefix view</li> <li>#1689 - Disregard IP address mask when filtering for child IPs of a prefix</li> <li>#1696 - Fix for NAPALM v2.0+</li> <li>#1699 - Correct nested representation in the API of primary IPs for virtual machines and add missing primary_ip property</li> <li>#1701 - Fixed validation in <code>extras/0008_reports.py</code> migration for certain versions of PostgreSQL</li> <li>#1703 - Added API serializer validation for custom integer fields</li> <li>#1705 - Fixed filtering of devices with a status of offline</li> </ul>"},{"location":"release-notes/version-2.2/#v224-2017-10-31","title":"v2.2.4 (2017-10-31)","text":""},{"location":"release-notes/version-2.2/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#1670 - Fixed server error when calling certain filters (regression from #1649)</li> </ul>"},{"location":"release-notes/version-2.2/#v223-2017-10-31","title":"v2.2.3 (2017-10-31)","text":""},{"location":"release-notes/version-2.2/#enhancements_6","title":"Enhancements","text":"<ul> <li>#999 - Display devices on which circuits are terminated in circuits list</li> <li>#1491 - Added initial data for the virtualization app</li> <li>#1620 - Loosen IP address search filter to match all IPs that start with the given string</li> <li>#1631 - Added a <code>post_run</code> method to the Report class</li> <li>#1666 - Allow modifying the owner of a rack reservation</li> </ul>"},{"location":"release-notes/version-2.2/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#1513 - Correct filtering of custom field choices</li> <li>#1603 - Hide selection checkboxes for tables with no available actions</li> <li>#1618 - Allow bulk deletion of all virtual machines</li> <li>#1619 - Correct text-based filtering of IP network and address fields</li> <li>#1624 - Add VM count to device roles table</li> <li>#1634 - Cluster should not be a required field when importing child devices</li> <li>#1649 - Correct filtering on null values (e.g. ?tenant_id=0) for django-filters v1.1.0+</li> <li>#1653 - Remove outdated description for DeviceType's <code>is_network_device</code> flag</li> <li>#1664 - Added missing <code>serial</code> field in default rack CSV export</li> </ul>"},{"location":"release-notes/version-2.2/#v222-2017-10-17","title":"v2.2.2 (2017-10-17)","text":""},{"location":"release-notes/version-2.2/#enhancements_7","title":"Enhancements","text":"<ul> <li>#1580 - Allow cluster assignment when bulk importing devices</li> <li>#1587 - Add primary IP column for virtual machines in global search results</li> </ul>"},{"location":"release-notes/version-2.2/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#1498 - Avoid duplicating nodes when generating topology maps</li> <li>#1579 - Devices already assigned to a cluster cannot be added to a different cluster</li> <li>#1582 - Add <code>virtual_machine</code> attribute to IPAddress</li> <li>#1584 - Colorized virtual machine role column</li> <li>#1585 - Fixed slug-based filtering of virtual machines</li> <li>#1605 - Added clusters and virtual machines to object list for global search</li> <li>#1609 - Added missing <code>virtual_machine</code> field to IP address interface serializer</li> </ul>"},{"location":"release-notes/version-2.2/#v221-2017-10-12","title":"v2.2.1 (2017-10-12)","text":""},{"location":"release-notes/version-2.2/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#1576 - Moved PostgreSQL validation logic into the relevant migration (fixed ImproperlyConfigured exception on init)</li> </ul>"},{"location":"release-notes/version-2.2/#v220-2017-10-12","title":"v2.2.0 (2017-10-12)","text":"<p>Note: This release requires PostgreSQL 9.4 or higher. Do not attempt to upgrade unless you are running at least PostgreSQL 9.4.</p> <p>Note: The release replaces the deprecated pycrypto library with pycryptodome. The upgrade script has been extended to automatically uninstall the old library, but please verify your installed packages with <code>pip freeze | grep pycrypto</code> if you run into problems.</p>"},{"location":"release-notes/version-2.2/#new-features","title":"New Features","text":""},{"location":"release-notes/version-2.2/#virtual-machines-and-clusters-142","title":"Virtual Machines and Clusters (#142)","text":"<p>Our second-most popular feature request has arrived! NetBox now supports the creation of virtual machines, which can be assigned virtual interfaces and IP addresses. VMs are arranged into clusters, each of which has a type and (optionally) a group.</p>"},{"location":"release-notes/version-2.2/#custom-validation-reports-1511","title":"Custom Validation Reports (#1511)","text":"<p>Users can now create custom reports which are run to validate data in NetBox. Reports work very similar to Python unit tests: Each report inherits from NetBox's Report class and contains one or more test method. Reports can be run and retrieved via the web UI, API, or CLI. See the docs for more info.</p>"},{"location":"release-notes/version-2.2/#enhancements_8","title":"Enhancements","text":"<ul> <li>#494 - Include asset tag in device info pop-up on rack elevation</li> <li>#1444 - Added a <code>serial</code> field to the rack model</li> <li>#1479 - Added an IP address role for CARP</li> <li>#1506 - Extended rack facility ID field from 30 to 50 characters</li> <li>#1510 - Added ability to search by name when adding devices to a cluster</li> <li>#1527 - Replace deprecated pycrypto library with pycryptodome</li> <li>#1551 - Added API endpoints listing static field choices for each app</li> <li>#1556 - Added CPAK, CFP2, and CFP4 100GE interface form factors</li> <li>Added CSV import views for all object types</li> </ul>"},{"location":"release-notes/version-2.2/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>#1550 - Corrected interface connections link in navigation menu</li> <li>#1554 - Don't require form_factor when creating an interface assigned to a virtual machine</li> <li>#1557 - Added filtering for virtual machine interfaces</li> <li>#1567 - Prompt user for session key when importing secrets</li> </ul>"},{"location":"release-notes/version-2.2/#api-changes","title":"API Changes","text":"<ul> <li>Introduced the virtualization app and its associated endpoints at <code>/api/virtualization</code></li> <li>Added the <code>/api/extras/reports</code> endpoint for fetching and running reports</li> <li>The <code>ipam.Service</code> and <code>dcim.Interface</code> models now have a <code>virtual_machine</code> field in addition to the <code>device</code> field. Only one of the two fields may be defined for each object</li> <li>Added a <code>vm_role</code> field to <code>dcim.DeviceRole</code>, which indicates whether a role is suitable for assigned to a virtual machine</li> <li>Added a <code>serial</code> field to 'dcim.Rack` for serial numbers</li> <li>Each app now has a <code>_choices</code> endpoint, which lists the available options for all model field with static choices (e.g. interface form factors)</li> </ul>"},{"location":"release-notes/version-2.3/","title":"NetBox v2.3 Release Notes","text":""},{"location":"release-notes/version-2.3/#v237-2018-07-26","title":"v2.3.7 (2018-07-26)","text":""},{"location":"release-notes/version-2.3/#enhancements","title":"Enhancements","text":"<ul> <li>#2166 - Enable partial matching on device asset_tag during search</li> </ul>"},{"location":"release-notes/version-2.3/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#1977 - Fixed exception when creating a virtual chassis with a non-master device in position 1</li> <li>#1992 - Isolate errors when one of multiple NAPALM methods fails</li> <li>#2202 - Ditched half-baked concept of tenancy inheritance via VRF</li> <li>#2222 - IP addresses created via the <code>available-ips</code> API endpoint should have the same mask as their parent prefix (not /32)</li> <li>#2231 - Remove <code>get_absolute_url()</code> from DeviceRole (can apply to devices or VMs)</li> <li>#2250 - Include stat counters on report result navigation</li> <li>#2255 - Corrected display of results in reports list</li> <li>#2256 - Prevent navigation menu overlap when jumping to test results on report page</li> <li>#2257 - Corrected casting of RIR utilization stats as floats</li> <li>#2266 - Permit additional logging of exceptions beyond custom middleware</li> </ul>"},{"location":"release-notes/version-2.3/#v236-2018-07-16","title":"v2.3.6 (2018-07-16)","text":""},{"location":"release-notes/version-2.3/#enhancements_1","title":"Enhancements","text":"<ul> <li>#2107 - Added virtual chassis to global search</li> <li>#2125 - Show child status in device bay list</li> </ul>"},{"location":"release-notes/version-2.3/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#2214 - Error when assigning a VLAN to an interface on a VM in a cluster with no assigned site</li> <li>#2239 - Pin django-filter to version 1.1.0</li> </ul>"},{"location":"release-notes/version-2.3/#v235-2018-07-02","title":"v2.3.5 (2018-07-02)","text":""},{"location":"release-notes/version-2.3/#enhancements_2","title":"Enhancements","text":"<ul> <li>#2159 - Allow custom choice field to specify a default choice</li> <li>#2177 - Include device serial number in rack elevation pop-up</li> <li>#2194 - Added <code>address</code> filter to IPAddress model</li> </ul>"},{"location":"release-notes/version-2.3/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#1826 - Corrected description of security parameters under API definition</li> <li>#2021 - Fix recursion error when viewing API docs under Python 3.4</li> <li>#2064 - Disable calls to online swagger validator</li> <li>#2173 - Fixed IndexError when automatically allocating IP addresses from large IPv6 prefixes</li> <li>#2181 - Raise validation error on invalid <code>prefix_length</code> when allocating next-available prefix</li> <li>#2182 - ValueError can be raised when viewing the interface connections table</li> <li>#2191 - Added missing static choices to circuits and DCIM API endpoints</li> <li>#2192 - Prevent a 0U device from being assigned to a rack position</li> </ul>"},{"location":"release-notes/version-2.3/#v234-2018-06-07","title":"v2.3.4 (2018-06-07)","text":""},{"location":"release-notes/version-2.3/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#2066 - Catch <code>AddrFormatError</code> exception on invalid IP addresses</li> <li>#2075 - Enable tenant assignment when creating a rack reservation via the API</li> <li>#2083 - Add missing export button to rack roles list view</li> <li>#2087 - Don't overwrite existing vc_position of master device when creating a virtual chassis</li> <li>#2093 - Fix link to circuit termination in device interfaces table</li> <li>#2097 - Fixed queryset-based bulk deletion of clusters and regions</li> <li>#2098 - Fixed missing checkboxes for host devices in cluster view</li> <li>#2127 - Prevent non-conntectable interfaces from being connected</li> <li>#2143 - Accept null value for empty time zone field</li> <li>#2148 - Do not force timezone selection when editing sites in bulk</li> <li>#2150 - Fix display of LLDP neighbors when interface name contains a colon</li> </ul>"},{"location":"release-notes/version-2.3/#v233-2018-04-19","title":"v2.3.3 (2018-04-19)","text":""},{"location":"release-notes/version-2.3/#enhancements_3","title":"Enhancements","text":"<ul> <li>#1990 - Improved search function when assigning an IP address to an interface</li> </ul>"},{"location":"release-notes/version-2.3/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#1975 - Correct filtering logic for custom boolean fields</li> <li>#1988 - Order interfaces naturally when bulk renaming</li> <li>#1993 - Corrected status choices in site CSV import form</li> <li>#1999 - Added missing description field to site edit form</li> <li>#2012 - Fixed deselection of an IP address as the primary IP for its parent device/VM</li> <li>#2014 - Allow assignment of VLANs to VM interfaces via the API</li> <li>#2019 - Avoid casting oversized numbers as integers</li> <li>#2022 - Show 0 for zero-value fields on CSV export</li> <li>#2023 - Manufacturer should not be a required field when importing platforms</li> <li>#2037 - Fixed IndexError exception when attempting to create a new rack reservation</li> </ul>"},{"location":"release-notes/version-2.3/#v232-2018-03-22","title":"v2.3.2 (2018-03-22)","text":""},{"location":"release-notes/version-2.3/#enhancements_4","title":"Enhancements","text":"<ul> <li>#1586 - Extend bulk interface creation to support alphanumeric characters</li> <li>#1866 - Introduced AnnotatedMultipleChoiceField for filter forms</li> <li>#1930 - Switched to drf-yasg for Swagger API documentation</li> <li>#1944 - Enable assigning VLANs to virtual machine interfaces</li> <li>#1945 - Implemented a VLAN members view</li> <li>#1949 - Added a button to view elevations on rack groups list</li> <li>#1952 - Implemented a more robust mechanism for assigning VLANs to interfaces</li> </ul>"},{"location":"release-notes/version-2.3/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#1948 - Fix TypeError when attempting to add a member to an existing virtual chassis</li> <li>#1951 - Fix TypeError exception when importing platforms</li> <li>#1953 - Ignore duplicate IPs when calculating prefix utilization</li> <li>#1955 - Require a plaintext value when creating a new secret</li> <li>#1978 - Include all virtual chassis member interfaces in LLDP neighbors view</li> <li>#1980 - Fixed bug when trying to nullify a selection custom field under Python 2</li> </ul>"},{"location":"release-notes/version-2.3/#v231-2018-03-01","title":"v2.3.1 (2018-03-01)","text":""},{"location":"release-notes/version-2.3/#enhancements_5","title":"Enhancements","text":"<ul> <li>#1910 - Added filters for cluster group and cluster type</li> </ul>"},{"location":"release-notes/version-2.3/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#1915 - Redirect to device view after deleting a component</li> <li>#1919 - Prevent exception when attempting to create a virtual machine without selecting devices</li> <li>#1921 - Ignore ManyToManyFields when validating a new object created via the API</li> <li>#1924 - Include VID in VLAN lists when editing an interface</li> <li>#1926 - Prevent reassignment of parent device when bulk editing VC member interfaces</li> <li>#1927 - Include all VC member interfaces on A side when creating a new interface connection</li> <li>#1928 - Fixed form validation when modifying VLANs assigned to an interface</li> <li>#1934 - Fixed exception when rendering export template on an object type with custom fields assigned</li> <li>#1935 - Correct API validation of VLANs assigned to interfaces</li> <li>#1936 - Trigger validation error when attempting to create a virtual chassis without specifying member positions</li> </ul>"},{"location":"release-notes/version-2.3/#v230-2018-02-26","title":"v2.3.0 (2018-02-26)","text":""},{"location":"release-notes/version-2.3/#new-features","title":"New Features","text":""},{"location":"release-notes/version-2.3/#virtual-chassis-99","title":"Virtual Chassis (#99)","text":"<p>A virtual chassis represents a set of physical devices with a shared control plane; for example, a stack of switches managed as a single device. Viewing the master device of a virtual chassis will show all member interfaces and IP addresses.</p>"},{"location":"release-notes/version-2.3/#interface-vlan-assignments-150","title":"Interface VLAN Assignments (#150)","text":"<p>Interfaces can now be assigned an 802.1Q mode (access or trunked) and associated with particular VLANs. Thanks to John Anderson for his work on this!</p>"},{"location":"release-notes/version-2.3/#bulk-object-creation-via-the-api-1553","title":"Bulk Object Creation via the API (#1553)","text":"<p>The REST API now supports the creation of multiple objects of the same type using a single POST request. For example, to create multiple devices:</p> <pre><code>curl -X POST -H \"Authorization: Token &lt;TOKEN&gt;\" -H \"Content-Type: application/json\" -H \"Accept: application/json; indent=4\" http://localhost:8000/api/dcim/devices/ --data '[\n{\"name\": \"device1\", \"device_type\": 24, \"device_role\": 17, \"site\": 6},\n{\"name\": \"device2\", \"device_type\": 24, \"device_role\": 17, \"site\": 6},\n{\"name\": \"device3\", \"device_type\": 24, \"device_role\": 17, \"site\": 6},\n]'\n</code></pre> <p>Bulk creation is all-or-none: If any of the creations fails, the entire operation is rolled back.</p>"},{"location":"release-notes/version-2.3/#automatic-provisioning-of-next-available-prefixes-1694","title":"Automatic Provisioning of Next Available Prefixes (#1694)","text":"<p>Similar to IP addresses, NetBox now supports automated provisioning of available prefixes from within a parent prefix. For example, to retrieve the next three available /28s within a parent /24:</p> <pre><code>curl -X POST -H \"Authorization: Token &lt;TOKEN&gt;\" -H \"Content-Type: application/json\" -H \"Accept: application/json; indent=4\" http://localhost:8000/api/ipam/prefixes/10153/available-prefixes/ --data '[\n{\"prefix_length\": 28},\n{\"prefix_length\": 28},\n{\"prefix_length\": 28}\n]'\n</code></pre> <p>If the parent prefix cannot accommodate all requested prefixes, the operation is cancelled and no new prefixes are created.</p>"},{"location":"release-notes/version-2.3/#bulk-renaming-of-devicevm-components-1781","title":"Bulk Renaming of Device/VM Components (#1781)","text":"<p>Device components (interfaces, console ports, etc.) can now be renamed in bulk via the web interface. This was implemented primarily to support the bulk renumbering of interfaces whose parent is part of a virtual chassis.</p>"},{"location":"release-notes/version-2.3/#enhancements_6","title":"Enhancements","text":"<ul> <li>#1283 - Added a <code>time_zone</code> field to the site model</li> <li>#1321 - Added <code>created</code> and <code>last_updated</code> fields for relevant models to their API serializers</li> <li>#1553 - Introduced support for bulk object creation via the API</li> <li>#1592 - Added tenancy assignment for rack reservations</li> <li>#1744 - Allow associating a platform with a specific manufacturer</li> <li>#1758 - Added a <code>status</code> field to the site model</li> <li>#1821 - Added a <code>description</code> field to the site model</li> <li>#1864 - Added a <code>status</code> field to the circuit model</li> </ul>"},{"location":"release-notes/version-2.3/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#1136 - Enforce model validation during bulk update</li> <li>#1645 - Simplified interface serialzier for IP addresses and optimized API view queryset</li> <li>#1838 - Fix KeyError when attempting to create a VirtualChassis with no devices selected</li> <li>#1847 - RecursionError when a virtual chasis master device has no name</li> <li>#1848 - Allow null value for interface encapsulation mode</li> <li>#1867 - Allow filtering on device status with multiple values</li> <li>#1881* - Fixed bulk editing of interface 802.1Q settings</li> <li>#1884* - Provide additional context to identify devices when creating/editing a virtual chassis</li> <li>#1907 - Allow removing an IP as the primary for a device when editing the IP directly</li> </ul> <p>* New since v2.3-beta2</p>"},{"location":"release-notes/version-2.3/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Constants representing device status have been renamed for clarity (for example, <code>STATUS_ACTIVE</code> is now <code>DEVICE_STATUS_ACTIVE</code>). Custom validation reports will need to be updated if they reference any of these constants.</li> </ul>"},{"location":"release-notes/version-2.3/#api-changes","title":"API Changes","text":"<ul> <li>API creation calls now accept either a single JSON object or a list of JSON objects. If multiple objects are passed and one or more them fail validation, no objects will be created.</li> <li>Added <code>created</code> and <code>last_updated</code> fields for objects inheriting from CreatedUpdatedModel.</li> <li>Removed the <code>parent</code> filter for prefixes (use <code>within</code> or <code>within_include</code> instead).</li> <li>The IP address serializer now includes only a minimal nested representation of the assigned interface (if any) and its parent device or virtual machine.</li> <li>The rack reservation serializer now includes a nested representation of its owning user (as well as the assigned tenant, if any).</li> <li>Added endpoints for virtual chassis and VC memberships.</li> <li>Added <code>status</code>, <code>time_zone</code> (pytz format), and <code>description</code> fields to dcim.Site.</li> <li>Added a <code>manufacturer</code> foreign key field on dcim.Platform.</li> <li>Added a <code>status</code> field on circuits.Circuit.</li> </ul>"},{"location":"release-notes/version-2.4/","title":"NetBox v2.4 Release Notes","text":""},{"location":"release-notes/version-2.4/#v249-2018-12-07","title":"v2.4.9 (2018-12-07)","text":""},{"location":"release-notes/version-2.4/#enhancements","title":"Enhancements","text":"<ul> <li>#2089 - Add SONET interface form factors</li> <li>#2495 - Enable deep-merging of config context data</li> <li>#2597 - Add FibreChannel SFP28 (32GFC) interface form factor</li> </ul>"},{"location":"release-notes/version-2.4/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#2400 - Correct representation of nested object assignment in API docs</li> <li>#2576 - Correct type for count_* fields in site API representation</li> <li>#2606 - Fixed filtering for interfaces with a virtual form factor</li> <li>#2611 - Fix error handling when assigning a clustered device to a different site</li> <li>#2613 - Decrease live search minimum characters to three</li> <li>#2615 - Tweak live search widget to use brief format for API requests</li> <li>#2623 - Removed the need to pass the model class to the rqworker process for webhooks</li> <li>#2634 - Enforce consistent representation of unnamed devices in rack view</li> </ul>"},{"location":"release-notes/version-2.4/#v248-2018-11-20","title":"v2.4.8 (2018-11-20)","text":""},{"location":"release-notes/version-2.4/#enhancements_1","title":"Enhancements","text":"<ul> <li>#2490 - Added bulk editing for config contexts</li> <li>#2557 - Added object view for tags</li> </ul>"},{"location":"release-notes/version-2.4/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#2473 - Fix encoding of long (&gt;127 character) secrets</li> <li>#2558 - Filter on all tags when multiple are passed</li> <li>#2565 - Improved rendering of Markdown tables</li> <li>#2575 - Correct model specified for rack roles table</li> <li>#2588 - Catch all exceptions from failed NAPALM API Calls</li> <li>#2589 - Virtual machine API serializer should require cluster assignment</li> </ul>"},{"location":"release-notes/version-2.4/#v247-2018-11-06","title":"v2.4.7 (2018-11-06)","text":""},{"location":"release-notes/version-2.4/#enhancements_2","title":"Enhancements","text":"<ul> <li>#2388 - Enable filtering of devices/VMs by region</li> <li>#2427 - Allow filtering of interfaces by assigned VLAN or VLAN ID</li> <li>#2512 - Add device field to inventory item filter form</li> </ul>"},{"location":"release-notes/version-2.4/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#2502 - Allow duplicate VIPs inside a uniqueness-enforced VRF</li> <li>#2514 - Prevent new connections to already connected interfaces</li> <li>#2515 - Only use django-rq admin tmeplate if webhooks are enabled</li> <li>#2528 - Enable creating circuit terminations with interface assignment via API</li> <li>#2549 - Changed naming of <code>peer_device</code> and <code>peer_interface</code> on API /dcim/connected-device/ endpoint to use underscores</li> </ul>"},{"location":"release-notes/version-2.4/#v246-2018-10-05","title":"v2.4.6 (2018-10-05)","text":""},{"location":"release-notes/version-2.4/#enhancements_3","title":"Enhancements","text":"<ul> <li>#2479 - Add user permissions for creating/modifying API tokens</li> <li>#2487 - Return abbreviated API output when passed <code>?brief=1</code></li> </ul>"},{"location":"release-notes/version-2.4/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#2393 - Fix Unicode support for CSV import under Python 2</li> <li>#2483 - Set max item count of API-populated form fields to MAX_PAGE_SIZE</li> <li>#2484 - Local config context not available on the Virtual Machine Edit Form</li> <li>#2485 - Fix cancel button when assigning a service to a device/VM</li> <li>#2491 - Fix exception when importing devices with invalid device type</li> <li>#2492 - Sanitize hostname and port values returned through LLDP</li> </ul>"},{"location":"release-notes/version-2.4/#v245-2018-10-02","title":"v2.4.5 (2018-10-02)","text":""},{"location":"release-notes/version-2.4/#enhancements_4","title":"Enhancements","text":"<ul> <li>#2392 - Implemented local context data for devices and virtual machines</li> <li>#2402 - Order and format JSON data in form fields</li> <li>#2432 - Link remote interface connections to the Interface view</li> <li>#2438 - API optimizations for tagged objects</li> </ul>"},{"location":"release-notes/version-2.4/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#2406 - Remove hard-coded limit of 1000 objects from API-populated form fields</li> <li>#2414 - Tags field missing from device/VM component creation forms</li> <li>#2442 - Nullify \"next\" link in API when limit=0 is passed</li> <li>#2443 - Enforce JSON object format when creating config contexts</li> <li>#2444 - Improve validation of interface MAC addresses</li> <li>#2455 - Ignore unique address enforcement for IPs with a shared/virtual role</li> <li>#2470 - Log the creation of device/VM components as object changes</li> </ul>"},{"location":"release-notes/version-2.4/#v244-2018-08-22","title":"v2.4.4 (2018-08-22)","text":""},{"location":"release-notes/version-2.4/#enhancements_5","title":"Enhancements","text":"<ul> <li>#2168 - Added Extreme SummitStack interface form factors</li> <li>#2356 - Include cluster site as read-only field in VirtualMachine serializer</li> <li>#2362 - Implemented custom admin site to properly handle BASE_PATH</li> <li>#2254 - Implemented searchability for Rack Groups</li> </ul>"},{"location":"release-notes/version-2.4/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#2353 - Handle <code>DoesNotExist</code> exception when deleting a device with connected interfaces</li> <li>#2354 - Increased maximum MTU for interfaces to 65536 bytes</li> <li>#2355 - Added item count to inventory tab on device view</li> <li>#2368 - Record change in device changelog when altering cluster assignment</li> <li>#2369 - Corrected time zone validation on site API serializer</li> <li>#2370 - Redirect to parent device after deleting device bays</li> <li>#2374 - Fix toggling display of IP addresses in virtual machine interfaces list</li> <li>#2378 - Corrected \"edit\" link for virtual machine interfaces</li> </ul>"},{"location":"release-notes/version-2.4/#v243-2018-08-09","title":"v2.4.3 (2018-08-09)","text":""},{"location":"release-notes/version-2.4/#enhancements_6","title":"Enhancements","text":"<ul> <li>#2333 - Added search filters for ConfigContexts</li> </ul>"},{"location":"release-notes/version-2.4/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#2334 - TypeError raised when WritableNestedSerializer receives a non-integer value</li> <li>#2335 - API requires group field when creating/updating a rack</li> <li>#2336 - Bulk deleting power outlets and console server ports from a device redirects to home page</li> <li>#2337 - Attempting to create the next available prefix within a parent assigned to a VRF raises an AssertionError</li> <li>#2340 - API requires manufacturer field when creating/updating an inventory item</li> <li>#2342 - IntegrityError raised when attempting to assign an invalid IP address as the primary for a VM</li> <li>#2344 - AttributeError when assigning VLANs to an interface on a device/VM not assigned to a site</li> </ul>"},{"location":"release-notes/version-2.4/#v242-2018-08-08","title":"v2.4.2 (2018-08-08)","text":""},{"location":"release-notes/version-2.4/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#2318 - ImportError when viewing a report</li> <li>#2319 - Extend ChoiceField to properly handle true/false choice keys</li> <li>#2320 - TypeError when dispatching a webhook with a secret key configured</li> <li>#2321 - Allow explicitly setting a null value on nullable ChoiceFields</li> <li>#2322 - Webhooks firing on non-enabled event types</li> <li>#2323 - DoesNotExist raised when deleting devices or virtual machines</li> <li>#2330 - Incorrect tab link in VRF changelog view</li> </ul>"},{"location":"release-notes/version-2.4/#v241-2018-08-07","title":"v2.4.1 (2018-08-07)","text":""},{"location":"release-notes/version-2.4/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#2303 - Always redirect to parent object when bulk editing/deleting components</li> <li>#2308 - Custom fields panel absent from object view in UI</li> <li>#2310 - False validation error on certain nested serializers</li> <li>#2311 - Redirect to parent after editing interface from device/VM view</li> <li>#2312 - Running a report yields a ValueError exception</li> <li>#2314 - Serialized representation of object in change log does not include assigned tags</li> </ul>"},{"location":"release-notes/version-2.4/#v240-2018-08-06","title":"v2.4.0 (2018-08-06)","text":""},{"location":"release-notes/version-2.4/#new-features","title":"New Features","text":""},{"location":"release-notes/version-2.4/#webhooks-81","title":"Webhooks (#81)","text":"<p>Webhooks enable NetBox to send a representation of an object every time one is created, updated, or deleted. Webhooks are sent from NetBox to external services via HTTP, and can be limited by object type. Services which receive a webhook can act on the data provided by NetBox to automate other tasks.</p> <p>Special thanks to John Anderson for doing the heavy lifting for this feature!</p>"},{"location":"release-notes/version-2.4/#tagging-132","title":"Tagging (#132)","text":"<p>Tags are free-form labels which can be assigned to a variety of objects in NetBox. Tags can be used to categorize and filter objects in addition to built-in and custom fields. Objects to which tags apply now include a <code>tags</code> field in the API.</p>"},{"location":"release-notes/version-2.4/#contextual-configuration-data-1349","title":"Contextual Configuration Data (#1349)","text":"<p>Sometimes it is desirable to associate arbitrary data with a group of devices to aid in their configuration. (For example, you might want to associate a set of syslog servers for all devices at a particular site.) Context data enables the association of arbitrary data (expressed in JSON format) to devices and virtual machines grouped by region, site, role, platform, and/or tenancy. Context data is arranged hierarchically, so that data with a higher weight can be entered to override more general lower-weight data. Multiple instances of data are automatically merged by NetBox to present a single dictionary for each object.</p>"},{"location":"release-notes/version-2.4/#change-logging-1898","title":"Change Logging (#1898)","text":"<p>When an object is created, updated, or deleted, NetBox now automatically records a serialized representation of that object (similar to how it appears in the REST API) as well the event time and user account associated with the change.</p>"},{"location":"release-notes/version-2.4/#enhancements_7","title":"Enhancements","text":"<ul> <li>#238 - Allow racks with the same name within a site (but in different groups)</li> <li>#971 - Add a view to show all VLAN IDs available within a group</li> <li>#1673 - Added object/list views for services</li> <li>#1687 - Enabled custom fields for services</li> <li>#1739 - Enabled custom fields for secrets</li> <li>#1794 - Improved POST/PATCH representation of nested objects</li> <li>#2029 - Added optional NAPALM arguments to Platform model</li> <li>#2034 - Include the ID when showing nested interface connections (API change)</li> <li>#2118 - Added <code>latitude</code> and <code>longitude</code> fields to Site for GPS coordinates</li> <li>#2131 - Added <code>created</code> and <code>last_updated</code> fields to DeviceType</li> <li>#2157 - Fixed natural ordering of objects when sorted by name</li> <li>#2225 - Add \"view elevations\" button for site rack groups</li> </ul>"},{"location":"release-notes/version-2.4/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#2272 - Allow subdevice_role to be null on DeviceTypeSerializer\"</li> <li>#2286 - Fixed \"mark connected\" button for PDU outlet connections</li> </ul>"},{"location":"release-notes/version-2.4/#api-changes","title":"API Changes","text":"<ul> <li>Introduced the <code>/extras/config-contexts/</code>, <code>/extras/object-changes/</code>, and <code>/extras/tags/</code> API endpoints</li> <li>API writes now return a nested representation of related objects (rather than only a numeric ID)</li> <li>The dcim.DeviceType serializer now includes <code>created</code> and <code>last_updated</code> fields</li> <li>The dcim.Site serializer now includes <code>latitude</code> and <code>longitude</code> fields</li> <li>The ipam.Service and secrets.Secret serializers now include custom fields</li> <li>The dcim.Platform serializer now includes a free-form (JSON) <code>napalm_args</code> field</li> </ul>"},{"location":"release-notes/version-2.4/#changes-since-v24-beta1","title":"Changes Since v2.4-beta1","text":""},{"location":"release-notes/version-2.4/#enhancements_8","title":"Enhancements","text":"<ul> <li>#2229 - Allow mapping of ConfigContexts to tenant groups</li> <li>#2259 - Add changelog tab to interface view</li> <li>#2264 - Added \"map it\" link for site GPS coordinates</li> </ul>"},{"location":"release-notes/version-2.4/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>#2137 - Fixed JSON serialization of dates</li> <li>#2258 - Include changed object type on home page changelog</li> <li>#2265 - Include parent regions when filtering applicable ConfigContexts</li> <li>#2288 - Fix exception when assigning objects to a ConfigContext via the API</li> <li>#2296 - Fix AttributeError when creating a new object with tags assigned</li> <li>#2300 - Fix assignment of an interface to an IP address via API PATCH</li> <li>#2301 - Fix model validation on assignment of ManyToMany fields via API PATCH</li> <li>#2305 - Make VLAN fields optional when creating a VM interface via the API</li> </ul>"},{"location":"release-notes/version-2.5/","title":"NetBox v2.5 Release Notes","text":""},{"location":"release-notes/version-2.5/#v2513-2019-05-31","title":"v2.5.13 (2019-05-31)","text":""},{"location":"release-notes/version-2.5/#enhancements","title":"Enhancements","text":"<ul> <li>#2813 - Add tenant group filters</li> <li>#3085 - Catch all exceptions during export template rendering</li> <li>#3138 - Add 2.5GE and 5GE interface form factors</li> <li>#3151 - Add inventory item count to manufacturers list</li> <li>#3156 - Add site link to rack reservations overview</li> <li>#3183 - Enable bulk deletion of sites</li> <li>#3185 - Improve performance for custom field access within templates</li> <li>#3186 - Add interface name filter for IP addresses</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#3031 - Fixed form field population of tags with spaces</li> <li>#3132 - Circuit termination missing from available cable termination types</li> <li>#3150 - Fix formatting of cable length during cable trace</li> <li>#3184 - Correctly display color block for white cables</li> <li>#3190 - Fix custom field rendering for Jinja2 export templates</li> <li>#3211 - Fix error handling when attempting to delete a protected object via API</li> <li>#3223 - Fix filtering devices by \"has power outlets\"</li> <li>#3227 - Fix exception when deleting a circuit with a termination(s)</li> <li>#3228 - Fixed login link retaining query parameters</li> </ul>"},{"location":"release-notes/version-2.5/#v2512-2019-05-01","title":"v2.5.12 (2019-05-01)","text":""},{"location":"release-notes/version-2.5/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#3127 - Fix natural ordering of device components</li> </ul> <p>2.5.11 (2019-04-29)</p>"},{"location":"release-notes/version-2.5/#notes","title":"Notes","text":"<p>This release upgrades the Django framework to version 2.2.</p>"},{"location":"release-notes/version-2.5/#enhancements_1","title":"Enhancements","text":"<ul> <li>#2986 - Improve natural ordering of device components</li> <li>#3023 - Add support for filtering cables by connected device</li> <li>#3070 - Add decommissioning status for devices</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#2621 - Upgrade Django requirement to 2.2 to fix object deletion issue in the changelog middleware</li> <li>#3072 - Preserve multiselect filter values when updating per-page count for list views</li> <li>#3112 - Fix ordering of interface connections list by termination B name/device</li> <li>#3116 - Fix <code>tagged_items</code> count in tags API endpoint</li> <li>#3118 - Disable <code>last_login</code> update on login when maintenance mode is enabled</li> </ul>"},{"location":"release-notes/version-2.5/#v2510-2019-04-08","title":"v2.5.10 (2019-04-08)","text":""},{"location":"release-notes/version-2.5/#enhancements_2","title":"Enhancements","text":"<ul> <li>#3052 - Add Jinja2 support for export templates</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#2937 - Redirect to list view after editing an object from list view</li> <li>#3036 - DCIM interfaces API endpoint should not include VM interfaces</li> <li>#3039 - Fix exception when retrieving change object for a component template via API</li> <li>#3041 - Fix form widget for bulk cable label update</li> <li>#3044 - Ignore site/rack fields when connecting a new cable via device search</li> <li>#3046 - Fix exception at reports API endpoint</li> <li>#3047 - Fix exception when writing mac address for an interface via API</li> </ul>"},{"location":"release-notes/version-2.5/#v259-2019-04-01","title":"v2.5.9 (2019-04-01)","text":""},{"location":"release-notes/version-2.5/#enhancements_3","title":"Enhancements","text":"<ul> <li>#2933 - Add username to outbound webhook requests</li> <li>#3011 - Add SSL support for django-rq (requires django-rq v1.3.1+)</li> <li>#3025 - Add request ID to outbound webhook requests (for correlating all changes part of a single request)</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#2207 - Fixes deterministic ordering of interfaces</li> <li>#2577 - Clarification of wording in API regarding filtering</li> <li>#2924 - Add interface type for QSFP28 50GE</li> <li>#2936 - Fix device role selection showing duplicate first entry</li> <li>#2998 - Limit device query to non-racked devices if no rack selected when creating a cable</li> <li>#3001 - Fix API representation of ObjectChange <code>action</code> and add <code>changed_object_type</code></li> <li>#3014 - Fixes VM Role filtering</li> <li>#3019 - Fix tag population when running NetBox within a path</li> <li>#3022 - Add missing cable termination types to DCIM <code>_choices</code> endpoint</li> <li>#3026 - Tweak prefix/IP filter forms to filter using VRF ID rather than route distinguisher</li> <li>#3027 - Ignore empty local context data when rendering config contexts</li> <li>#3032 - Save assigned tags when creating a new secret</li> </ul>"},{"location":"release-notes/version-2.5/#v258-2019-03-11","title":"v2.5.8 (2019-03-11)","text":""},{"location":"release-notes/version-2.5/#enhancements_4","title":"Enhancements","text":"<ul> <li>#2435 - Printer friendly CSS</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#2065 - Correct documentation for VM interface serializer</li> <li>#2705 - Fix endpoint grouping in API docs</li> <li>#2781 - Fix filtering of sites/devices/VMs by multiple regions</li> <li>#2923 - Provider filter form's site field should be blank by default</li> <li>#2938 - Enforce deterministic ordering of device components returned by API</li> <li>#2939 - Exclude circuit terminations from API interface connections endpoint</li> <li>#2940 - Allow CSV import of prefixes/IPs to VRF without an RD assigned</li> <li>#2944 - Record the deletion of an IP address in the changelog of its parent interface (if any)</li> <li>#2952 - Added the <code>slug</code> field to the Tenant filter for use in the API and search function</li> <li>#2954 - Remove trailing slashes to fix root/template paths on Windows</li> <li>#2961 - Prevent exception when exporting inventory items belonging to unnamed devices</li> <li>#2962 - Increase ExportTemplate <code>mime_type</code> field length</li> <li>#2966 - Accept <code>null</code> cable length_unit via API</li> <li>#2972 - Improve ContentTypeField serializer to elegantly handle invalid data</li> <li>#2976 - Add delete button to tag view</li> <li>#2980 - Improve rendering time for API docs</li> <li>#2982 - Correct CSS class assignment on color picker</li> <li>#2984 - Fix logging of unlabeled cable ID on cable deletion</li> <li>#2985 - Fix pagination page length for rack elevations</li> </ul>"},{"location":"release-notes/version-2.5/#v257-2019-02-21","title":"v2.5.7 (2019-02-21)","text":""},{"location":"release-notes/version-2.5/#enhancements_5","title":"Enhancements","text":"<ul> <li>#2357 - Enable filtering of devices by rack face</li> <li>#2638 - Add button to copy unlocked secret to clipboard</li> <li>#2870 - Add Markdown rendering for provider NOC/admin contact fields</li> <li>#2878 - Add cable types for OS1/OS2 singlemode fiber</li> <li>#2890 - Add port types for APC fiber</li> <li>#2898 - Enable filtering cables list by connection status</li> <li>#2903 - Clarify purpose of tags field on interface edit form</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#2852 - Allow filtering devices by null rack position</li> <li>#2884 - Don't display connect button for wireless interfaces</li> <li>#2888 - Correct foreground color of device roles in rack elevations</li> <li>#2893 - Remove duplicate display of VRF RD on IP address view</li> <li>#2895 - Fix filtering of nullable character fields</li> <li>#2901 - Fix ordering regions by site count</li> <li>#2910 - Fix config context list and edit forms to use Select2 elements</li> <li>#2912 - Cable type in filter form should be blank by default</li> <li>#2913 - Fix assigned prefixes link on VRF view</li> <li>#2914 - Fix empty connected circuit link on device interfaces list</li> <li>#2915 - Fix bulk editing of pass-through ports</li> </ul>"},{"location":"release-notes/version-2.5/#v256-2019-02-13","title":"v2.5.6 (2019-02-13)","text":""},{"location":"release-notes/version-2.5/#enhancements_6","title":"Enhancements","text":"<ul> <li>#2758 - Add cable trace button to pass-through ports</li> <li>#2839 - Add \"110 punch\" type for pass-through ports</li> <li>#2854 - Enable bulk editing of pass-through ports</li> <li>#2866 - Add cellular interface types (GSM/CDMA/LTE)</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#2841 - Fix filtering by VRF for prefix and IP address lists</li> <li>#2844 - Correct display of far cable end for pass-through ports</li> <li>#2845 - Enable filtering of rack unit list by unit ID</li> <li>#2856 - Fix navigation links between LAG interfaces and their members on device view</li> <li>#2857 - Add <code>display_name</code> to DeviceType API serializer; fix DeviceType list for bulk device edit</li> <li>#2862 - Follow return URL when connecting a cable</li> <li>#2864 - Correct display of VRF name when no RD is assigned</li> <li>#2877 - Fixed device role label display on light background color</li> <li>#2880 - Sanitize user password if an exception is raised during login</li> </ul>"},{"location":"release-notes/version-2.5/#v255-2019-01-31","title":"v2.5.5 (2019-01-31)","text":""},{"location":"release-notes/version-2.5/#enhancements_7","title":"Enhancements","text":"<ul> <li>#2805 - Allow null route distinguisher for VRFs</li> <li>#2809 - Remove VRF child prefixes table; link to main prefixes view</li> <li>#2825 - Include directly connected device for front/rear ports</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#2824 - Fix template exception when viewing rack elevations list</li> <li>#2833 - Fix form widget for front port template creation</li> <li>#2835 - Fix certain model filters did not support the <code>q</code> query param</li> <li>#2837 - Fix select2 nullable filter fields add multiple null_option elements when paging</li> </ul>"},{"location":"release-notes/version-2.5/#v254-2019-01-29","title":"v2.5.4 (2019-01-29)","text":""},{"location":"release-notes/version-2.5/#enhancements_8","title":"Enhancements","text":"<ul> <li>#2516 - Implemented Select2 for all Model backed selection fields</li> <li>#2590 - Implemented the color picker with Select2 to show colors in the background</li> <li>#2733 - Enable bulk assignment of MAC addresses to interfaces</li> <li>#2735 - Implemented Select2 for all list filter form select elements</li> <li>#2753 - Implemented Select2 to replace most all instances of select fields in forms</li> <li>#2766 - Extend users admin table to include superuser and active fields</li> <li>#2782 - Add <code>is_pool</code> field for prefix filtering</li> <li>#2807 - Include device site/rack assignment in cable trace view</li> <li>#2808 - Loosen version pinning for Django to allow patch releases</li> <li>#2810 - Include description fields in interface connections export</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#2779 - Include \"none\" option when filter IP addresses by role</li> <li>#2783 - Fix AttributeError exception when attempting to delete region(s)</li> <li>#2795 - Fix duplicate display of pagination controls on child prefix/IP tables</li> <li>#2798 - Properly URL-encode \"map it\" link on site view</li> <li>#2802 - Better error handling for unsupported NAPALM methods</li> <li>#2816 - Handle exception when deleting a device with connected components</li> </ul>"},{"location":"release-notes/version-2.5/#v253-2019-01-11","title":"v2.5.3 (2019-01-11)","text":""},{"location":"release-notes/version-2.5/#enhancements_9","title":"Enhancements","text":"<ul> <li>#1630 - Enable bulk editing of prefix/IP mask length</li> <li>#1870 - Add per-page toggle to object lists</li> <li>#1871 - Enable filtering sites by parent region</li> <li>#1983 - Enable regular expressions when bulk renaming device components</li> <li>#2682 - Add DAC and AOC cable types</li> <li>#2693 - Additional cable colors</li> <li>#2726 - Include cables in global search</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>#2742 - Preserve cluster assignment when editing a device</li> <li>#2757 - Always treat first/last IPs within a /31 or /127 as usable</li> <li>#2762 - Add missing DCIM field values to API <code>_choices</code> endpoint</li> <li>#2777 - Fix cable validation to handle duplicate connections on import</li> </ul>"},{"location":"release-notes/version-2.5/#v252-2018-12-21","title":"v2.5.2 (2018-12-21)","text":""},{"location":"release-notes/version-2.5/#enhancements_10","title":"Enhancements","text":"<ul> <li>#2561 - Add 200G and 400G interface types</li> <li>#2701 - Enable filtering of prefixes by exact prefix value</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>#2673 - Fix exception on LLDP neighbors view for device with a circuit connected</li> <li>#2691 - Cable trace should follow circuits</li> <li>#2698 - Remove pagination restriction on bulk component creation for devices/VMs</li> <li>#2704 - Fix form select widget population on parent with null value</li> <li>#2707 - Correct permission evaluation for circuit termination cabling</li> <li>#2712 - Preserve list filtering after editing objects in bulk</li> <li>#2717 - Fix bulk deletion of tags</li> <li>#2721 - Detect loops when tracing front/rear ports</li> <li>#2723 - Correct permission evaluation when bulk deleting tags</li> <li>#2724 - Limit rear port choices to current device when editing a front port</li> </ul>"},{"location":"release-notes/version-2.5/#v251-2018-12-13","title":"v2.5.1 (2018-12-13)","text":""},{"location":"release-notes/version-2.5/#enhancements_11","title":"Enhancements","text":"<ul> <li>#2655 - Add 128GFC Fibrechannel interface type</li> <li>#2674 - Enable filtering changelog by object type under web UI</li> </ul>"},{"location":"release-notes/version-2.5/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>#2662 - Fix ImproperlyConfigured exception when rendering API docs</li> <li>#2663 - Prevent duplicate interfaces from appearing under VLAN members view</li> <li>#2666 - Correct display of length unit in cables list</li> <li>#2676 - Fix exception when passing dictionary value to a ChoiceField</li> <li>#2678 - Fix error when viewing webhook in admin UI without write permission</li> <li>#2680 - Disallow POST requests to <code>/dcim/interface-connections/</code> API endpoint</li> <li>#2683 - Fix exception when connecting a cable to a RearPort with no corresponding FrontPort</li> <li>#2684 - Fix custom field filtering</li> <li>#2687 - Correct naming of before/after filters for changelog entries</li> </ul>"},{"location":"release-notes/version-2.5/#v250-2018-12-10","title":"v2.5.0 (2018-12-10)","text":""},{"location":"release-notes/version-2.5/#notes_1","title":"Notes","text":""},{"location":"release-notes/version-2.5/#python-3-required","title":"Python 3 Required","text":"<p>As promised, Python 2 support has been completed removed. Python 3.5 or higher is now required to run NetBox. Please see our Python 3 migration guide for assistance with upgrading.</p>"},{"location":"release-notes/version-2.5/#removed-deprecated-user-activity-log","title":"Removed Deprecated User Activity Log","text":"<p>The UserAction model, which was deprecated by the new change logging feature in NetBox v2.4, has been removed. If you need to archive legacy user activity, do so prior to upgrading to NetBox v2.5, as the database migration will remove all data associated with this model.</p>"},{"location":"release-notes/version-2.5/#view-permissions-in-django-21","title":"View Permissions in Django 2.1","text":"<p>Django 2.1 introduces view permissions for object types (not to be confused with object-level permissions). Implementation of #323 is planned for NetBox v2.6. Users are encourage to begin assigning view permissions as desired in preparation for their eventual enforcement.</p>"},{"location":"release-notes/version-2.5/#upgradesh-no-longer-invokes-sudo","title":"upgrade.sh No Longer Invokes sudo","text":"<p>The <code>upgrade.sh</code> script has been tweaked so that it no longer invokes <code>sudo</code> internally. This was done to ensure compatibility when running NetBox inside a Python virtual environment. If you need elevated permissions when upgrading NetBox, call the upgrade script with <code>sudo upgrade.sh</code>.</p>"},{"location":"release-notes/version-2.5/#new-features","title":"New Features","text":""},{"location":"release-notes/version-2.5/#patch-panels-and-cables-20","title":"Patch Panels and Cables (#20)","text":"<p>NetBox now supports modeling physical cables for console, power, and interface connections. The new pass-through port component type has also been introduced to model patch panels and similar devices.</p>"},{"location":"release-notes/version-2.5/#enhancements_12","title":"Enhancements","text":"<ul> <li>#450 - Added <code>outer_width</code> and <code>outer_depth</code> fields to rack model</li> <li>#867 - Added <code>description</code> field to circuit terminations</li> <li>#1444 - Added an <code>asset_tag</code> field for racks</li> <li>#1931 - Added a count of assigned IP addresses to the interface API serializer</li> <li>#2000 - Dropped support for Python 2</li> <li>#2053 - Introduced the <code>LOGIN_TIMEOUT</code> configuration setting</li> <li>#2057 - Added description columns to interface connections list</li> <li>#2104 - Added a <code>status</code> field for racks</li> <li>#2165 - Improved natural ordering of Interfaces</li> <li>#2292 - Removed the deprecated UserAction model</li> <li>#2367 - Removed deprecated RPCClient functionality</li> <li>#2426 - Introduced <code>SESSION_FILE_PATH</code> configuration setting for authentication without write access to database</li> <li>#2594 - <code>upgrade.sh</code> no longer invokes sudo</li> </ul>"},{"location":"release-notes/version-2.5/#changes-from-v25-beta2","title":"Changes From v2.5-beta2","text":"<ul> <li>#2474 - Add <code>cabled</code> and <code>connection_status</code> filters for device components</li> <li>#2616 - Convert Rack <code>outer_unit</code> and Cable <code>length_unit</code> to integer-based choice fields</li> <li>#2622 - Enable filtering cables by multiple types/colors</li> <li>#2624 - Delete associated content type and permissions when removing InterfaceConnection model</li> <li>#2626 - Remove extraneous permissions generated from proxy models</li> <li>#2632 - Change representation of null values from <code>0</code> to <code>null</code></li> <li>#2639 - Fix preservation of length/dimensions unit for racks and cables</li> <li>#2648 - Include the <code>connection_status</code> field in nested represenations of connectable device components</li> <li>#2649 - Add <code>connected_endpoint_type</code> to connectable device component API representations</li> </ul>"},{"location":"release-notes/version-2.5/#api-changes","title":"API Changes","text":"<ul> <li>The <code>/extras/recent-activity/</code> endpoint (replaced by change logging in v2.4) has been removed</li> <li>The <code>rpc_client</code> field has been removed from dcim.Platform (see #2367)</li> <li>Introduced a new API endpoint for cables at <code>/dcim/cables/</code></li> <li>New endpoints for front and rear pass-through ports (and their templates) in parallel with existing device components</li> <li>The fields <code>interface_connection</code> on Interface and <code>interface</code> on CircuitTermination have been replaced with <code>connected_endpoint</code> and <code>connection_status</code></li> <li>A new <code>cable</code> field has been added to console, power, and interface components and to circuit terminations</li> <li>New fields for dcim.Rack: <code>status</code>, <code>asset_tag</code>, <code>outer_width</code>, <code>outer_depth</code>, <code>outer_unit</code></li> <li>The following boolean filters on dcim.Device and dcim.DeviceType have been renamed:<ul> <li><code>is_console_server</code>: <code>console_server_ports</code></li> <li><code>is_pdu</code>: <code>power_outlets</code></li> <li><code>is_network_device</code>: <code>interfaces</code></li> </ul> </li> <li>The following new boolean filters have been introduced for dcim.Device and dcim.DeviceType:<ul> <li><code>console_ports</code></li> <li><code>power_ports</code></li> <li><code>pass_through_ports</code></li> </ul> </li> <li>The field <code>interface_ordering</code> has been removed from the DeviceType serializer</li> <li>Added a <code>description</code> field to the CircuitTermination serializer</li> <li>Added <code>ipaddress_count</code> to InterfaceSerializer to show the count of assigned IP addresses for each interface</li> <li>The <code>available-prefixes</code> and <code>available-ips</code> IPAM endpoints now return an HTTP 204 response instead of HTTP 400 when no new objects can be created</li> <li>Filtering on null values now uses the string <code>null</code> instead of zero</li> </ul>"},{"location":"release-notes/version-2.6/","title":"NetBox v2.6 Release Notes","text":""},{"location":"release-notes/version-2.6/#v2612-2020-01-13","title":"v2.6.12 (2020-01-13)","text":""},{"location":"release-notes/version-2.6/#enhancements","title":"Enhancements","text":"<ul> <li>#1982 - Improved NAPALM method documentation in Swagger (OpenAPI)</li> <li>#2050 - Preview image attachments when hovering over the link</li> <li>#2113 - Allow NAPALM driver settings to be changed with request headers</li> <li>#2598 - Toggle the display of child prefixes/IP addresses</li> <li>#3009 - Search by description when assigning IP address to interfaces</li> <li>#3021 - Add <code>tenant</code> filter field for cables</li> <li>#3090 - Enable filtering of interfaces by name on the device view</li> <li>#3187 - Add rack selection field to rack elevations view</li> <li>#3393 - Paginate assigned circuits at the provider details view</li> <li>#3440 - Add total path length to cable trace</li> <li>#3491 - Include content of response on webhook error</li> <li>#3623 - Enable word expansion during interface creation</li> <li>#3668 - Enable searching by DNS name when assigning IP address</li> <li>#3851 - Allow passing initial data to custom script forms</li> <li>#3891 - Add <code>local_context_data</code> filter for virtual machines</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#3589 - Fix validation on tagged VLANs of an interface</li> <li>#3849 - Fix ordering of models when dumping data to JSON</li> <li>#3853 - Fix device role link on config context view</li> <li>#3856 - Allow filtering VM interfaces by multiple MAC addresses</li> <li>#3857 - Fix rendering of grouped custom links</li> <li>#3862 - Allow filtering device components by multiple device names</li> <li>#3864 - Disallow /0 masks for prefixes and IP addresses</li> <li>#3872 - Paginate related IPs on the IP address view</li> <li>#3876 - Fix minimum/maximum value rendering for site ASN field</li> <li>#3882 - Fix filtering of devices by rack group</li> <li>#3898 - Fix references to deleted cables without a label</li> <li>#3905 - Fix divide-by-zero on power feeds with low power values</li> </ul>"},{"location":"release-notes/version-2.6/#v2611-2020-01-03","title":"v2.6.11 (2020-01-03)","text":""},{"location":"release-notes/version-2.6/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#3831 - Fix API-driven filter field rendering (#3812 regression)</li> <li>#3833 - Add missing region filters for multiple objects</li> </ul>"},{"location":"release-notes/version-2.6/#v2610-2020-01-02","title":"v2.6.10 (2020-01-02)","text":""},{"location":"release-notes/version-2.6/#enhancements_1","title":"Enhancements","text":"<ul> <li>#2233 - Add ability to move inventory items between devices</li> <li>#2892 - Extend admin UI to allow deleting old report results</li> <li>#3062 - Add <code>assigned_to_interface</code> filter for IP addresses</li> <li>#3461 - Fail gracefully on custom link rendering exception</li> <li>#3705 - Provide request context when executing custom scripts</li> <li>#3762 - Add date/time picker widgets</li> <li>#3788 - Enable partial search for inventory items</li> <li>#3812 - Optimize size of pages containing a dynamic selection field</li> <li>#3827 - Allow filtering console/power/interface connections by device ID</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#3106 - Restrict queryset of chained fields when form validation fails</li> <li>#3695 - Include A/Z termination sites for circuits in global search</li> <li>#3712 - Scrolling to target (hash) did not account for the header size</li> <li>#3780 - Fix AttributeError exception in API docs</li> <li>#3809 - Filter platform by manufacturer when editing devices</li> <li>#3811 - Fix filtering of racks by group on device list</li> <li>#3822 - Fix exception when editing a device bay (regression from #3596)</li> </ul>"},{"location":"release-notes/version-2.6/#v269-2019-12-16","title":"v2.6.9 (2019-12-16)","text":""},{"location":"release-notes/version-2.6/#enhancements_2","title":"Enhancements","text":"<ul> <li>#3152 - Include direct link to rack elevations on site view</li> <li>#3441 - Move virtual machine results near devices in global search</li> <li>#3761 - Added copy button for API tokens</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#2170 - Prevent the deletion of a virtual chassis when a cross-member LAG is present</li> <li>#2358 - Respect custom field default values when creating objects via the REST API</li> <li>#3749 - Fix exception on password change page for local users</li> <li>#3757 - Fix unable to assign IP to interface</li> </ul>"},{"location":"release-notes/version-2.6/#v268-2019-12-10","title":"v2.6.8 (2019-12-10)","text":""},{"location":"release-notes/version-2.6/#enhancements_3","title":"Enhancements","text":"<ul> <li>#3139 - Disable password change form for LDAP-authenticated users</li> <li>#3457 - Display cable colors on device view</li> <li>#3329 - Remove obsolete P3P policy header</li> <li>#3663 - Add query filters for <code>created</code> and <code>last_updated</code> fields</li> <li>#3722 - Allow the underscore character in IPAddress DNS names</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#3312 - Fix validation error when editing power cables in bulk</li> <li>#3644 - Fix exception when connecting a cable to a RearPort with no corresponding FrontPort</li> <li>#3669 - Include <code>weight</code> field in prefix/VLAN role form</li> <li>#3674 - Include comments on PowerFeed view</li> <li>#3679 - Fix link for assigned ipaddress in interface page</li> <li>#3709 - Prevent exception when importing an invalid cable definition</li> <li>#3720 - Correctly indicate power feed terminations on cable list</li> <li>#3724 - Fix API filtering of interfaces by more than one device name</li> <li>#3725 - Enforce client validation for minimum service port number</li> </ul>"},{"location":"release-notes/version-2.6/#v267-2019-11-01","title":"v2.6.7 (2019-11-01)","text":""},{"location":"release-notes/version-2.6/#enhancements_4","title":"Enhancements","text":"<ul> <li>#3445 - Add support for additional user defined headers to be added to webhook requests</li> <li>#3499 - Add <code>ca_file_path</code> to Webhook model to support user supplied CA certificate verification of webhook requests</li> <li>#3594 - Add ChoiceVar for custom scripts</li> <li>#3619 - Add 400GE OSFP interface type</li> <li>#3659 - Add filtering for objects in admin UI</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#3309 - Rewrite change logging middleware to resolve sporadic testing failures</li> <li>#3340 - Add missing options to connect front ports to console ports</li> <li>#3357 - Enable filter sites/devices/VMs by null region</li> <li>#3460 - Extend upgrade script to validate Python dependencies</li> <li>#3596 - Prevent server error when reassigning a device to a new device bay</li> <li>#3629 - Use <code>get_lldp_neighors_detail</code> to validation LLDP neighbors</li> <li>#3635 - Add missing cache support for the circuits app</li> <li>#3636 - Add missing <code>rack_group</code> field to PowerFeed CSV export</li> <li>#3652 - Limit next/previous rack by assigned rack group</li> </ul>"},{"location":"release-notes/version-2.6/#v266-2019-10-10","title":"v2.6.6 (2019-10-10)","text":""},{"location":"release-notes/version-2.6/#notes","title":"Notes","text":"<ul> <li>This release includes a migration which automatically updates all existing cables to enable filtering by site/rack (see #3259). This migration may take several minutes to complete on installations with tens of thousands of cables defined.</li> </ul>"},{"location":"release-notes/version-2.6/#enhancements_5","title":"Enhancements","text":"<ul> <li>#1941 - Add InfiniBand interface types</li> <li>#3259 - Add <code>rack</code> and <code>site</code> filters for cables</li> <li>#3471 - Disallow raw HTML in Markdown-rendered fields</li> <li>#3545 - Add <code>MultiObjectVar</code> for custom scripts</li> <li>#3563 - Enable editing of individual DeviceType components</li> <li>#3580 - Render text and URL fields as textareas in the custom link form</li> <li>#3581 - Introduce <code>commit_default</code> custom script attribute to not commit changes by default</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#3458 - Prevent primary IP address for a device/VM from being reassigned</li> <li>#3463 - Correct CSV headers for exported power feeds</li> <li>#3474 - Fix device status page loading when NAPALM call fails</li> <li>#3571 - Prevent erroneous redirects when editing tags</li> <li>#3573 - Ensure consistent display of changelog retention period</li> <li>#3574 - Change <code>device</code> to <code>parent</code> in interface editing VLAN filtering logic</li> <li>#3575 - Restore label for comments field when bulk editing circuits</li> <li>#3582 - Enforce view permissions on global search results</li> <li>#3588 - Enforce object-form JSON for local context data on devices and VMs</li> </ul>"},{"location":"release-notes/version-2.6/#v265-2019-09-25","title":"v2.6.5 (2019-09-25)","text":""},{"location":"release-notes/version-2.6/#enhancements_6","title":"Enhancements","text":"<ul> <li>#3297 - Include reserved units when calculating rack utilization</li> <li>#3347 - Extend upgrade script to automatically remove stale content types</li> <li>#3352 - Enable filtering changelog API by <code>changed_object_id</code></li> <li>#3515 - Enable export templates for inventory items</li> <li>#3524 - Enable bulk editing of power outlet/power port associations</li> <li>#3529 - Enable filtering circuits list by region</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#3435 - Change IP/prefix CSV export to reference VRF name instead of RD</li> <li>#3464 - Fix foreground text color on color picker fields</li> <li>#3519 - Prevent cables from being terminated to virtual/wireless interfaces via API</li> <li>#3521 - Fix error in <code>parseURL</code> related to variables in API URL</li> <li>#3531 - Fixed rack role foreground color</li> <li>#3534 - Added blank option for untagged VLANs</li> <li>#3540 - Fixed virtual machine interface edit with new inline vlan edit fields</li> <li>#3543 - Added inline VLAN editing to virtual machine interfaces</li> </ul>"},{"location":"release-notes/version-2.6/#v264-2019-09-19","title":"v2.6.4 (2019-09-19)","text":""},{"location":"release-notes/version-2.6/#enhancements_7","title":"Enhancements","text":"<ul> <li>#2160 - Add bulk editing for interface VLAN assignment</li> <li>#3027 - Add <code>local_context_data</code> boolean filter for devices</li> <li>#3318 - Increase length of platform name and slug to 100 characters</li> <li>#3341 - Enable inline VLAN assignment while editing an interface</li> <li>#3485 - Enable embedded graphs for devices</li> <li>#3510 - Add minimum/maximum prefix length enforcement for <code>IPNetworkVar</code></li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#3489 - Prevent exception triggered by webhook upon object deletion</li> <li>#3501 - Fix rendering of checkboxes on custom script forms</li> <li>#3511 - Correct API URL for nested device bays</li> <li>#3513 - Fix assignment of tags when creating front/rear ports</li> <li>#3514 - Label TextVar fields when rendering custom script forms</li> </ul>"},{"location":"release-notes/version-2.6/#v263-2019-09-04","title":"v2.6.3 (2019-09-04)","text":""},{"location":"release-notes/version-2.6/#new-features","title":"New Features","text":""},{"location":"release-notes/version-2.6/#custom-scripts-3415","title":"Custom Scripts (#3415)","text":"<p>Custom scripts allow for the execution of arbitrary code via the NetBox UI. They can be used to automatically create, manipulate, or clean up objects or perform other tasks within NetBox. Scripts are defined as Python files which contain one or more subclasses of <code>extras.scripts.Script</code>. Variable fields can be defined within scripts, which render as form fields within the web UI to prompt the user for input data. Scripts are executed and information is logged via the web UI. Please see the docs for more detail.</p> <p>Note: There are currently no API endpoints for this feature. These are planned for the upcoming v2.7 release.</p>"},{"location":"release-notes/version-2.6/#enhancements_8","title":"Enhancements","text":"<ul> <li>#3386 - Add <code>mac_address</code> filter for virtual machines</li> <li>#3391 - Update Bootstrap CSS to v3.4.1</li> <li>#3405 - Fix population of power port/outlet details on device creation</li> <li>#3422 - Prevent navigation menu from overlapping page content</li> <li>#3430 - Linkify platform field on device view</li> <li>#3454 - Enable filtering circuits by region</li> <li>#3456 - Enable bulk editing of tag color</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#3392 - Add database index for ObjectChange time</li> <li>#3420 - Serial number filter for racks, devices, and inventory items is now case-insensitive</li> <li>#3428 - Fixed cache invalidation issues (#3300, #3363, #3379, #3382) by switching to <code>prefetch_related()</code> instead of <code>select_related()</code> and removing use of <code>update()</code></li> <li>#3421 - Fix exception when ordering power connections list by PDU</li> <li>#3424 - Fix tag coloring for non-linked tags</li> <li>#3426 - Improve API error handling for ChoiceFields</li> </ul>"},{"location":"release-notes/version-2.6/#v262-2019-08-02","title":"v2.6.2 (2019-08-02)","text":""},{"location":"release-notes/version-2.6/#enhancements_9","title":"Enhancements","text":"<ul> <li>#984 - Allow ordering circuits by A/Z side</li> <li>#3307 - Add power panels count to home page</li> <li>#3314 - Paginate object changelog entries</li> <li>#3367 - Add BNC port type and coaxial cable type</li> <li>#3368 - Indicate indefinite changelog retention when applicable</li> <li>#3370 - Add filter class to VirtualChassis API</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>#3018 - Components connected via a cable must have an equal number of positions</li> <li>#3289 - Prevent position from being nullified when moving a device to a new rack</li> <li>#3293 - Enable filtering device components by multiple device IDs</li> <li>#3315 - Enable filtering devices/interfaces by multiple MAC addresses</li> <li>#3317 - Fix permissions for ConfigContextBulkDeleteView</li> <li>#3323 - Fix permission evaluation for interface connections view</li> <li>#3342 - Fix cluster delete button</li> <li>#3384 - Maximum and allocated draw fields should be included on power port template creation form</li> <li>#3385 - Fix power panels list when bulk editing power feeds</li> </ul>"},{"location":"release-notes/version-2.6/#v261-2019-06-25","title":"v2.6.1 (2019-06-25)","text":""},{"location":"release-notes/version-2.6/#enhancements_10","title":"Enhancements","text":"<ul> <li>#3154 - Add <code>virtual_chassis_member</code> device filter</li> <li>#3277 - Add cable trace buttons for console and power ports</li> <li>#3281 - Hide custom links which render as empty text</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>#3229 - Limit rack group selection by parent site on racks list</li> <li>#3269 - Raise validation error when specifying non-existent cable terminations</li> <li>#3275 - Fix error when adding power outlets to a device type</li> <li>#3279 - Reset the PostgreSQL sequence for Tag and TaggedItem IDs</li> <li>#3283 - Fix rack group assignment on PowerFeed CSV import</li> <li>#3290 - Fix server error when viewing cascaded PDUs</li> <li>#3292 - Ignore empty URL query parameters</li> </ul>"},{"location":"release-notes/version-2.6/#v260-2019-06-20","title":"v2.6.0 (2019-06-20)","text":""},{"location":"release-notes/version-2.6/#new-features_1","title":"New Features","text":""},{"location":"release-notes/version-2.6/#power-panels-and-feeds-54","title":"Power Panels and Feeds (#54)","text":"<p>NetBox now supports power circuit modeling via two new models: power panels and power feeds. Power feeds are terminated to power panels and are optionally associated with individual racks. Each power feed defines a supply type (AC/DC), amperage, voltage, and phase. A power port can be connected directly to a power feed, but a power feed may have only one power port connected to it.</p> <p>Additionally, the power port model, which represents a device's power input, has been extended to include fields denoting maximum and allocated draw, in volt-amperes. This allows a device (e.g. a PDU) to calculate its total load compared to its connected power feed.</p>"},{"location":"release-notes/version-2.6/#caching-2647","title":"Caching (#2647)","text":"<p>To improve performance, NetBox now supports caching for most object and list views. Caching is implemented using Redis, which is now a required dependency. (Previously, Redis was required only if webhooks were enabled.)</p> <p>A new configuration parameter is available to control the cache timeout:</p> <pre><code>## Cache timeout (in seconds)\nCACHE_TIMEOUT = 900\n</code></pre>"},{"location":"release-notes/version-2.6/#view-permissions-323","title":"View Permissions (#323)","text":"<p>Django 2.1 introduced the ability to enforce view-only permissions for different object types. NetBox now enforces these by default. You can grant view permission to a user or group by assigning the \"can view\" permission for the desired object(s).</p> <p>To exempt certain object types from the enforcement of view permissions, so that any user (including anonymous users) can view them, add them to the new <code>EXEMPT_VIEW_PERMISSIONS</code> setting in <code>configuration.py</code>:</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = [\n    'dcim.site',\n    'ipam.prefix',\n]\n</code></pre> <p>To exclude all objects, effectively disabling view permissions and restoring pre-v2.6 behavior, set:</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = ['*']\n</code></pre>"},{"location":"release-notes/version-2.6/#custom-links-969","title":"Custom Links (#969)","text":"<p>Custom links are created under the admin UI and will be displayed on each object of the selected type. Link text and URLs can be formed from Jinja2 template code, with the viewed object passed as context data. For example, to link to an external NMS from the device view, you might create a custom link with the following URL:</p> <pre><code>https://nms.example.com/nodes/?name={{ obj.name }}\n</code></pre> <p>Custom links appear as buttons at the top of the object view. Grouped links will render as a dropdown menu beneath a single button.</p>"},{"location":"release-notes/version-2.6/#prometheus-metrics-3104","title":"Prometheus Metrics (#3104)","text":"<p>NetBox now supports exposing native Prometheus metrics from the application. Prometheus is a popular time series metric platform used for monitoring. Metric exposition can be toggled with the <code>METRICS_ENABLED</code> configuration setting; it is not enabled by default. NetBox exposes metrics at the <code>/metrics</code> HTTP endpoint, e.g. <code>https://netbox.local/metrics</code>.</p> <p>NetBox makes use of the django-prometheus library to export a number of different types of metrics, including:</p> <ul> <li>Per model insert, update, and delete counters</li> <li>Per view request counters</li> <li>Per view request latency histograms</li> <li>Request body size histograms</li> <li>Response body size histograms</li> <li>Response code counters</li> <li>Database connection, execution, and error counters</li> <li>Cache hit, miss, and invalidation counters</li> <li>Django middleware latency histograms</li> <li>Other Django related metadata metrics</li> </ul> <p>For the exhaustive list of exposed metrics, visit the <code>/metrics</code> endpoint on your NetBox instance. See the documentation for more details on using Prometheus metrics in NetBox.</p>"},{"location":"release-notes/version-2.6/#changes","title":"Changes","text":""},{"location":"release-notes/version-2.6/#new-dependency-redis","title":"New Dependency: Redis","text":"<p>Redis is an in-memory data store similar to memcached. While Redis has been an optional component of NetBox since the introduction of webhooks in version 2.4, it is now required to support NetBox's new caching functionality (as well as other planned features). Redis can be installed via your platform's package manager: for example, <code>sudo apt-get install redis-server</code> on Ubuntu or <code>sudo yum install redis</code> on CentOS.</p> <p>The Redis database is configured using a configuration setting similar to <code>DATABASE</code> in <code>configuration.py</code>:</p> <pre><code>REDIS = {\n    'HOST': 'localhost',\n    'PORT': 6379,\n    'PASSWORD': '',\n    'DATABASE': 0,\n    'CACHE_DATABASE': 1,\n    'DEFAULT_TIMEOUT': 300,\n    'SSL': False,\n}\n</code></pre> <p>Note that if you were using these settings in a prior release with webhooks, the <code>DATABASE</code> setting remains the same but an additional <code>CACHE_DATABASE</code> setting has been added with a default value of 1 to support the caching backend. The <code>DATABASE</code> setting will be renamed in a future release of NetBox to better relay the meaning of the setting. It is highly recommended to keep the webhook and cache databases seperate. Using the same database number for both may result in webhook processing data being lost during cache flushing events.</p>"},{"location":"release-notes/version-2.6/#api-support-for-specifying-related-objects-by-attributes3077","title":"API Support for Specifying Related Objects by Attributes(#3077)","text":"<p>Previously, specifying a related object in an API request required knowing the primary key (integer ID) of that object. For example, when creating a new device, its rack would be specified as an integer:</p> <pre><code>{\n    \"name\": \"MyNewDevice\",\n    \"rack\": 123,\n    ...\n}\n</code></pre> <p>The NetBox API now also supports referencing related objects by a set of sufficiently unique attrbiutes. For example, a rack can be identified by its name and parent site:</p> <pre><code>{\n    \"name\": \"MyNewDevice\",\n    \"rack\": {\n        \"site\": {\n            \"name\": \"Equinix DC6\"\n        },\n        \"name\": \"R204\"\n    },\n    ...\n}\n</code></pre> <p>There is no limit to the depth of nested references. Note that if the provided parameters do not return exactly one object, a validation error is raised.</p>"},{"location":"release-notes/version-2.6/#api-devicevm-config-context-included-by-default-2350","title":"API Device/VM Config Context Included by Default (#2350)","text":"<p>The rendered config context for devices and VMs is now included by default in all API results (list and detail views). Previously, the rendered config context was available only in the detail view for individual objects. Users with large amounts of context data may observe a performance drop when returning multiple objects. To combat this, in cases where the rendered config context is not needed, the query parameter <code>?exclude=config_context</code> may be appended to the request URL to exclude the config context data from the API response.</p>"},{"location":"release-notes/version-2.6/#changes-to-tag-permissions","title":"Changes to Tag Permissions","text":"<p>NetBox now makes use of its own <code>Tag</code> model instead of the stock model which ships with django-taggit. This new model lives in the <code>extras</code> app and thus any permissions that you may have configured using \"Taggit | Tag\" should be changed to now use \"Extras | Tag.\" Also note that the admin interface for tags has been removed as it was redundant to the functionality provided by the front end UI.</p>"},{"location":"release-notes/version-2.6/#cors_origin_whitelist-requires-uri-scheme","title":"CORS_ORIGIN_WHITELIST Requires URI Scheme","text":"<p>If you have the <code>CORS_ORIGIN_WHITELIST</code> configuration parameter defined, note that each origin must now incldue a URI scheme. This change was introuced in django-cors-headers 3.0.</p>"},{"location":"release-notes/version-2.6/#enhancements_11","title":"Enhancements","text":"<ul> <li>#166 - Add <code>dns_name</code> field to IPAddress</li> <li>#524 - Added power utilization graphs to power feeds, devices, and racks</li> <li>#1792 - Add CustomFieldChoices API endpoint at <code>/api/extras/_custom_field_choices/</code></li> <li>#1863 - Add child object counts to API representation of organizational objects</li> <li>#2324 - Add <code>color</code> field for tags</li> <li>#2643 - Add <code>description</code> field to console/power components and device bays</li> <li>#2791 - Add <code>comments</code> field for tags</li> <li>#2920 - Rename Interface <code>form_factor</code> to <code>type</code> (backward-compatible until v2.7)</li> <li>#2926 - Add change logging to the Tag model</li> <li>#3038 - OR logic now used when multiple values of a query filter are passed</li> <li>#3264 - Annotate changelog retention time on UI</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>#2968 - Correct API documentation for SerializerMethodFields</li> <li>#3176 - Add cable trace button for console server ports and power outlets</li> <li>#3231 - Fixed cosmetic error indicating a missing schema migration</li> <li>#3239 - Corrected count of tags reported via API</li> </ul>"},{"location":"release-notes/version-2.6/#bug-fixes-from-v26-beta1","title":"Bug Fixes From v2.6-beta1","text":"<ul> <li>#3123 - Exempt <code>/metrics</code> view from authentication</li> <li>#3125 - Fix exception when viewing PDUs</li> <li>#3126 - Incorrect calculation of PowerFeed available power</li> <li>#3130 - Fix exception when creating a new power outlet</li> <li>#3136 - Add power draw fields to power port creation form</li> <li>#3137 - Add <code>power_port</code> and <code>feed_leg</code> fields to power outlet creation form</li> <li>#3140 - Add bulk edit capability for power outlets and console server ports</li> <li>#3204 - Fix interface filtering when connecting cables</li> <li>#3207 - Fix link for connecting interface to rear port</li> <li>#3258 - Exception raised when creating/viewing a circuit with a non-connected termination</li> </ul>"},{"location":"release-notes/version-2.6/#api-changes","title":"API Changes","text":"<ul> <li>New API endpoints for power modeling: <code>/api/dcim/power-panels/</code> and <code>/api/dcim/power-feeds/</code></li> <li>New API endpoint for custom field choices: <code>/api/extras/_custom_field_choices/</code></li> <li>ForeignKey fields now accept either the related object PK or a dictionary of attributes describing the related object.</li> <li>Organizational objects now include child object counts. For example, the Role serializer includes <code>prefix_count</code> and <code>vlan_count</code>.</li> <li>The <code>id__in</code> filter is now deprecated and will be removed in v2.7. (Begin using the <code>?id=1&amp;id=2</code> format instead.)</li> <li>Added a <code>description</code> field for all device components.</li> <li>dcim.Device: The devices list endpoint now includes rendered context data.</li> <li>dcim.DeviceType: <code>instance_count</code> has been renamed to <code>device_count</code>.</li> <li>dcim.Interface: <code>form_factor</code> has been renamed to <code>type</code>. Backward compatibility for <code>form_factor</code> will be maintained until NetBox v2.7.</li> <li>dcim.Interface: The <code>type</code> filter has been renamed to <code>kind</code>.</li> <li>dcim.Site: The <code>count_*</code> read-only fields have been renamed to <code>*_count</code> for consistency with other objects.</li> <li>dcim.Site: Added the <code>virtualmachine_count</code> read-only field.</li> <li>extras.Tag: Added <code>color</code> and <code>comments</code> fields to the Tag serializer.</li> <li>virtualization.VirtualMachine: The virtual machines list endpoint now includes rendered context data.</li> </ul>"},{"location":"release-notes/version-2.7/","title":"NetBox v2.7 Release Notes","text":""},{"location":"release-notes/version-2.7/#v2712-2020-04-08","title":"v2.7.12 (2020-04-08)","text":""},{"location":"release-notes/version-2.7/#enhancements","title":"Enhancements","text":"<ul> <li>#3676 - Reference VRF by name rather than RD during IP/prefix import</li> <li>#4147 - Use absolute URLs in rack elevation SVG renderings</li> <li>#4448 - Allow connecting cables between two circuit terminations</li> <li>#4460 - Add the <code>webhook_receiver</code> management command to assist in troubleshooting outgoing webhooks</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#4395 - Fix typing of count_ipaddresses on interface serializer</li> <li>#4418 - Fail cleanly when trying to import multiple device types simultaneously</li> <li>#4438 - Fix exception when disconnecting a cable from a power feed</li> <li>#4439 - Tweak display of unset custom integer fields</li> <li>#4449 - Fix reservation edit/delete button URLs on rack view</li> </ul>"},{"location":"release-notes/version-2.7/#v2711-2020-03-27","title":"v2.7.11 (2020-03-27)","text":""},{"location":"release-notes/version-2.7/#enhancements_1","title":"Enhancements","text":"<ul> <li>#738 - Add ability to automatically check for new releases (must be enabled by setting <code>RELEASE_CHECK_URL</code>)</li> <li>#4255 - Custom script object variables now utilize dynamic form widgets</li> <li>#4309 - Add descriptive tooltip to custom fields on object views</li> <li>#4369 - Add a dedicated view for rack reservations</li> <li>#4380 - Enable webhooks for rack reservations</li> <li>#4381 - Enable export templates for rack reservations</li> <li>#4382 - Enable custom links for rack reservations</li> <li>#4386 - Update admin links for Django RQ to reflect multiple queues</li> <li>#4389 - Add a bulk edit view for device bays</li> <li>#4404 - Add cable trace button for circuit terminations</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#2769 - Improve <code>prefix_length</code> validation on available-prefixes API</li> <li>#3193 - Fix cable tracing across multiple rear ports</li> <li>#4340 - Enforce unique constraints for device and virtual machine names in the API</li> <li>#4343 - Fix Markdown support for tables</li> <li>#4365 - Fix exception raised on IP address bulk add view</li> <li>#4415 - Fix duplicate name validation on device model</li> </ul>"},{"location":"release-notes/version-2.7/#v2710-2020-03-10","title":"v2.7.10 (2020-03-10)","text":"<p>Note: If your deployment requires any non-core Python packages (such as <code>napalm</code>, <code>django-storages</code>, or <code>django-auth-ldap</code>), list them in a file named <code>local_requirements.txt</code> in the NetBox root directory (alongside <code>requirements.txt</code>). This will ensure they are detected and re-installed by the upgrade script when the Python virtual environment is rebuilt.</p>"},{"location":"release-notes/version-2.7/#enhancements_2","title":"Enhancements","text":"<ul> <li>#4217 - Embed model documentation within web UI</li> <li>#4323 - Add bulk edit view for power panels</li> <li>#4324 - Add CSV import view for services</li> <li>#4325 - Add CSV import view for rack reservations</li> <li>#4332 - Redirect to a user-friendly error page when CSS/JS resources fail to load</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#4326 - Exclude Python modules without Script classes from scripts list</li> <li>#4337 - Allow bulk editing/deletion of all device components matching a query</li> <li>#4338 - Catch <code>AddrFormatError</code> exception when filtering aggregates/prefixes by an invalid prefix</li> </ul>"},{"location":"release-notes/version-2.7/#v279-2020-03-06","title":"v2.7.9 (2020-03-06)","text":"<p>Note: This release will deploy a Python virtual environment on upgrade in the <code>venv/</code> directory. This will require modifying the paths to your Python and gunicorn executables in the systemd service files. For more detail, please see the upgrade instructions.</p>"},{"location":"release-notes/version-2.7/#enhancements_3","title":"Enhancements","text":"<ul> <li>#3949 - Revised the installation docs and upgrade script to employ a Python virtual environment</li> <li>#4062 - Enumerate ChoiceField type and value in API</li> <li>#4119 - Extend upgrade script to clear expired user sessions</li> <li>#4121 - Add dynamic lookup expressions for all filters</li> <li>#4218 - Allow negative voltage for DC power feeds</li> <li>#4281 - Allow filtering device component list views by type</li> <li>#4284 - Add MRJ21 port and cable types</li> <li>#4290 - Include device name in tooltip on rack elevations</li> <li>#4305 - Add 10-inch option for rack width</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#4274 - Fix incorrect schema definition of <code>int</code> type choicefields</li> <li>#4277 - Fix filtering of clusters by tenant</li> <li>#4282 - Fix label on export button for device types</li> <li>#4285 - Include A/Z termination sites in provider circuits table</li> <li>#4295 - Fix assignment of parent LAG during interface bulk edit</li> <li>#4298 - Fix bulk creation of objects with custom fields via REST API</li> <li>#4300 - Pass \"commit\" argument when executing scripts via REST API</li> <li>#4301 - Fix exception when deleting device type with components</li> <li>#4306 - Fix toggling of device images for all racks in elevations view</li> </ul>"},{"location":"release-notes/version-2.7/#v278-2020-02-25","title":"v2.7.8 (2020-02-25)","text":""},{"location":"release-notes/version-2.7/#enhancements_4","title":"Enhancements","text":"<ul> <li>#3145 - Add a \"decommissioning\" cable status</li> <li>#4173 - Return graceful error message when webhook queuing fails</li> <li>#4227 - Omit internal fields from the change log data</li> <li>#4237 - Support Jinja2 templating for webhook payload and headers</li> <li>#4262 - Extend custom scripts to pass the <code>commit</code> value via <code>run()</code></li> <li>#4267 - Denote rack role on rack elevations list</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#4221 - Fix exception when deleting a device with interface connections when an interfaces webhook is defined</li> <li>#4222 - Escape double quotes on encapsulated values during CSV export</li> <li>#4224 - Fix display of rear device image if front image is not defined</li> <li>#4228 - Improve fit of device images in rack elevations</li> <li>#4230 - Fix rack units filtering on elevation endpoint</li> <li>#4232 - Enforce consistent background striping in rack elevations</li> <li>#4235 - Fix API representation of <code>content_type</code> for export templates</li> <li>#4239 - Fix exception when selecting all filtered objects during bulk edit</li> <li>#4240 - Fix exception when filtering foreign keys by NULL</li> <li>#4241 - Correct IP address hyperlinks on interface view</li> <li>#4246 - Fix duplication of field attributes when multiple IPNetworkVars are present in a script</li> <li>#4252 - Fix power port assignment for power outlet templates created via REST API</li> <li>#4272 - Interface type should be required by API serializer</li> </ul>"},{"location":"release-notes/version-2.7/#v277-2020-02-20","title":"v2.7.7 (2020-02-20)","text":"<p>Note: This release fixes a bug affecting the natural ordering of interfaces. If any interfaces appear unordered in NetBox, run the following management command to recalculate their naturalized values after upgrading:</p> <pre><code>python3 manage.py renaturalize dcim.Interface\n</code></pre>"},{"location":"release-notes/version-2.7/#enhancements_5","title":"Enhancements","text":"<ul> <li>#1529 - Enable display of device images in rack elevations</li> <li>#2511 - Compare object change to the previous change</li> <li>#3810 - Preserve slug value when editing existing objects</li> <li>#3840 - Enhance search function when selecting VLANs for interface assignment</li> <li>#4170 - Improve color contrast in rack elevation drawings</li> <li>#4206 - Add RJ-11 console port type</li> <li>#4209 - Enable filtering interfaces list view by enabled</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#2519 - Avoid race condition when provisioning \"next available\" IPs/prefixes via the API</li> <li>#3967 - Fix missing migration for interface templates of type \"other\"</li> <li>#4168 - Role is not required when creating a virtual machine</li> <li>#4175 - Fix potential exception when bulk editing objects from a filtered list</li> <li>#4179 - Site is required when creating a rack group or power panel</li> <li>#4183 - Fix representation of NaturalOrderingField values in change log</li> <li>#4194 - Role field should not be required when searching/filtering secrets</li> <li>#4196 - Fix exception when viewing LLDP neighbors page</li> <li>#4202 - Prevent reassignment to master device when bulk editing VC member interfaces</li> <li>#4204 - Fix assignment of mask length when bulk editing prefixes</li> <li>#4211 - Include trailing text when naturalizing interface names</li> <li>#4213 - Restore display of tags and custom fields on power feed view</li> </ul>"},{"location":"release-notes/version-2.7/#v276-2020-02-13","title":"v2.7.6 (2020-02-13)","text":""},{"location":"release-notes/version-2.7/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#4166 - Fix schema migrations to enforce maximum character length for naturalized fields</li> </ul>"},{"location":"release-notes/version-2.7/#v275-2020-02-13","title":"v2.7.5 (2020-02-13)","text":"<p>Note: This release includes several database schema migrations that calculate and store copies of names for certain objects to improve natural ordering performance (see #3799). These migrations may take a few minutes to run if you have a very large number of objects defined in NetBox.</p>"},{"location":"release-notes/version-2.7/#enhancements_6","title":"Enhancements","text":"<ul> <li>#3766 - Allow custom script authors to specify the form widget for each variable</li> <li>#3799 - Greatly improve performance when ordering device components</li> <li>#3984 - Add support for Redis Sentinel</li> <li>#3986 - Include position numbers in SVG image when rendering rack elevations</li> <li>#4093 - Add more status choices for virtual machines</li> <li>#4100 - Add device filter to component list views</li> <li>#4113 - Add bulk edit functionality for device type components</li> <li>#4116 - Enable bulk edit and delete functions for device component list views</li> <li>#4129 - Add buttons to delete individual device type components</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#3507 - Fix filtering IP addresses by multiple devices</li> <li>#3995 - Make dropdown menus in the navigation bar scrollable on small screens</li> <li>#4083 - Permit nullifying applicable choice fields via API requests</li> <li>#4089 - Selection of power outlet type during bulk update is optional</li> <li>#4090 - Render URL custom fields as links under object view</li> <li>#4091 - Fix filtering of objects by custom fields using UI search form</li> <li>#4099 - Linkify interfaces on global interfaces list</li> <li>#4108 - Avoid extraneous database queries when rendering search forms</li> <li>#4134 - Device power ports and outlets should inherit type from the parent device type</li> <li>#4137 - Disable occupied terminations when connecting a cable to a circuit</li> <li>#4138 - Restore device bay counts in rack elevation diagrams</li> <li>#4146 - Fix enforcement of secret role assignment for secret decryption</li> <li>#4150 - Correct YAML rendering of config contexts</li> <li>#4159 - Fix implementation of Redis caching configuration</li> </ul>"},{"location":"release-notes/version-2.7/#v274-2020-02-04","title":"v2.7.4 (2020-02-04)","text":""},{"location":"release-notes/version-2.7/#enhancements_7","title":"Enhancements","text":"<ul> <li>#568 - Allow custom fields to be imported and exported using CSV</li> <li>#2921 - Replace tags filter with Select2 widget</li> <li>#3313 - Toggle config context display between JSON and YAML</li> <li>#3886 - Enable assigning config contexts by cluster and cluster group</li> <li>#4051 - Disable the <code>makemigrations</code> management command</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#4030 - Fix exception when bulk editing interfaces (revised)</li> <li>#4043 - Fix toggling of required fields in custom scripts</li> <li>#4049 - Restore missing <code>tags</code> field in IPAM service serializer</li> <li>#4052 - Fix error when bulk importing interfaces to virtual machines</li> <li>#4056 - Repair schema migration for Rack.outer_unit (from #3569)</li> <li>#4067 - Correct permission checked when creating a rack (vs. editing)</li> <li>#4071 - Enforce \"view tag\" permission on individual tag view</li> <li>#4079 - Fix assignment of power panel when bulk editing power feeds</li> <li>#4084 - Fix exception when creating an interface with tagged VLANs</li> </ul>"},{"location":"release-notes/version-2.7/#v273-2020-01-28","title":"v2.7.3 (2020-01-28)","text":""},{"location":"release-notes/version-2.7/#enhancements_8","title":"Enhancements","text":"<ul> <li>#3310 - Pre-select site/rack for B side when creating a new cable</li> <li>#3338 - Include circuit terminations in API representation of circuits</li> <li>#3509 - Add IP address variables for custom scripts</li> <li>#3978 - Add VRF filtering to search NAT IP</li> <li>#4005 - Include timezone context in webhook timestamps</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#3950 - Automatically select parent manufacturer when specifying initial device type during device creation</li> <li>#3982 - Restore tooltip for reservations on rack elevations</li> <li>#3983 - Permit the creation of multiple unnamed devices</li> <li>#3989 - Correct HTTP content type assignment for webhooks</li> <li>#3999 - Do not filter child results by null if non-required parent fields are blank</li> <li>#4008 - Toggle rack elevation face using front/rear strings</li> <li>#4017 - Remove redundant tenant field from cluster form</li> <li>#4019 - Restore border around background devices in rack elevations</li> <li>#4022 - Fix display of assigned IPs when filtering device interfaces</li> <li>#4025 - Correct display of cable status (various places)</li> <li>#4027 - Repair schema migration for #3569 to convert IP addresses with DHCP status</li> <li>#4028 - Correct URL patterns to match Unicode characters in tag slugs</li> <li>#4030 - Fix exception when setting interfaces to tagged mode in bulk</li> <li>#4033 - Restore missing comments field label of various bulk edit forms</li> </ul>"},{"location":"release-notes/version-2.7/#v272-2020-01-21","title":"v2.7.2 (2020-01-21)","text":""},{"location":"release-notes/version-2.7/#enhancements_9","title":"Enhancements","text":"<ul> <li>#3135 - Documented power modelling</li> <li>#3842 - Add 802.11ax interface type</li> <li>#3954 - Add <code>device_bays</code> filter for devices and device types</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>#3721 - Allow Unicode characters in tag slugs</li> <li>#3923 - Indicate validation failure when using SSH-style RSA keys</li> <li>#3951 - Fix exception in webhook worker due to missing constant</li> <li>#3953 - Fix validation error when creating child devices</li> <li>#3960 - Fix legacy device status choice</li> <li>#3962 - Fix display of unnamed devices in rack elevations</li> <li>#3963 - Restore tooltip for devices in rack elevations</li> <li>#3964 - Show borders around devices in rack elevations</li> <li>#3965 - Indicate the presence of \"background\" devices in rack elevations</li> <li>#3966 - Fix filtering of device components by region/site</li> <li>#3967 - Resolve migration of \"other\" interface type</li> </ul>"},{"location":"release-notes/version-2.7/#v271-2020-01-16","title":"v2.7.1 (2020-01-16)","text":""},{"location":"release-notes/version-2.7/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>#3941 - Fixed exception when attempting to assign IP to interface</li> <li>#3943 - Prevent rack elevation links from opening new tabs/windows</li> <li>#3944 - Fix AttributeError exception when viewing prefixes list</li> </ul>"},{"location":"release-notes/version-2.7/#v270-2020-01-16","title":"v2.7.0 (2020-01-16)","text":"<p>Note: This release completely removes the topology map feature (#2745).</p> <p>Note: NetBox v2.7 is the last major release that will support Python 3.5. Beginning with NetBox v2.8, Python 3.6 or higher will be required.</p>"},{"location":"release-notes/version-2.7/#new-features","title":"New Features","text":""},{"location":"release-notes/version-2.7/#enhanced-device-type-import-451","title":"Enhanced Device Type Import (#451)","text":"<p>NetBox now supports the import of device types and related component templates using definitions written in YAML or JSON. For example, the following will create a new device type with four network interfaces, two power ports, and a console port:</p> <pre><code>manufacturer: Acme\nmodel: Packet Shooter 9000\nslug: packet-shooter-9000\nu_height: 1\ninterfaces:\n- name: ge-0/0/0\ntype: 1000base-t\n- name: ge-0/0/1\ntype: 1000base-t\n- name: ge-0/0/2\ntype: 1000base-t\n- name: ge-0/0/3\ntype: 1000base-t\npower-ports:\n- name: PSU0\n- name: PSU1\nconsole-ports:\n- name: Console\n</code></pre> <p>This new functionality replaces the old CSV-based import form, which did not allow for bulk import of component templates.</p>"},{"location":"release-notes/version-2.7/#bulk-import-of-device-components-822","title":"Bulk Import of Device Components (#822)","text":"<p>Device components such as console ports, power ports, and interfaces can now be imported in bulk to multiple devices in CSV format. Here's an example showing the bulk import of interfaces to several devices:</p> <pre><code>device,name,type\nSwitch1,Vlan100,Virtual\nSwitch1,Vlan200,Virtual\nSwitch2,Vlan100,Virtual\nSwitch2,Vlan200,Virtual\n</code></pre> <p>The import form for each type of device component is available under the \"Devices\" item in the navigation menu.</p>"},{"location":"release-notes/version-2.7/#external-file-storage-1814","title":"External File Storage (#1814)","text":"<p>In prior releases, the only option for storing uploaded files (e.g. image attachments) was to save them to the local filesystem on the NetBox server. This release introduces support for several remote storage backends provided by the <code>django-storages</code> library. These include:</p> <ul> <li>Amazon S3</li> <li>ApacheLibcloud</li> <li>Azure Storage</li> <li>netbox-community Spaces</li> <li>Dropbox</li> <li>FTP</li> <li>Google Cloud Storage</li> <li>SFTP</li> </ul> <p>To enable remote file storage, first install the <code>django-storages</code> package:</p> <pre><code>pip install django-storages\n</code></pre> <p>Then, set the appropriate storage backend and its configuration in <code>configuration.py</code>. Here's an example using Amazon S3:</p> <pre><code>STORAGE_BACKEND = 'storages.backends.s3boto3.S3Boto3Storage'\nSTORAGE_CONFIG = {\n    'AWS_ACCESS_KEY_ID': '&lt;Key&gt;',\n    'AWS_SECRET_ACCESS_KEY': '&lt;Secret&gt;',\n    'AWS_STORAGE_BUCKET_NAME': 'netbox',\n    'AWS_S3_REGION_NAME': 'eu-west-1',\n}\n</code></pre> <p>Thanks to @steffann for contributing this work!</p>"},{"location":"release-notes/version-2.7/#rack-elevations-rendered-via-svg-2248","title":"Rack Elevations Rendered via SVG (#2248)","text":"<p>NetBox v2.7 introduces a new method of rendering rack elevations as an SVG image via a REST API endpoint. This replaces the prior method of rendering elevations using pure HTML and CSS, which was cumbersome and had several shortcomings. Rendering rack elevations as SVG images via the REST API allows users to retrieve and make use of the drawings in their own tooling. This also opens the door to other feature requests related to rack elevations in the NetBox backlog.</p> <p>This feature implements a new REST API endpoint:</p> <pre><code>/api/dcim/racks/&lt;id&gt;/elevation/\n</code></pre> <p>By default, this endpoint returns a paginated JSON response representing each rack unit in the given elevation. This is the same response returned by the existing rack units detail endpoint at <code>/api/dcim/racks/&lt;id&gt;/units/</code>, which will be removed in v2.8 (see #3753).</p> <p>To render the elevation as an SVG image, include the <code>render=svg</code> query parameter in the request. You may also control the width and height of the elevation drawing (in pixels) by passing the <code>unit_width</code> and <code>unit_height</code> parameters. (The default values for these parameters are 230 and 20, respectively.) Additionally, the <code>face</code> parameter may be used to request either the <code>front</code> or <code>rear</code> of the elevation. Below is in example request:</p> <pre><code>/api/dcim/racks/&lt;id&gt;/elevation/?render=svg&amp;face=rear&amp;unit_width=300&amp;unit_height=35\n</code></pre> <p>Thanks to @hellerve for doing the heavy lifting on this!</p>"},{"location":"release-notes/version-2.7/#changes","title":"Changes","text":""},{"location":"release-notes/version-2.7/#topology-maps-removed-2745","title":"Topology Maps Removed (#2745)","text":"<p>The topology maps feature has been removed to help focus NetBox development efforts. Please replicate any required data to another source before upgrading NetBox to v2.7, as any existing topology maps will be deleted.</p>"},{"location":"release-notes/version-2.7/#supervisor-replaced-with-systemd-2902","title":"Supervisor Replaced with systemd (#2902)","text":"<p>The NetBox installation documentation has been updated to provide instructions for managing the WSGI and RQ services using systemd instead of supervisor. This removes the need to install supervisor and simplifies administration of the processes.</p>"},{"location":"release-notes/version-2.7/#redis-configuration-3282","title":"Redis Configuration (#3282)","text":"<p>NetBox v2.6 introduced request caching and added the <code>CACHE_DATABASE</code> option to the existing <code>REDIS</code> database configuration parameter. This did not, however, allow for using two different Redis connections for the separate caching and webhook queuing functions. This release modifies the <code>REDIS</code> parameter to accept two discrete subsections named <code>webhooks</code> and <code>caching</code>. This requires modification of the <code>REDIS</code> parameter in <code>configuration.py</code> as follows:</p> <p>Old Redis configuration:</p> <pre><code>REDIS = {\n    'HOST': 'localhost',\n    'PORT': 6379,\n    'PASSWORD': '',\n    'DATABASE': 0,\n    'CACHE_DATABASE': 1,\n    'DEFAULT_TIMEOUT': 300,\n    'SSL': False,\n}\n</code></pre> <p>New Redis configuration:</p> <pre><code>REDIS = {\n    'webhooks': {\n        'HOST': 'redis.example.com',\n        'PORT': 1234,\n        'PASSWORD': 'foobar',\n        'DATABASE': 0,\n        'DEFAULT_TIMEOUT': 300,\n        'SSL': False,\n    },\n    'caching': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'PASSWORD': '',\n        'DATABASE': 1,\n        'DEFAULT_TIMEOUT': 300,\n        'SSL': False,\n    }\n}\n</code></pre> <p>Note that the <code>CACHE_DATABASE</code> parameter has been removed and the connection settings have been duplicated for both <code>webhooks</code> and <code>caching</code>. This allows the user to make use of separate Redis instances if desired. It is fine to use the same Redis service for both functions, although the database identifiers should be different.</p>"},{"location":"release-notes/version-2.7/#webhooks_enabled-configuration-setting-removed-3408","title":"WEBHOOKS_ENABLED Configuration Setting Removed (#3408)","text":"<p>As <code>django-rq</code> is now a required library, NetBox assumes that the RQ worker process is running. The installation and upgrade documentation has been updated to reflect this, and the <code>WEBHOOKS_ENABLED</code> configuration parameter is no longer used. Please ensure that both the NetBox WSGI service and the RQ worker process are running on all production installations.</p>"},{"location":"release-notes/version-2.7/#api-choice-fields-now-use-string-values-3569","title":"API Choice Fields Now Use String Values (#3569)","text":"<p>NetBox's REST API presents fields which reference a particular choice as a dictionary with two keys: <code>value</code> and <code>label</code>. In previous versions, <code>value</code> was an integer which represented a particular choice in the database. This has been changed to a more human-friendly \"slug\" string, which is essentially a simplified version of the choice's <code>label</code>.</p> <p>For example, The site model's <code>status</code> field was previously represented as:</p> <pre><code>\"status\": {\n\"value\": 1,\n\"label\": \"Active\"\n},\n</code></pre> <p>In NetBox v2.7, it now looks like this:</p> <pre><code>\"status\": {\n\"value\": \"active\",\n\"label\": \"Active\",\n\"id\": 1\n},\n</code></pre> <p>This change allows for much more intuitive representation and manipulation of values, and removes the need for API consumers to maintain local mappings of static integer values.</p> <p>Note that that all v2.7 releases will continue to accept the legacy integer values in write requests (<code>POST</code>, <code>PUT</code>, and <code>PATCH</code>) to maintain backward compatibility. Additionally, the legacy numeric identifier is conveyed in the <code>id</code> field for convenient reference as consumers adopt to the new string values. This behavior will be discontinued in NetBox v2.8.</p>"},{"location":"release-notes/version-2.7/#enhancements_10","title":"Enhancements","text":"<ul> <li>#33 - Add ability to clone objects (pre-populate form fields)</li> <li>#648 - Pre-populate form fields when selecting \"create and   add another\"</li> <li>#792 - Add power port and power outlet types</li> <li>#1865 - Add console port and console server port types</li> <li>#2669 - Relax uniqueness constraint on device and VM names</li> <li>#2902 - Replace <code>supervisord</code> with <code>systemd</code></li> <li>#3455 - Add tenant assignment to virtual machine clusters</li> <li>#3520 - Add Jinja2 template support for graphs</li> <li>#3525 - Enable IP address filtering using multiple address   parameters</li> <li>#3564 - Add list views for all device components</li> <li>#3538 - Introduce a REST API endpoint for executing custom   scripts</li> <li>#3655 - Add <code>description</code> field to organizational models</li> <li>#3664 - Enable applying configuration contexts by tags</li> <li>#3706 - Increase <code>available_power</code> maximum value on   PowerFeed</li> <li>#3731 - Change Graph.type to a ContentType foreign key field</li> <li>#3801 - Use YAML for export of device types</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>#3830 - Ensure deterministic ordering for all models</li> <li>#3900 - Fix exception when deleting device types</li> <li>#3914 - Fix interface filter field when unauthenticated</li> <li>#3919 - Fix utilization graph extending out of bounds when   utilization &gt; 100%</li> <li>#3927 - Fix exception when deleting devices with secrets   assigned</li> <li>#3930 - Fix API rendering of the <code>family</code> field for   aggregates</li> </ul>"},{"location":"release-notes/version-2.7/#bug-fixes-from-beta","title":"Bug Fixes (From Beta)","text":"<ul> <li>#3868 - Fix creation of interfaces for virtual machines</li> <li>#3878 - Fix database migration for cable status field</li> </ul>"},{"location":"release-notes/version-2.7/#api-changes","title":"API Changes","text":"<ul> <li>Choice fields now use human-friendly strings for their values instead of integers (see   #3569).</li> <li>Introduced the <code>/api/extras/scripts/</code> endpoint for retrieving and executing custom scripts</li> <li>circuits.CircuitType: Added field <code>description</code></li> <li>dcim.ConsolePort: Added field <code>type</code></li> <li>dcim.ConsolePortTemplate: Added field <code>type</code></li> <li>dcim.ConsoleServerPort: Added field <code>type</code></li> <li>dcim.ConsoleServerPortTemplate: Added field <code>type</code></li> <li>dcim.DeviceRole: Added field <code>description</code></li> <li>dcim.PowerPort: Added field <code>type</code></li> <li>dcim.PowerPortTemplate: Added field <code>type</code></li> <li>dcim.PowerOutlet: Added field <code>type</code></li> <li>dcim.PowerOutletTemplate: Added field <code>type</code></li> <li>dcim.RackRole: Added field <code>description</code></li> <li>extras.Graph: Added field <code>template_language</code> (to indicate <code>django</code> or <code>jinja2</code>)</li> <li>extras.Graph: The <code>type</code> field has been changed to a content type foreign key. Models are specified as   <code>&lt;app&gt;.&lt;model&gt;</code>; e.g. <code>dcim.site</code>.</li> <li>ipam.Role: Added field <code>description</code></li> <li>secrets.SecretRole: Added field <code>description</code></li> <li>virtualization.Cluster: Added field <code>tenant</code></li> </ul>"},{"location":"release-notes/version-2.8/","title":"NetBox v2.8","text":""},{"location":"release-notes/version-2.8/#v289-2020-08-04","title":"v2.8.9 (2020-08-04)","text":""},{"location":"release-notes/version-2.8/#enhancements","title":"Enhancements","text":"<ul> <li>#4898 - Add MAC address search field to interfaces list</li> <li>#4899 - Add MAC address column to interfaces table</li> </ul>"},{"location":"release-notes/version-2.8/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#4455 - Fix ordering of prefixes beneath aggregate when available space is hidden</li> <li>#4875 - Fix documentation for image attachments</li> <li>#4876 - Fix labels for sites in staging or decommissioning status</li> <li>#4880 - Fix removal of tagged VLANs if not assigned in bulk interface editing</li> <li>#4887 - Don't disable NAPALM tabs when device has no primary IP</li> <li>#4894 - Fix display of device/VM counts on platforms list</li> <li>#4895 - Force UTF-8 encoding when embedding model documentation</li> <li>#4910 - Unpin redis dependency to fix exception in RQ worker</li> <li>#4926 - Fix ordering of VM interfaces in REST API endpoint</li> <li>#4927 - Fix validation error when updating an existing secret</li> <li>#4929 - Correct log message when creating a new object</li> </ul>"},{"location":"release-notes/version-2.8/#v288-2020-07-21","title":"v2.8.8 (2020-07-21)","text":""},{"location":"release-notes/version-2.8/#enhancements_1","title":"Enhancements","text":"<ul> <li>#4805 - Improve handling of plugin loading errors</li> <li>#4829 - Add NEMA 15 power port and outlet types</li> <li>#4831 - Allow NAPALM to resolve device name when primary IP is not set</li> <li>#4854 - Add staging and decommissioning statuses for sites</li> </ul>"},{"location":"release-notes/version-2.8/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#3240 - Correct OpenAPI definition for available-prefixes endpoint</li> <li>#4595 - Ensure consistent display of non-racked and child devices on rack view</li> <li>#4803 - Return IP family (4 or 6) as integer rather than string</li> <li>#4821 - Restrict group options by selected site when bulk editing VLANs</li> <li>#4835 - Support passing multiple initial values for multiple choice fields</li> <li>#4838 - Fix rack power utilization display for racks without devices</li> <li>#4851 - Show locally connected peer on circuit terminations</li> <li>#4856 - Redirect user back to circuit after connecting a termination</li> <li>#4872 - Enable filtering virtual machine interfaces by tag</li> </ul>"},{"location":"release-notes/version-2.8/#v287-2020-07-02","title":"v2.8.7 (2020-07-02)","text":""},{"location":"release-notes/version-2.8/#enhancements_2","title":"Enhancements","text":"<ul> <li>#4796 - Introduce configuration parameters for default rack elevation size</li> <li>#4802 - Allow changing page size when displaying only a single page of results</li> </ul>"},{"location":"release-notes/version-2.8/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#4695 - Expose cable termination type choices in OpenAPI spec</li> <li>#4708 - Relax connection constraints for multi-position rear ports</li> <li>#4766 - Fix redirect after login when <code>next</code> is not specified</li> <li>#4771 - Fix add/remove tag population when bulk editing objects</li> <li>#4772 - Fix \"brief\" format for the secrets REST API endpoint</li> <li>#4774 - Fix exception when deleting a device with device bays</li> <li>#4775 - Allow selecting an alternate device type when creating component templates</li> </ul>"},{"location":"release-notes/version-2.8/#v286-2020-06-15","title":"v2.8.6 (2020-06-15)","text":""},{"location":"release-notes/version-2.8/#enhancements_3","title":"Enhancements","text":"<ul> <li>#4698 - Improve display of template code for object in admin UI</li> <li>#4717 - Introduce <code>ALLOWED_URL_SCHEMES</code> configuration parameter to mitigate dangerous hyperlinks</li> <li>#4744 - Hide \"IP addresses\" tab when viewing a container prefix</li> <li>#4755 - Enable creation of rack reservations directly from navigation menu</li> <li>#4761 - Enable tag assignment during bulk creation of IP addresses</li> </ul>"},{"location":"release-notes/version-2.8/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#4674 - Fix API definition for available prefix and IP address endpoints</li> <li>#4702 - Catch IntegrityError exception when adding a non-unique secret</li> <li>#4707 - Fix <code>prefix_count</code> population on VLAN API serializer</li> <li>#4710 - Fix merging of form fields among custom scripts</li> <li>#4725 - Fix \"brief\" rendering of various REST API endpoints</li> <li>#4736 - Add cable trace endpoints for pass-through ports</li> <li>#4737 - Fix display of role labels in virtual machines table</li> <li>#4743 - Allow users to create \"next available\" IPs without needing permission to create prefixes</li> <li>#4756 - Filter parent group by site when creating rack groups</li> <li>#4760 - Enable power port template assignment when bulk editing power outlet templates</li> </ul>"},{"location":"release-notes/version-2.8/#v285-2020-05-26","title":"v2.8.5 (2020-05-26)","text":"<p>Note: The minimum required version of PostgreSQL is now 9.6.</p>"},{"location":"release-notes/version-2.8/#enhancements_4","title":"Enhancements","text":"<ul> <li>#4650 - Expose <code>INTERNAL_IPS</code> configuration parameter</li> <li>#4651 - Add <code>csrf_token</code> context for plugin templates</li> <li>#4652 - Add permissions context for plugin templates</li> <li>#4665 - Add NEMA L14 and L21 power port/outlet types</li> <li>#4672 - Set default color for rack and devices roles</li> </ul>"},{"location":"release-notes/version-2.8/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#3304 - Fix caching invalidation issue related to device/virtual machine primary IP addresses</li> <li>#4525 - Allow passing initial data to custom script MultiObjectVar</li> <li>#4644 - Fix ordering of services table by parent</li> <li>#4646 - Correct UI link for reports with custom name</li> <li>#4647 - Fix caching invalidation issue related to assigning new IP addresses to interfaces</li> <li>#4648 - Fix bulk CSV import of child devices</li> <li>#4649 - Fix interface assignment for bulk-imported IP addresses</li> <li>#4676 - Set default value of <code>REMOTE_AUTH_AUTO_CREATE_USER</code> as <code>False</code> in docs</li> <li>#4684 - Respect <code>comments</code> field when importing device type in YAML/JSON format</li> </ul>"},{"location":"release-notes/version-2.8/#v284-2020-05-13","title":"v2.8.4 (2020-05-13)","text":""},{"location":"release-notes/version-2.8/#enhancements_5","title":"Enhancements","text":"<ul> <li>#4632 - Extend email configuration parameters to support SSL/TLS</li> </ul>"},{"location":"release-notes/version-2.8/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#4598 - Display error message when invalid cable length is specified</li> <li>#4604 - Multi-position rear ports may only be connected to other rear ports</li> <li>#4607 - Missing Contextual help for API Tokens</li> <li>#4613 - Fix tag assignment on config contexts (regression from #4527)</li> <li>#4617 - Restore IP prefix depth notation in list view</li> <li>#4629 - Replicate assigned interface when cloning IP addresses</li> <li>#4633 - Bump django-rq to v2.3.2 to fix ImportError with rq 1.4.0</li> <li>#4634 - Inventory Item List view exception caused by incorrect accessor definition </li> </ul>"},{"location":"release-notes/version-2.8/#v283-2020-05-06","title":"v2.8.3 (2020-05-06)","text":""},{"location":"release-notes/version-2.8/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#4593 - Fix AttributeError exception when viewing object lists as a non-authenticated user</li> </ul>"},{"location":"release-notes/version-2.8/#v282-2020-05-06","title":"v2.8.2 (2020-05-06)","text":""},{"location":"release-notes/version-2.8/#enhancements_6","title":"Enhancements","text":"<ul> <li>#492 - Enable toggling and rearranging table columns</li> <li>#3147 - Allow specifying related objects by arbitrary attribute during CSV import</li> <li>#3064 - Include tags in object lists as a toggleable table column</li> <li>#3294 - Implement mechanism for storing user preferences</li> <li>#4421 - Retain user's preference for config context format</li> <li>#4502 - Enable configuration of proxies for outbound HTTP requests</li> <li>#4531 - Retain user's preference for page length</li> <li>#4554 - Add ServerTech's HDOT Cx power outlet type</li> </ul>"},{"location":"release-notes/version-2.8/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#4527 - Fix assignment of certain tags to config contexts</li> <li>#4545 - Removed all squashed schema migrations to allow direct upgrades from very old releases</li> <li>#4548 - Fix tracing cables through a single RearPort</li> <li>#4549 - Fix encoding unicode webhook body data</li> <li>#4556 - Update form for adding devices to clusters</li> <li>#4578 - Prevent setting 0U height on device type with racked instances</li> <li>#4584 - Ensure consistent support for filtering objects by <code>id</code> across all REST API endpoints</li> <li>#4588 - Restore ability to add/remove tags on services, virtual chassis in bulk</li> </ul>"},{"location":"release-notes/version-2.8/#v281-2020-04-23","title":"v2.8.1 (2020-04-23)","text":""},{"location":"release-notes/version-2.8/#notes","title":"Notes","text":"<p>In accordance with the fix in #4459, users that are experiencing invalid nested data with regions, rack groups, or tenant groups can perform a one-time operation using the NetBox shell to rebuild the correct nested relationships after upgrading:</p> <pre><code>$ python netbox/manage.py nbshell\n### NetBox interactive shell (localhost)\n### Python 3.6.4 | Django 3.0.5 | NetBox 2.8.1\n### lsmodels() will show available models. Use help(&lt;model&gt;) for more info.\n&gt;&gt;&gt; Region.objects.rebuild()\n&gt;&gt;&gt; RackGroup.objects.rebuild()\n&gt;&gt;&gt; TenantGroup.objects.rebuild()\n</code></pre>"},{"location":"release-notes/version-2.8/#enhancements_7","title":"Enhancements","text":"<ul> <li>#4464 - Add 21-inch rack width (ETSI)</li> </ul>"},{"location":"release-notes/version-2.8/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#2994 - Prevent modifying termination points of existing cable to ensure end-to-end path integrity</li> <li>#3356 - Correct Swagger schema specification for the available prefixes/IPs API endpoints</li> <li>#4139 - Enable assigning all relevant attributes during bulk device/VM component creation</li> <li>#4336 - Ensure interfaces without a subinterface ID are ordered before subinterface zero</li> <li>#4361 - Fix Type of <code>connection_state</code> in Swagger schema</li> <li>#4388 - Fix detection of connected endpoints when connecting rear ports</li> <li>#4459 - Fix caching issue resulting in erroneous nested data for regions, rack groups, and tenant groups</li> <li>#4489 - Fix display of parent/child role on device type view</li> <li>#4496 - Fix exception when validating certain models via REST API</li> <li>#4510 - Enforce address family for device primary IPv4/v6 addresses</li> </ul>"},{"location":"release-notes/version-2.8/#v280-2020-04-13","title":"v2.8.0 (2020-04-13)","text":"<p>NOTE: Beginning with release 2.8.0, NetBox requires Python 3.6 or later.</p>"},{"location":"release-notes/version-2.8/#new-features-beta","title":"New Features (Beta)","text":"<p>This releases introduces two new features in beta status. While they are expected to be functional, their precise implementation is subject to change during the v2.8 release cycle. It is recommended to wait until NetBox v2.9 to deploy them in production.</p>"},{"location":"release-notes/version-2.8/#remote-authentication-support-2328","title":"Remote Authentication Support (#2328)","text":"<p>Several new configuration parameters provide support for authenticating an incoming request based on the value of a specific HTTP header. This can be leveraged to employ remote authentication via an nginx or Apache plugin, directing NetBox to create and configure a local user account as needed. The configuration parameters are:</p> <ul> <li><code>REMOTE_AUTH_ENABLED</code> - Enables remote authentication (disabled by default)</li> <li><code>REMOTE_AUTH_HEADER</code> - The name of the HTTP header which conveys the username</li> <li><code>REMOTE_AUTH_AUTO_CREATE_USER</code> - Enables the automatic creation of new users (disabled by default)</li> <li><code>REMOTE_AUTH_DEFAULT_GROUPS</code> - A list of groups to assign newly created users</li> <li><code>REMOTE_AUTH_DEFAULT_PERMISSIONS</code> - A list of permissions to assign newly created users</li> </ul> <p>If further customization of remote authentication is desired (for instance, if you want to pass group/permission information via HTTP headers as well), NetBox allows you to inject a custom Django authentication backend to retain full control over the authentication and configuration of remote users.</p>"},{"location":"release-notes/version-2.8/#plugins-3351","title":"Plugins (#3351)","text":"<p>This release introduces support for custom plugins, which can be used to extend NetBox's functionality beyond what the core product provides. For example, plugins can be used to:</p> <ul> <li>Add new Django models</li> <li>Provide new views with custom templates</li> <li>Inject custom template into object views</li> <li>Introduce new API endpoints</li> <li>Add custom request/response middleware</li> </ul> <p>For NetBox plugins to be recognized, they must be installed and added by name to the <code>PLUGINS</code> configuration parameter. (Plugin support is disabled by default.) Plugins can be configured under the <code>PLUGINS_CONFIG</code> parameter. More information can be found the in the plugins documentation.</p>"},{"location":"release-notes/version-2.8/#enhancements_8","title":"Enhancements","text":"<ul> <li>#1754 - Added support for nested rack groups</li> <li>#3939 - Added support for nested tenant groups</li> <li>#4078 - Standardized description fields across all models</li> <li>#4195 - Enabled application logging (see logging configuration)</li> </ul>"},{"location":"release-notes/version-2.8/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#4474 - Fix population of device types when bulk editing devices</li> <li>#4476 - Correct typo in slugs for Infiniband interface types</li> </ul>"},{"location":"release-notes/version-2.8/#api-changes","title":"API Changes","text":"<ul> <li>The <code>_choices</code> API endpoints have been removed. Instead, use an <code>OPTIONS</code> request to a model's endpoint to view the available values for all fields. (#3416)</li> <li>The <code>id__in</code> filter has been removed from all models (#4313). Use the format <code>?id=1&amp;id=2</code> instead.</li> <li>dcim.Manufacturer: Added a <code>description</code> field</li> <li>dcim.Platform: Added a <code>description</code> field</li> <li>dcim.Rack: The <code>/api/dcim/racks/&lt;pk&gt;/units/</code> endpoint has been replaced with <code>/api/dcim/racks/&lt;pk&gt;/elevation/</code>.</li> <li>dcim.RackGroup: Added a <code>description</code> field</li> <li>dcim.Region: Added a <code>description</code> field</li> <li>extras.Tag: Renamed <code>comments</code> to <code>description</code>; truncated length to 200 characters; removed Markdown rendering</li> <li>ipam.RIR: Added a <code>description</code> field</li> <li>ipam.VLANGroup: Added a <code>description</code> field</li> <li>tenancy.TenantGroup: Added a <code>description</code> field</li> <li>virtualization.ClusterGroup: Added a <code>description</code> field</li> <li>virtualization.ClusterType: Added a <code>description</code> field</li> </ul>"},{"location":"release-notes/version-2.8/#other-changes","title":"Other Changes","text":"<ul> <li>#4081 - The <code>family</code> field has been removed from the Aggregate, Prefix, and IPAddress models. The field remains available in the API representations of these models, however the column has been removed from the database table.</li> </ul>"},{"location":"release-notes/version-2.9/","title":"NetBox v2.9","text":""},{"location":"release-notes/version-2.9/#v2911-2020-12-11","title":"v2.9.11 (2020-12-11)","text":""},{"location":"release-notes/version-2.9/#enhancements","title":"Enhancements","text":"<ul> <li>#5424 - Allow passing Python code to <code>nbshell</code> using <code>--command</code></li> <li>#5439 - Add CS and SN fiber port types</li> </ul>"},{"location":"release-notes/version-2.9/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#5383 - Fix setting user password via REST API</li> <li>#5396 - Fix uniqueness constraint for virtual machine names</li> <li>#5387 - Fix error when rendering config contexts when objects have multiple tags assigned</li> <li>#5407 - Add direct link to secret on secrets list</li> <li>#5408 - Fix updating secrets without setting new plaintext</li> <li>#5410 - Restore tags field on cable connection forms</li> <li>#5433 - Exclude SVG files from front/rear image upload for device types (currently unsupported)</li> <li>#5436 - Show assigned IP addresses in interfaces list</li> <li>#5446 - Fix validation for plugin version and required settings</li> </ul>"},{"location":"release-notes/version-2.9/#v2910-2020-11-24","title":"v2.9.10 (2020-11-24)","text":""},{"location":"release-notes/version-2.9/#enhancements_1","title":"Enhancements","text":"<ul> <li>#5319 - Add USB types for power ports and outlets</li> <li>#5337 - Add \"splice\" type for pass-through ports</li> </ul>"},{"location":"release-notes/version-2.9/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#5235 - Fix exception when editing IP address with a NAT IP assigned to a non-racked device</li> <li>#5309 - Avoid extraneous database queries when manipulating objects</li> <li>#5345 - Fix non-deterministic ordering of prefixes and IP addresses</li> <li>#5350 - Filter available racks by selected group when creating a rack reservation</li> <li>#5355 - Limit rack groups by selected site when editing a rack</li> <li>#5356 - Populate manufacturer field when adding a device component template</li> <li>#5360 - Clear VLAN assignments when setting interface mode to none</li> </ul>"},{"location":"release-notes/version-2.9/#v299-2020-11-09","title":"v2.9.9 (2020-11-09)","text":""},{"location":"release-notes/version-2.9/#enhancements_2","title":"Enhancements","text":"<ul> <li>#5304 - Return server error messages as JSON when handling REST API requests</li> <li>#5310 - Link to rack groups within rack list table</li> <li>#5327 - Be more strict when capturing anticipated ImportError exceptions</li> </ul>"},{"location":"release-notes/version-2.9/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#5271 - Fix auto-population of region field when editing a device</li> <li>#5314 - Fix config context rendering when multiple tags are assigned to an object</li> <li>#5316 - Dry running scripts should not trigger webhooks</li> <li>#5324 - Add missing template extension tags for plugins for VM interface view</li> <li>#5328 - Fix CreatedUpdatedFilterTest when running in non-UTC timezone</li> <li>#5331 - Fix filtering of sites by null region</li> </ul>"},{"location":"release-notes/version-2.9/#v298-2020-10-30","title":"v2.9.8 (2020-10-30)","text":""},{"location":"release-notes/version-2.9/#enhancements_3","title":"Enhancements","text":"<ul> <li>#4559 - Improve device/VM context data rendering performance</li> </ul>"},{"location":"release-notes/version-2.9/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#3672 - Fix a caching issue causing incorrect related object counts in API responses</li> <li>#5113 - Fix incorrect caching of permission object assignments to user groups in the admin panel</li> <li>#5243 - Redirect user to appropriate tab after modifying device components</li> <li>#5273 - Fix exception when validating a new permission with no models selected</li> <li>#5282 - Fix high CPU load when LDAP authentication is enabled</li> <li>#5285 - Plugins no longer need to define <code>app_name</code> for API URLs to be included in the root view</li> </ul>"},{"location":"release-notes/version-2.9/#v297-2020-10-12","title":"v2.9.7 (2020-10-12)","text":""},{"location":"release-notes/version-2.9/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#5231 - Fix KeyError exception when viewing object with custom link and debugging is disabled</li> </ul>"},{"location":"release-notes/version-2.9/#v296-2020-10-09","title":"v2.9.6 (2020-10-09)","text":""},{"location":"release-notes/version-2.9/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#5229 - Fix AttributeError exception when LDAP authentication is enabled</li> </ul>"},{"location":"release-notes/version-2.9/#v295-2020-10-09","title":"v2.9.5 (2020-10-09)","text":""},{"location":"release-notes/version-2.9/#enhancements_4","title":"Enhancements","text":"<ul> <li>#5202 - Extend the available context data when rendering custom links</li> </ul>"},{"location":"release-notes/version-2.9/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#4523 - Populate site vlan list when bulk editing interfaces under certain circumstances</li> <li>#5174 - Ensure consistent alignment of rack elevations</li> <li>#5175 - Fix toggling of rack elevation order</li> <li>#5184 - Fix missing Power Utilization</li> <li>#5197 - Limit duplicate IPs shown on IP address view</li> <li>#5199 - Change default LDAP logging to INFO</li> <li>#5201 - Fix missing querystring when bulk editing/deleting VLAN Group VLANs when selecting \"select all x items matching query\"</li> <li>#5206 - Apply user pagination preferences to all paginated object lists</li> <li>#5211 - Add missing <code>has_primary_ip</code> filter for virtual machines</li> <li>#5217 - Prevent erroneous removal of prefetched GenericForeignKey data from tables</li> <li>#5218 - Raise validation error if a power port's <code>allocated_draw</code> exceeds its <code>maximum_draw</code></li> <li>#5220 - Fix API patch request against IP Address endpoint with null assigned_object_type </li> <li>#5221 - Fix bulk component creation for virtual machines</li> <li>#5224 - Don't allow a rear port to have fewer positions than the number of mapped front ports</li> <li>#5226 - Custom choice fields should be blank initially if no default choice has been designated</li> </ul>"},{"location":"release-notes/version-2.9/#v294-2020-09-23","title":"v2.9.4 (2020-09-23)","text":"<p>NOTE: This release removes support for the <code>DEFAULT_TIMEOUT</code> parameter under <code>REDIS</code> database configuration. Set <code>RQ_DEFAULT_TIMEOUT</code> as a global configuration parameter instead.</p> <p>NOTE: Any permissions referencing the legacy ReportResult model (e.g. <code>extras.view_reportresult</code>) should be updated to reference the Report model.</p>"},{"location":"release-notes/version-2.9/#enhancements_5","title":"Enhancements","text":"<ul> <li>#1755 - Toggle order in which rack elevations are displayed</li> <li>#5128 - Increase maximum rear port positions from 64 to 1024</li> <li>#5134 - Display full hierarchy in breadcrumbs for sites/racks</li> <li>#5149 - Add rack group field to device edit form</li> <li>#5164 - Show total rack count per rack group under site view</li> <li>#5171 - Introduce the <code>RQ_DEFAULT_TIMEOUT</code> configuration parameter</li> </ul>"},{"location":"release-notes/version-2.9/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#5050 - Fix potential failure on <code>0016_replicate_interfaces</code> schema migration from old release</li> <li>#5066 - Update <code>view_reportresult</code> to <code>view_report</code> permission</li> <li>#5075 - Include a VLAN membership view for VM interfaces</li> <li>#5105 - Validation should fail when reassigning a primary IP from device to VM</li> <li>#5109 - Fix representation of custom choice field values for webhook data</li> <li>#5108 - Fix execution of reports via CLI</li> <li>#5111 - Allow use of tuples when specifying ObjectVar <code>query_params</code></li> <li>#5118 - Specifying an empty list of tags should clear assigned tags (REST API)</li> <li>#5133 - Fix disassociation of an IP address from a VM interface</li> <li>#5136 - Fix exception when bulk editing interface 802.1Q mode</li> <li>#5156 - Add missing \"add\" button to rack reservations list</li> <li>#5167 - Support filtering ObjectChanges by multiple users</li> </ul>"},{"location":"release-notes/version-2.9/#v293-2020-09-04","title":"v2.9.3 (2020-09-04)","text":""},{"location":"release-notes/version-2.9/#enhancements_6","title":"Enhancements","text":"<ul> <li>#4977 - Redirect authenticated users from login view</li> <li>#5048 - Show the device/VM name when editing a component</li> <li>#5072 - Add REST API filters for image attachments</li> <li>#5080 - Add 8P6C, 8P4C, 8P2C port types</li> </ul>"},{"location":"release-notes/version-2.9/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#5046 - Disabled plugin menu items are no longer clickable</li> <li>#5063 - Fix \"add device\" link in rack elevations for opposite side of half-depth devices</li> <li>#5074 - Fix inclusion of VC member interfaces when viewing VC master</li> <li>#5078 - Fix assignment of existing IP addresses to interfaces via web UI</li> <li>#5081 - Fix exception during webhook processing with custom select field</li> <li>#5085 - Fix ordering by assignment in IP addresses table</li> <li>#5087 - Restore label field when editing console server ports, power ports, and power outlets</li> <li>#5089 - Redirect to device view after editing component</li> <li>#5090 - Fix status display for console/power/interface connections</li> <li>#5091 - Avoid KeyError when handling invalid table preferences</li> <li>#5095 - Show assigned prefixes in VLANs list</li> </ul>"},{"location":"release-notes/version-2.9/#v292-2020-08-27","title":"v2.9.2 (2020-08-27)","text":""},{"location":"release-notes/version-2.9/#enhancements_7","title":"Enhancements","text":"<ul> <li>#5055 - Add tags column to device/VM component list tables</li> <li>#5056 - Add interface and parent columns to IP address list</li> </ul>"},{"location":"release-notes/version-2.9/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#4988 - Fix ordering of rack reservations with identical creation times</li> <li>#5002 - Correct OpenAPI definition for <code>available-prefixes</code> endpoint</li> <li>#5035 - Fix exception when modifying an IP address assigned to a VM</li> <li>#5038 - Fix validation of primary IPs assigned to virtual machines</li> <li>#5040 - Limit SLAAC status to IPv6 addresses</li> <li>#5041 - Fix form tabs when assigning an IP to a VM interface</li> <li>#5042 - Fix display of SLAAC label for IP addresses status</li> <li>#5045 - Allow assignment of interfaces to non-master VC peer LAG during import</li> <li>#5058 - Correct URL for front rack elevation images when using external storage</li> <li>#5059 - Fix inclusion of checkboxes for interfaces in virtual machine view</li> <li>#5060 - Fix validation when bulk-importing child devices</li> <li>#5061 - Allow adding/removing tags when bulk editing virtual machine interfaces</li> </ul>"},{"location":"release-notes/version-2.9/#v291-2020-08-22","title":"v2.9.1 (2020-08-22)","text":""},{"location":"release-notes/version-2.9/#enhancements_8","title":"Enhancements","text":"<ul> <li>#4540 - Add IP address status type for SLAAC</li> <li>#4814 - Allow nested LAG interfaces</li> <li>#4991 - Add Python and NetBox versions to error page</li> <li>#5033 - Support backward compatibility for <code>REMOTE_AUTH_BACKEND</code> configuration parameter</li> </ul>"},{"location":"release-notes/version-2.9/#v290-2020-08-21","title":"v2.9.0 (2020-08-21)","text":"<p>Note: Redis 4.0 or later is required for this release.</p>"},{"location":"release-notes/version-2.9/#new-features","title":"New Features","text":""},{"location":"release-notes/version-2.9/#object-based-permissions-554","title":"Object-Based Permissions (#554)","text":"<p>NetBox v2.9 replaces Django's built-in permissions framework with one that supports object-based assignment of permissions using arbitrary constraints. When granting a user or group permission to perform a certain action on one or more types of objects, an administrator can optionally specify a set of constraints. The permission will apply only to objects which match the specified constraints. For example, assigning permission to modify devices with the constraint <code>{\"tenant__group__name\": \"Customers\"}</code> would allow the associated users/groups to perform an action only on devices assigned to a tenant belonging to the \"Customers\" group.</p>"},{"location":"release-notes/version-2.9/#background-execution-of-scripts-reports-2006","title":"Background Execution of Scripts &amp; Reports (#2006)","text":"<p>When running a report or custom script, its execution is now queued for background processing and the user receives an immediate response indicating its status. This prevents long-running scripts from resulting in a timeout error. Once the execution has completed, the page will automatically refresh to display its results. Both scripts and reports now store their output in the new JobResult model. (The ReportResult model has been removed.)</p>"},{"location":"release-notes/version-2.9/#named-virtual-chassis-2018","title":"Named Virtual Chassis (#2018)","text":"<p>The VirtualChassis model now has a mandatory <code>name</code> field. Names are assigned to the virtual chassis itself rather than referencing the master VC member. Additionally, the designation of a master is now optional: a virtual chassis may have only non-master members.</p>"},{"location":"release-notes/version-2.9/#changes-to-tag-creation-3703","title":"Changes to Tag Creation (#3703)","text":"<p>Tags are no longer created automatically: A tag must be created by a user before it can be applied to any object. Additionally, the REST API representation of assigned tags has been expanded to be consistent with other objects.</p>"},{"location":"release-notes/version-2.9/#dedicated-model-for-vm-interfaces-4721","title":"Dedicated Model for VM Interfaces (#4721)","text":"<p>A new model has been introduced to represent virtual machine interfaces. Although this change is largely transparent to the end user, note that the IP address model no longer has a foreign key to the Interface model under the DCIM app. This has been replaced with a generic foreign key named <code>assigned_object</code>.</p>"},{"location":"release-notes/version-2.9/#rest-api-endpoints-for-users-and-groups-4877","title":"REST API Endpoints for Users and Groups (#4877)","text":"<p>Two new REST API endpoints have been added to facilitate the retrieval and manipulation of users and groups:</p> <ul> <li><code>/api/users/groups/</code></li> <li><code>/api/users/users/</code></li> </ul>"},{"location":"release-notes/version-2.9/#enhancements_9","title":"Enhancements","text":"<ul> <li>#4615 - Add <code>label</code> field for all device components and component templates</li> <li>#4639 - Improve performance of web UI prefixes list</li> <li>#4742 - Add tagging for cables, power panels, and rack reservations</li> <li>#4788 - Add dedicated views for all device components</li> <li>#4792 - Add bulk rename capability for console and power ports</li> <li>#4793 - Add <code>description</code> field to device component templates</li> <li>#4795 - Add bulk disconnect capability for console and power ports</li> <li>#4806 - Add a <code>url</code> field to all API serializers</li> <li>#4807 - Add bulk edit ability for device bay templates</li> <li>#4817 - Standardize device/VM component <code>name</code> field to 64 characters</li> <li>#4837 - Use dynamic form widget for relationships to MPTT objects (e.g. regions)</li> <li>#4840 - Enable change logging for config contexts</li> <li>#4885 - Add MultiChoiceVar for custom scripts</li> <li>#4940 - Add an <code>occupied</code> field to rack unit representations for rack elevation views</li> <li>#4945 - Add a user-friendly 403 error page</li> <li>#4969 - Replace secret role user/group assignment with object permissions</li> <li>#4982 - Extended ObjectVar to allow filtering API query</li> <li>#4994 - Add <code>cable</code> attribute to PowerFeed API serializer</li> <li>#4997 - The browsable API now lists available endpoints alphabetically</li> <li>#5024 - List available options for choice fields within CSV import forms</li> </ul>"},{"location":"release-notes/version-2.9/#configuration-changes","title":"Configuration Changes","text":"<ul> <li>If using NetBox's built-in remote authentication backend, update <code>REMOTE_AUTH_BACKEND</code> to <code>'netbox.authentication.RemoteUserBackend'</code>, as the authentication class has moved.</li> <li>If using LDAP authentication, set <code>REMOTE_AUTH_BACKEND</code> to <code>'netbox.authentication.LDAPBackend'</code>. (LDAP configuration parameters in <code>ldap_config.py</code> remain unchanged.)</li> <li><code>REMOTE_AUTH_DEFAULT_PERMISSIONS</code> now takes a dictionary rather than a list. This is a mapping of permission names to a dictionary of constraining attributes, or <code>None</code>. For example, <code>['dcim.add_site', 'dcim.change_site']</code> would become <code>{'dcim.add_site': None, 'dcim.change_site': None}</code>.</li> <li>Backward compatibility for the old <code>webhooks</code> Redis queue name has been dropped. Ensure that your <code>REDIS</code> configuration parameter specifies both the <code>tasks</code> and <code>caching</code> databases.</li> </ul>"},{"location":"release-notes/version-2.9/#rest-api-changes","title":"REST API Changes","text":"<ul> <li>Added new endpoints for users, groups, and permissions under <code>/api/users/</code>.</li> <li>A <code>url</code> field is now included on all object representations, identifying the unique REST API URL for each object.</li> <li>The <code>tags</code> field of an object now includes a more complete representation of each tag, rather than just its name.</li> <li>The assignment of tags to an object is now achieved in the same manner as specifying any other related device. The <code>tags</code> field accepts a list of JSON objects each matching a desired tag. (Alternatively, a list of numeric primary keys corresponding to tags may be passed instead.) For example:</li> </ul> <pre><code>\"tags\": [\n{\"name\": \"First Tag\"},\n{\"name\": \"Second Tag\"}\n]\n</code></pre> <ul> <li>Legacy numeric values for choice fields are no longer conveyed or accepted.</li> <li>circuits.CircuitTermination: Added <code>cable</code> field</li> <li>dcim.Cable: Added <code>tags</code> field</li> <li>dcim.ConsolePort: Added <code>label</code> field</li> <li>dcim.ConsolePortTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.ConsoleServerPort: Added <code>label</code> field</li> <li>dcim.ConsoleServerPortTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.DeviceBay: Added <code>label</code> field</li> <li>dcim.DeviceBayTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.FrontPort: Added <code>label</code> field</li> <li>dcim.FrontPortTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.Interface: Added <code>label</code> field</li> <li>dcim.InterfaceTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.PowerFeed: Added <code>cable</code> field</li> <li>dcim.PowerPanel: Added <code>tags</code> field</li> <li>dcim.PowerPort: Added <code>`label</code> field</li> <li>dcim.PowerPortTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.PowerOutlet: Added <code>label</code> field</li> <li>dcim.PowerOutletTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.Rack: Added an <code>occupied</code> field to rack unit representations for rack elevation views</li> <li>dcim.RackGroup: Added a <code>_depth</code> attribute indicating an object's position in the tree.</li> <li>dcim.RackReservation: Added <code>tags</code> field</li> <li>dcim.RearPort: Added <code>label</code> field</li> <li>dcim.RearPortTemplate: Added <code>description</code> and <code>label</code> fields</li> <li>dcim.Region: Added a <code>_depth</code> attribute indicating an object's position in the tree.</li> <li>dcim.VirtualChassis: Added <code>name</code> field (required)</li> <li>extras.ConfigContext: Added <code>created</code> and <code>last_updated</code> fields</li> <li>extras.JobResult: Added the <code>/api/extras/job-results/</code> endpoint</li> <li>extras.Report: The <code>failed</code> field has been removed. The <code>completed</code> (boolean) and <code>status</code> (string) fields have been introduced to convey the status of a report's most recent execution. Additionally, the <code>result</code> field now conveys the nested representation of a JobResult.</li> <li>extras.Script: Added <code>module</code> and <code>result</code> fields. The <code>result</code> field now conveys the nested representation of a JobResult.</li> <li>extras.Tag: The count of <code>tagged_items</code> is no longer included when viewing the tags list when <code>brief</code> is passed.</li> <li>ipam.IPAddress: Removed <code>interface</code> field; replaced with <code>assigned_object</code> generic foreign key. This may represent either a device interface or a virtual machine interface. Assign an object by setting <code>assigned_object_type</code> and <code>assigned_object_id</code>.</li> <li>ipam.VRF: Added <code>display_name</code></li> <li>tenancy.TenantGroup: Added a <code>_depth</code> attribute indicating an object's position in the tree.</li> <li>users.ObjectPermissions: Added the <code>/api/users/permissions/</code> endpoint</li> <li>virtualization.VMInterface: Removed <code>type</code> field (VM interfaces have no type)</li> </ul>"},{"location":"release-notes/version-2.9/#other-changes","title":"Other Changes","text":"<ul> <li>A new model, <code>VMInterface</code> has been introduced to represent interfaces assigned to VirtualMachine instances. Previously, these interfaces utilized the DCIM model <code>Interface</code>. Instances will be replicated automatically upon upgrade, however any custom code which references or manipulates virtual machine interfaces will need to be updated accordingly.</li> <li>The <code>secrets.activate_userkey</code> permission no longer exists. Instead, <code>secrets.change_userkey</code> is checked to determine whether a user has the ability to activate a UserKey.</li> <li>The <code>users.delete_token</code> permission is no longer enforced. All users are permitted to delete their own API tokens.</li> <li>Dropped backward compatibility for the <code>webhooks</code> Redis queue configuration (use <code>tasks</code> instead).</li> <li>Dropped backward compatibility for the <code>/admin/webhook-backend-status</code> URL (moved to <code>/admin/background-tasks/</code>).</li> <li>Virtual chassis are now created by navigating to <code>/dcim/virtual-chassis/add/</code> rather than via the devices list.</li> <li>A name is required when creating a virtual chassis.</li> </ul>"},{"location":"release-notes/version-3.0/","title":"NetBox v3.0","text":""},{"location":"release-notes/version-3.0/#v3012-2021-12-06","title":"v3.0.12 (2021-12-06)","text":""},{"location":"release-notes/version-3.0/#enhancements","title":"Enhancements","text":"<ul> <li>#7751 - Get API user from LDAP only when <code>FIND_GROUP_PERMS</code> is enabled</li> <li>#7885 - Linkify VLAN name in VLANs table</li> <li>#7892 - Add L22-30 power port &amp; outlet types</li> <li>#7932 - Improve performance of the \"quick find\" function</li> <li>#7941 - Add multi-standard ITA power outlet type</li> </ul>"},{"location":"release-notes/version-3.0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#7823 - Fix issue where <code>return_url</code> is not honored when 'Save &amp; Continue' button is present</li> <li>#7981 - Fix Markdown sanitization regex</li> </ul>"},{"location":"release-notes/version-3.0/#v3011-2021-11-24","title":"v3.0.11 (2021-11-24)","text":""},{"location":"release-notes/version-3.0/#enhancements_1","title":"Enhancements","text":"<ul> <li>#2101 - Add missing <code>q</code> filters for necessary models</li> <li>#7424 - Add virtual chassis filters for device components</li> <li>#7531 - Add Markdown support for strikethrough formatting</li> <li>#7542 - Add optional VLAN group column to prefixes table</li> <li>#7803 - Improve live reloading of custom scripts</li> <li>#7810 - Add IEEE 802.15.1 interface type</li> </ul>"},{"location":"release-notes/version-3.0/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#7399 - Fix excessive CPU utilization when <code>AUTH_LDAP_FIND_GROUP_PERMS</code> is enabled</li> <li>#7657 - Make change logging middleware thread-safe</li> <li>#7720 - Fix initialization of custom script MultiObjectVar field with multiple values</li> <li>#7729 - Fix permissions evaluation when displaying VLAN group VLANs table</li> <li>#7739 - Fix exception when tracing cable across circuit with no far end termination</li> <li>#7813 - Fix handling of errors during export template rendering</li> <li>#7851 - Add missing cluster name filter for virtual machines</li> <li>#7857 - Fix ordering IP addresses by assignment status</li> <li>#7859 - Fix styling of form widgets under cable connection views</li> <li>#7864 - <code>power_port</code> can be null when creating power outlets via REST API</li> <li>#7865 - REST API should support null values for console port speeds</li> </ul>"},{"location":"release-notes/version-3.0/#v3010-2021-11-12","title":"v3.0.10 (2021-11-12)","text":""},{"location":"release-notes/version-3.0/#enhancements_2","title":"Enhancements","text":"<ul> <li>#7740 - Add mini-DIN 8 console port type</li> <li>#7760 - Add <code>vid</code> filter field to VLANs list</li> <li>#7767 - Add visual aids to interfaces table for type, enabled status</li> </ul>"},{"location":"release-notes/version-3.0/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#7564 - Fix assignment of members to virtual chassis with initial position of zero</li> <li>#7701 - Fix conflation of assigned IP status &amp; role in interface tables</li> <li>#7741 - Fix 404 when attaching multiple images in succession</li> <li>#7752 - Fix minimum version check under Python v3.10</li> <li>#7766 - Add missing outer dimension columns to rack table</li> <li>#7780 - Preserve multi-line values during CSV file import</li> <li>#7783 - Fix indentation of locations under site view</li> <li>#7788 - Improve XSS mitigation in Markdown renderer</li> <li>#7791 - Enable sorting device bays table by installed device status</li> <li>#7802 - Differentiate ID and VID columns in VLANs table</li> <li>#7808 - Fix reference values for content type under custom field import form</li> <li>#7809 - Add missing export template support for various models</li> <li>#7814 - Fix restriction of user &amp; group objects in GraphQL API queries</li> </ul>"},{"location":"release-notes/version-3.0/#v309-2021-11-03","title":"v3.0.9 (2021-11-03)","text":""},{"location":"release-notes/version-3.0/#enhancements_3","title":"Enhancements","text":"<ul> <li>#6529 - Introduce the <code>runscript</code> management command</li> <li>#6930 - Add an optional \"ID\" column to all tables</li> <li>#7668 - Add \"view elevations\" button to location view</li> </ul>"},{"location":"release-notes/version-3.0/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#7599 - Improve color mode preference handling</li> <li>#7601 - Correct devices count for locations within global search results</li> <li>#7612 - Strip HTML from custom field descriptions</li> <li>#7628 - Fix <code>load_yaml</code> method for custom scripts</li> <li>#7643 - Fix circuit assignment when creating multiple terminations simultaneously</li> <li>#7644 - Prevent inadvertent deletion of prior change records when deleting objects (#7333 revisited)</li> <li>#7647 - Require interface assignment when designating IP address as primary for device/VM during CSV import</li> <li>#7664 - Preserve initial form data when bulk edit validation fails</li> <li>#7717 - Restore missing tags column on IP range table</li> <li>#7721 - Retain pagination preference when <code>MAX_PAGE_SIZE</code> is zero</li> </ul>"},{"location":"release-notes/version-3.0/#v308-2021-10-20","title":"v3.0.8 (2021-10-20)","text":""},{"location":"release-notes/version-3.0/#enhancements_4","title":"Enhancements","text":"<ul> <li>#7551 - Add UI field to filter interfaces by kind</li> <li>#7561 - Add a utilization column to the IP ranges table</li> </ul>"},{"location":"release-notes/version-3.0/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#7300 - Fix incorrect Device LLDP interface row coloring</li> <li>#7495 - Fix navigation UI issue that caused improper element overlap</li> <li>#7529 - Restore horizontal scrolling for tables in narrow viewports</li> <li>#7534 - Avoid exception when utilizing \"create and add another\" twice in succession</li> <li>#7544 - Fix multi-value filtering of custom field objects</li> <li>#7545 - Fix incorrect display of update/delete events for webhooks</li> <li>#7550 - Fix rendering of UTF8-encoded data in change records</li> <li>#7556 - Fix display of version when new release is available</li> <li>#7584 - Fix alignment of object identifier under object view</li> </ul>"},{"location":"release-notes/version-3.0/#v307-2021-10-08","title":"v3.0.7 (2021-10-08)","text":""},{"location":"release-notes/version-3.0/#enhancements_5","title":"Enhancements","text":"<ul> <li>#6879 - Improve ability to toggle images/labels in rack elevations </li> <li>#7485 - Add USB micro AB type</li> </ul>"},{"location":"release-notes/version-3.0/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#7051 - Fix permissions evaluation and improve error handling for connected device REST API endpoint</li> <li>#7471 - Correct redirect URL when attaching images via \"add another\" button</li> <li>#7474 - Fix AttributeError exception when rendering a report or custom script</li> <li>#7479 - Fix parent interface choices when bulk editing VM interfaces</li> </ul>"},{"location":"release-notes/version-3.0/#v306-2021-10-06","title":"v3.0.6 (2021-10-06)","text":""},{"location":"release-notes/version-3.0/#enhancements_6","title":"Enhancements","text":"<ul> <li>#6850 - Default to current user when creating journal entries via REST API</li> <li>#6955 - Include type, ID, and slug on object view</li> <li>#7394 - Enable filtering cables by termination type &amp; ID in REST API</li> <li>#7462 - Include count of assigned virtual machines under platform view</li> </ul>"},{"location":"release-notes/version-3.0/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#7442 - Fix missing actions column on user-configured tables</li> <li>#7446 - Fix exception when viewing a large number of child IPs within a prefix</li> <li>#7455 - Fix site/provider network validation for circuit termination API serializer</li> <li>#7459 - Pre-populate location data when adding a device to a rack</li> <li>#7460 - Fix filtering connections by site ID</li> </ul>"},{"location":"release-notes/version-3.0/#v305-2021-10-04","title":"v3.0.5 (2021-10-04)","text":""},{"location":"release-notes/version-3.0/#enhancements_7","title":"Enhancements","text":"<ul> <li>#5925 - Always show IP addresses tab under prefix view</li> <li>#6423 - Cache rendered REST API specifications</li> <li>#6708 - Add image attachment support for circuits, power panels</li> <li>#7387 - Enable arbitrary ordering of custom scripts</li> </ul>"},{"location":"release-notes/version-3.0/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#6433 - Fix bulk editing of child prefixes under aggregate view</li> <li>#6817 - Custom field columns should be removed from tables upon their deletion</li> <li>#6895 - Remove errant markup for null values in CSV export</li> <li>#7215 - Prevent rack elevations from overlapping when higher width is specified</li> <li>#7373 - Fix flashing when server, client, and browser color-mode preferences are mismatched</li> <li>#7397 - Fix AttributeError exception when rendering export template for devices via REST API</li> <li>#7401 - Pin <code>jsonschema</code> package to v3.2.0 to fix REST API docs rendering</li> <li>#7411 - Fix exception in UI when adding member devices to virtual chassis</li> <li>#7412 - Fix exception in UI when adding child device to device bay</li> <li>#7417 - Prevent exception when filtering objects list by invalid tag</li> <li>#7425 - Housekeeping command should honor zero verbosity</li> <li>#7427 - Don't select hidden rows when selecting all in a table</li> </ul>"},{"location":"release-notes/version-3.0/#v304-2021-09-29","title":"v3.0.4 (2021-09-29)","text":""},{"location":"release-notes/version-3.0/#enhancements_8","title":"Enhancements","text":"<ul> <li>#6917 - Make IP assigned checkmark in IP table link to interface</li> <li>#6973 - Enable custom ordering of reports</li> <li>#7022 - Add ITA type C (CEE 7/16) power port type</li> <li>#7118 - Render URL custom fields as hyperlinks in object tables</li> <li>#7314 - Add SMA 905/906 fiber port types</li> <li>#7323 - Add serial filter field for racks &amp; devices</li> <li>#7372 - Link to local docs for model from object add/edit views</li> <li>#7389 - Linkify tenant group in tenants list</li> </ul>"},{"location":"release-notes/version-3.0/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#7252 - Validate IP range size does not exceed max supported value</li> <li>#7294 - Fix SVG rendering for cable traces ending at unoccupied front ports</li> <li>#7304 - Require explicit values for all required choice fields during CSV import</li> <li>#7321 - Don't overwrite multi-select custom fields during bulk edit</li> <li>#7324 - Fix TypeError exception in web UI when filtering objects using single-choice filters</li> <li>#7333 - Prevent inadvertent deletion of prior change records when deleting objects</li> <li>#7341 - Fix incorrect URL in circuit breadcrumbs</li> <li>#7353 - Fix bulk creation of device/VM components via list view</li> <li>#7356 - Fix display of model documentation when adding device components</li> <li>#7358 - Add missing <code>choices</code> column to custom field CSV import form</li> <li>#7360 - Correct redirection URL after removing child device from device bay</li> <li>#7365 - Optimize performance when calculating prefix utilization</li> <li>#7374 - Add missing <code>face</code> parameter to API elevations request when editing device</li> <li>#7392 - Fix \"help\" links for custom fields, other models</li> </ul>"},{"location":"release-notes/version-3.0/#v303-2021-09-20","title":"v3.0.3 (2021-09-20)","text":""},{"location":"release-notes/version-3.0/#enhancements_9","title":"Enhancements","text":"<ul> <li>#5775 - Enable synchronization of groups for remote authentication backend</li> <li>#6387 - Add xDSL interface type</li> <li>#6988 - Order tenants alphabetically without regard to group assignment</li> <li>#7032 - Add URM port types</li> <li>#7087 - Add <code>local_context_data</code> filter for virtual machines list</li> <li>#7208 - Add navigation breadcrumbs for custom scripts &amp; reports</li> <li>#7210 - Add search/filter forms for all organizational models</li> <li>#7239 - Redirect global search to filtered object list when an object type is selected</li> <li>#7284 - Include comments field in table/export for all appropriate models</li> </ul>"},{"location":"release-notes/version-3.0/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#7167 - Ensure consistent font size when using monospace formatting</li> <li>#7226 - Exempt GraphQL API requests from CSRF inspection</li> <li>#7228 - Improve temperature conversions under device status</li> <li>#7248 - Fix global search results section links</li> <li>#7266 - Tweak font color for form field placeholder text</li> <li>#7273 - Fix natural ordering of device components in UI form fields</li> <li>#7279 - Fix exception when tracing cable with no associated path</li> <li>#7282 - Fix KeyError exception when <code>INSECURE_SKIP_TLS_VERIFY</code> is true</li> <li>#7298 - Restore missing object names from applied object list filters</li> <li>#7301 - Fix exception when deleting a large number of child prefixes</li> </ul>"},{"location":"release-notes/version-3.0/#v302-2021-09-08","title":"v3.0.2 (2021-09-08)","text":""},{"location":"release-notes/version-3.0/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>#7131 - Fix issue where Site fields were hidden when editing a VLAN group</li> <li>#7148 - Fix issue where static query parameters with multiple values were not queried properly</li> <li>#7153 - Allow clearing of assigned device type images</li> <li>#7162 - Ensure consistent treatment of <code>BASE_PATH</code> for UI-driven API requests</li> <li>#7164 - Fix styling of \"decommissioned\" label for circuits</li> <li>#7169 - Fix CSV import file upload</li> <li>#7176 - Fix issue where query parameters were duplicated across different forms of the same type</li> <li>#7179 - Prevent obscuring \"connect\" pop-up for interfaces under device view</li> <li>#7188 - Fix issue where select fields with <code>null_option</code> did not render or send the null option</li> <li>#7189 - Set connection factory for django-redis when Sentinel is in use</li> <li>#7191 - Fix issue where API-backed multi-select elements cleared selected options when adding new options</li> <li>#7193 - Fix prefix (flat) template issue when viewing child prefixes with prefixes available</li> <li>#7205 - Fix issue where selected fields with <code>null_option</code> set were not added to applied filters</li> <li>#7209 - Allow unlimited API results when <code>MAX_PAGE_SIZE</code> is disabled</li> </ul>"},{"location":"release-notes/version-3.0/#v301-2021-09-01","title":"v3.0.1 (2021-09-01)","text":""},{"location":"release-notes/version-3.0/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>#7041 - Properly format JSON config object returned from a NAPALM device</li> <li>#7070 - Fix exception when filtering by prefix max length in UI</li> <li>#7071 - Fix exception when removing a primary IP from a device/VM</li> <li>#7072 - Fix table configuration under prefix child object views</li> <li>#7075 - Fix UI bug when a custom field has a space in the name</li> <li>#7080 - Fix missing image previews</li> <li>#7081 - Fix UI bug that did not properly request and handle paginated data</li> <li>#7082 - Avoid exception when referencing invalid content type in table</li> <li>#7083 - Correct labeling for VM memory attribute</li> <li>#7084 - Fix KeyError exception when editing access VLAN on an interface</li> <li>#7084 - Fix issue where hidden VLAN form fields were incorrectly included in the form submission</li> <li>#7089 - Fix filtering of change log by content type</li> <li>#7090 - Allow decimal input on length field when bulk editing cables</li> <li>#7091 - Ensure API requests from the UI are aware of <code>BASE_PATH</code></li> <li>#7092 - Fix missing bulk edit buttons on Prefix IP Addresses table</li> <li>#7093 - Multi-select custom field filters should employ exact match</li> <li>#7096 - Home links should honor <code>BASE_PATH</code> configuration</li> <li>#7101 - Enforce <code>MAX_PAGE_SIZE</code> for table and REST API pagination</li> <li>#7106 - Fix incorrect \"Map It\" button URL on a site's physical address field</li> <li>#7107 - Fix missing search button and search results in IP address assignment \"Assign IP\" tab</li> <li>#7109 - Ensure human readability of exceptions raised during REST API requests</li> <li>#7113 - Show bulk edit/delete actions for prefix child objects</li> <li>#7123 - Remove \"Global\" placeholder for null VRF field</li> <li>#7124 - Fix duplicate static query param values in API Select</li> </ul>"},{"location":"release-notes/version-3.0/#v300-2021-08-30","title":"v3.0.0 (2021-08-30)","text":"<p>Existing Deployments Must Upgrade from v2.11</p> <p>Upgrading an existing NetBox deployment to version 3.0 must be done from version 2.11.0 or later. If attempting to upgrade a deployment of NetBox v2.10 or earlier, first upgrade to a NetBox v2.11 release, and then upgrade from v2.11 to v3.0. This will avoid any problems with the database migration optimizations implemented in version 3.0. (This is not necessary for new installations.)</p>"},{"location":"release-notes/version-3.0/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Python 3.6 is no longer supported. NetBox v3.0 supports Python 3.7, 3.8, and 3.9.</li> <li>The secrets functionality present in prior releases of NetBox has been removed. The NetBox maintainers strongly recommend the adoption of Hashicorp Vault in place of this feature. Development of a NetBox plugin to replace the legacy secrets functionality is also underway.</li> <li>The default CSV export format for all objects now includes all available data from the object list. Additionally, the CSV headers now use human-friendly titles rather than raw field names. If backward compatibility with the old format is desired, export templates can be written to reproduce it.</li> <li>The <code>invalidate</code> management command (which clears cached database queries) is no longer needed and has been removed (see #6639).</li> <li>Support for queryset caching configuration (<code>caching_config</code>) has been removed from the plugins API (see #6639).</li> <li>The <code>cacheops_*</code> metrics have been removed from the Prometheus exporter (see #6639).</li> <li>The <code>display_field</code> keyword argument has been removed from custom script ObjectVar and MultiObjectVar fields. These widgets will use the <code>display</code> value provided by the REST API.</li> <li>The deprecated <code>display_name</code> field has been removed from all REST API serializers. (API clients should reference the <code>display</code> field instead.)</li> <li>The redundant REST API endpoints for console, power, and interface connections have been removed. The same data can be retrieved by querying the respective model endpoints with the <code>?connected=True</code> filter applied.</li> </ul>"},{"location":"release-notes/version-3.0/#new-features","title":"New Features","text":""},{"location":"release-notes/version-3.0/#updated-user-interface-5893","title":"Updated User Interface (#5893)","text":"<p>The NetBox user interface has been completely overhauled with a fresh new look! Beyond the cosmetic improvements, this initiative has allowed us to modernize the entire front end, upgrading from Bootstrap 3 to Bootstrap 5, and eliminating dependencies on outdated libraries such as jQuery and jQuery-UI. The new user interface also features a dark mode option.</p> <p></p> <p>A huge thank you to NetBox maintainer Matt Love for his tremendous work on this!</p>"},{"location":"release-notes/version-3.0/#graphql-api-2007","title":"GraphQL API (#2007)","text":"<p>A new GraphQL API has been added to complement NetBox's REST API. GraphQL allows the client to specify which fields of the available data to return in each request. NetBox's implementation, which employs Graphene, also includes a user-friendly query interface known as GraphiQL.</p> <p>Here's an example GraphQL request:</p> <pre><code>{\n  circuit_list {\n    cid\n    provider {\n      name\n    }\n    termination_a {\n      id\n    }\n    termination_z {\n      id\n    }\n  }\n}\n</code></pre> <p>And the response:</p> <pre><code>{\n  \"data\": {\n    \"circuit_list\": [\n      {\n        \"cid\": \"1002840283\",\n        \"provider\": {\n          \"name\": \"CenturyLink\"\n        },\n        \"termination_a\": null,\n        \"termination_z\": {\n          \"id\": \"23\"\n        }\n      },\n...\n</code></pre> <p>All GraphQL requests are made at the <code>/graphql</code> URL (which also serves the GraphiQL UI). The API is currently read-only, however users who wish to disable it until needed can do so by setting the <code>GRAPHQL_ENABLED</code> configuration parameter to False. For more detail on NetBox's GraphQL implementation, see the GraphQL API documentation.</p>"},{"location":"release-notes/version-3.0/#ip-ranges-834","title":"IP Ranges (#834)","text":"<p>NetBox now supports modeling arbitrary IP ranges, which are defined by specifying a starting and ending IP address (e.g. to denote DHCP pools). Similar to prefixes, each IP range may optionally be assigned to a VRF and/or tenant, and can be assigned a functional role. An IP range must be assigned a status of active, reserved, or deprecated. The REST API implementation for this model also includes an \"available IPs\" endpoint which functions similarly to the endpoint for prefixes.</p> <p>More information about IP ranges is available in the documentation.</p>"},{"location":"release-notes/version-3.0/#custom-model-validation-5963","title":"Custom Model Validation (#5963)","text":"<p>This release introduces the <code>CUSTOM_VALIDATORS</code> configuration parameter, which allows administrators to map NetBox models to custom validator classes to enforce custom validation logic. For example, the following configuration requires every site to have a name of at least ten characters and a description:</p> <pre><code>from extras.validators import CustomValidator\n\nCUSTOM_VALIDATORS = {\n    'dcim.site': (\n        CustomValidator({\n            'name': {\n                'min_length': 10,\n            },\n            'description': {\n                'required': True,\n            }\n        }),\n    )\n}\n</code></pre> <p>CustomValidator can also be subclassed to enforce more complex logic by overriding its <code>validate()</code> method. See the custom validation documentation for more details.</p>"},{"location":"release-notes/version-3.0/#svg-cable-traces-6000","title":"SVG Cable Traces (#6000)","text":"<p>Cable trace diagrams are now rendered as atomic SVG images, similar to rack elevations. These images are embedded in the UI and can be easily downloaded for use outside NetBox. SVG images can also be generated directly through the REST API, by specifying SVG as the render format for the <code>trace</code> endpoint on a cable termination:</p> <pre><code>GET /api/dcim/interfaces/&lt;ID&gt;&gt;/trace/?render=svg\n</code></pre> <p>The width of the rendered image in pixels may optionally be specified by appending the <code>&amp;width=&lt;width&gt;</code> parameter to the request. The default width is 400px.</p>"},{"location":"release-notes/version-3.0/#new-views-for-models-previously-under-the-admin-ui-6466","title":"New Views for Models Previously Under the Admin UI (#6466)","text":"<p>New UI views have been introduced to manage the following models:</p> <ul> <li>Custom fields</li> <li>Custom links</li> <li>Export templates</li> <li>Webhooks</li> </ul> <p>These models were previously managed under the admin section of the UI. Moving them to dedicated views ensures a more consistent and convenient user experience.</p>"},{"location":"release-notes/version-3.0/#rest-api-token-provisioning-5264","title":"REST API Token Provisioning (#5264)","text":"<p>The new REST API endpoint <code>/api/users/tokens/</code> has been added, which includes a child endpoint for provisioning new REST API tokens using a username and password. This allows a user to gain REST API access without needing to first create a token via the web UI.</p> <pre><code>$ curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttps://netbox/api/users/tokens/provision/ \\\n--data '{\n    \"username\": \"hankhill\",\n    \"password: \"I&lt;3C3H8\",\n}'\n</code></pre> <p>If the supplied credentials are valid, NetBox will create and return a new token for the user.</p>"},{"location":"release-notes/version-3.0/#new-housekeeping-command-6590","title":"New Housekeeping Command (#6590)","text":"<p>A new management command has been added: <code>manage.py housekeeping</code>. This command is intended to be run nightly via a system cron job. It performs the following tasks:</p> <ul> <li>Clear expired authentication sessions from the database</li> <li>Delete change log records which have surpassed the configured retention period (if configured)</li> <li>Check for new NetBox releases (if enabled)</li> </ul> <p>A convenience script for calling this command via an automated scheduler has been included at <code>/contrib/netbox-housekeeping.sh</code>. Please see the housekeeping documentation for further details.</p>"},{"location":"release-notes/version-3.0/#custom-queue-support-for-plugins-6651","title":"Custom Queue Support for Plugins (#6651)","text":"<p>NetBox uses Redis and Django-RQ for background task queuing. Whereas previous releases employed only a single default queue, NetBox now provides a high-, medium- (default), and low-priority queue for use by plugins. (These will also likely be used internally as new functionality is added in future releases.)</p> <p>Plugins can also now create their own custom queues by defining a <code>queues</code> list within their PluginConfig class:</p> <pre><code>class MyPluginConfig(PluginConfig):\n    name = 'myplugin'\n    ...\n    queues = [\n        'queue1',\n        'queue2',\n        'queue-whatever-the-name'\n    ]\n</code></pre> <p>Note that NetBox's <code>rqworker</code> process will not service custom queues by default, since it has no way to infer the priority of each queue. Plugin authors should be diligent in including instructions for proper worker configuration in their plugin's documentation.</p>"},{"location":"release-notes/version-3.0/#enhancements_10","title":"Enhancements","text":"<ul> <li>#2434 - Add option to assign IP address upon creating a new interface</li> <li>#3665 - Enable rendering export templates via REST API</li> <li>#3682 - Add <code>color</code> field to front and rear ports</li> <li>#4609 - Allow marking prefixes as fully utilized</li> <li>#5203 - Remember user preference when toggling display of device images in rack elevations</li> <li>#5806 - Add kilometer and mile as choices for cable length unit</li> <li>#6154 - Allow decimal values for cable lengths</li> <li>#6328 - Build and serve documentation locally</li> </ul>"},{"location":"release-notes/version-3.0/#bug-fixes-from-v30-beta2","title":"Bug Fixes (from v3.0-beta2)","text":"<ul> <li>#6977 - Truncate global search dropdown on small screens</li> <li>#6979 - Hide \"create &amp; add another\" button for circuit terminations</li> <li>#6982 - Fix styling of empty dropdown list under dark mode</li> <li>#6996 - Global search bar should be full width on mobile</li> <li>#7001 - Fix page focus on load</li> <li>#7034 - Fix toggling of VLAN group scope selector fields</li> <li>#7045 - Fix navigation menu rendering under Chrome</li> </ul>"},{"location":"release-notes/version-3.0/#other-changes","title":"Other Changes","text":"<ul> <li>#5223 - Remove the console/power/interface connections REST API endpoints</li> <li>#5278 - Remove the secrets functionality from NetBox core</li> <li>#5532 - Drop support for Python 3.6</li> <li>#5994 - Drop support for <code>display_field</code> argument on ObjectVar</li> <li>#6068 - Drop support for legacy static CSV export</li> <li>#6338 - Decimal fields are no longer coerced to strings in REST API</li> <li>#6471 - Optimize database migrations</li> <li>#6639 - Drop support for queryset caching (django-cacheops)</li> <li>#6713 - Checking for new releases is now done as part of the housekeeping routine</li> <li>#6767 - Add support for Python 3.9</li> </ul>"},{"location":"release-notes/version-3.0/#configuration-changes","title":"Configuration Changes","text":"<ul> <li>The <code>CACHE_TIMEOUT</code> configuration parameter has been removed.</li> <li>The <code>RELEASE_CHECK_TIMEOUT</code> configuration parameter has been removed.</li> </ul>"},{"location":"release-notes/version-3.0/#rest-api-changes","title":"REST API Changes","text":"<ul> <li>Removed all endpoints related to the secrets functionality:<ul> <li><code>/api/secrets/generate-rsa-key-pair/</code></li> <li><code>/api/secrets/get-session-key/</code></li> <li><code>/api/secrets/secrets/</code></li> <li><code>/api/secrets/secret-roles/</code></li> </ul> </li> <li>Removed the following \"connections\" endpoints:<ul> <li><code>/api/dcim/console-connections/</code></li> <li><code>/api/dcim/power-connections/</code></li> <li><code>/api/dcim/interface-connections/</code></li> </ul> </li> <li>Added the <code>/api/ipam/ip-ranges/</code> endpoint</li> <li>Added the <code>/api/users/tokens/</code> endpoint<ul> <li>The <code>provision/</code> child endpoint can be used to provision new REST API tokens by supplying a valid username and password</li> </ul> </li> <li>dcim.Cable<ul> <li><code>length</code> is now a decimal value</li> </ul> </li> <li>dcim.Device<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>dcim.DeviceType<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>dcim.FrontPort<ul> <li>Added <code>color</code> field</li> </ul> </li> <li>dcim.FrontPortTemplate<ul> <li>Added <code>color</code> field</li> </ul> </li> <li>dcim.Rack<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>dcim.RearPort<ul> <li>Added <code>color</code> field</li> </ul> </li> <li>dcim.RearPortTemplate<ul> <li>Added <code>color</code> field</li> </ul> </li> <li>dcim.Site<ul> <li><code>latitude</code> and <code>longitude</code> are now decimal fields rather than strings</li> </ul> </li> <li>extras.ContentType<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>ipam.Prefix<ul> <li>Added the <code>mark_utilized</code> boolean field</li> </ul> </li> <li>ipam.VLAN<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>ipam.VRF<ul> <li>Removed the <code>display_name</code> attribute (use <code>display</code> instead)</li> </ul> </li> <li>virtualization.VirtualMachine<ul> <li><code>vcpus</code> is now a decimal field rather than a string</li> </ul> </li> </ul>"},{"location":"release-notes/version-3.1/","title":"NetBox v3.1","text":""},{"location":"release-notes/version-3.1/#v3111-2022-04-05","title":"v3.1.11 (2022-04-05)","text":""},{"location":"release-notes/version-3.1/#enhancements","title":"Enhancements","text":"<ul> <li>#8163 - Show bridge interface members under interface view</li> <li>#8365 - Enable filtering child devices by parent device ID</li> <li>#8785 - Permit wildcard values in IP address DNS names</li> <li>#8790 - Include site and prefixes columns in VLAN group VLANs table</li> <li>#8830 - Add Checkpoint ClusterXL protocol for FHRP groups</li> <li>#8974 - Use monospace font for text areas in config revision form</li> <li>#9012 - Linkify circuits count in providers list</li> <li>#9036 - Add bulk edit capability for site contact fields</li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#8866 - Prevent exception when searching for a rack position with no rack specified under device edit view</li> <li>#9009 - Fix device count for racks in global search results</li> </ul>"},{"location":"release-notes/version-3.1/#v3110-2022-03-25","title":"v3.1.10 (2022-03-25)","text":""},{"location":"release-notes/version-3.1/#enhancements_1","title":"Enhancements","text":"<ul> <li>#8232 - Use a different color for 100% utilization bars</li> <li>#8457 - Enable adding non-racked devices from site &amp; location views</li> <li>#8553 - Add missing object types to global search form</li> <li>#8575 - Add rack columns to cables list</li> <li>#8645 - Enable filtering objects by assigned contacts &amp; contact roles</li> <li>#8926 - Add device type, role columns to device bay table</li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#8696 - Fix help link under FHRP group assigment creation view</li> <li>#8813 - Retain global search bar query after submitting</li> <li>#8820 - Fix navbar background color in dark mode</li> <li>#8850 - Show airflow field on device REST API serializer when config context data is included</li> <li>#8905 - Disable ordering by assigned tags to prevent erroneous results</li> <li>#8919 - Fix filtering of VLAN groups by site under prefix edit form</li> <li>#8924 - Improve load time of custom script list</li> <li>#8932 - Fix error when setting null value for interface <code>rf_role</code> via REST API</li> <li>#8935 - Correct ordering of next/previous racks to use naturalized names</li> <li>#8947 - Retain filter parameters when handling an export template exception</li> <li>#8951 - Allow changing device type &amp; platform to different manufacturer simultaneously</li> <li>#8952 - Device images in rear rack elevations should be hyperlinked</li> </ul>"},{"location":"release-notes/version-3.1/#v319-2022-03-07","title":"v3.1.9 (2022-03-07)","text":""},{"location":"release-notes/version-3.1/#enhancements_2","title":"Enhancements","text":"<ul> <li>#8594 - Enable filtering by exact description match for all applicable models</li> <li>#8629 - Add description to tag table search function</li> <li>#8664 - Show assigned ASNs/sites under list views</li> <li>#8736 - Add PC and UPC fiber end faces for LC/SC/LSH port types</li> <li>#8758 - Allow empty string substitution when renaming objects in bulk</li> <li>#8762 - Link to rack elevations list from site view</li> <li>#8766 - Add SCTP to service protocols list</li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#8546 - Fix bulk import to restrict bridge, parent, and LAG to device interfaces</li> <li>#8633 - Prevent navigation sidebar pin from disappearing at certain breakpoints</li> <li>#8674 - Fix rendering of tabbed content in documentation</li> <li>#8710 - Fix dynamic scope selection form fields when creating a VLAN group</li> <li>#8713 - Restore missing \"add\" button on services list view</li> <li>#8715 - Avoid returning multiple objects when restricting querysets using multiple tags in permissions</li> <li>#8717 - Fix redirection after bulk edit/delete of prefixes from aggregate view</li> <li>#8724 - Fix exception during device import with invalid device type</li> <li>#8807 - Correct REST API URL for FHRP group assignments</li> <li>#8808 - Fix members count under FHRP group list</li> </ul>"},{"location":"release-notes/version-3.1/#v318-2022-02-15","title":"v3.1.8 (2022-02-15)","text":""},{"location":"release-notes/version-3.1/#enhancements_3","title":"Enhancements","text":"<ul> <li>#7150 - Linkify devices on the far side of a rack elevation</li> <li>#8398 - Embiggen configuration form fields for banner message content</li> <li>#8556 - Add full username column to changelog table</li> <li>#8620 - Enable tab completion for <code>nbshell</code></li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#8331 - Implement <code>replaceAll</code> string utility function to improve browser compatibility</li> <li>#8391 - Null date columns should return empty strings during CSV export</li> <li>#8548 - Fix display of VC members when position is zero</li> <li>#8561 - Include option to connect a rear port to a console port</li> <li>#8564 - Fix errant table configuration key <code>available_columns</code></li> <li>#8577 - Show contact assignment counts in global search results</li> <li>#8578 - Object change log tables should honor user's configured preferences</li> <li>#8604 - Fix tag filter on config context list filter form</li> <li>#8609 - Display validation error when attempting to assign VLANs to interface with no mode during bulk edit</li> <li>#8611 - Fix bulk editing for certain custom link, webhook, and journal entry fields</li> </ul>"},{"location":"release-notes/version-3.1/#v317-2022-02-03","title":"v3.1.7 (2022-02-03)","text":""},{"location":"release-notes/version-3.1/#enhancements_4","title":"Enhancements","text":"<ul> <li>#7504 - Include IP range data under IPAM role views</li> <li>#8275 - Introduce alternative ASDOT-formatted column for ASNs</li> <li>#8367 - Add ASNs to global search function</li> <li>#8368 - Enable controlling the order of custom script form fields with <code>field_order</code></li> <li>#8381 - Add contacts to global search function</li> <li>#8462 - Linkify manufacturer column in device type table</li> <li>#8476 - Bring the ASN Web UI up to the standard set by other objects</li> <li>#8494 - Include locations count under tenant view</li> <li>#8517 - Render boolean custom fields as icons in object tables</li> <li>#8530 - Indicate CSV or YAML as format for \"all data\" export</li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#8315 - Fix display of NAT link for primary IPv4 address under device view</li> <li>#8377 - Fix calculation of absolute cable lengths when specified in fractional units</li> <li>#8425 - Fix exception when viewing change list/records with removed plugins</li> <li>#8456 - Fix redundant display of VRF RD in prefix view</li> <li>#8465 - Accept empty string values for Interface <code>rf_channel</code> in REST API</li> <li>#8498 - Fix display of selected content type filters in object list views</li> <li>#8499 - Content types REST API endpoint should not require model permission</li> <li>#8512 - Correct file permissions to allow execution of housekeeping script</li> <li>#8527 - Fix display of changelog retention period</li> </ul>"},{"location":"release-notes/version-3.1/#v316-2022-01-17","title":"v3.1.6 (2022-01-17)","text":""},{"location":"release-notes/version-3.1/#enhancements_5","title":"Enhancements","text":"<ul> <li>#8246 - Show human-friendly values for commit rates in circuits table</li> <li>#8262 - Add cable count to tenant stats</li> <li>#8265 - Add Stackwise-n interface types</li> <li>#8293 - Show 4-byte ASNs in ASDOT notation</li> <li>#8302 - Linkify role column in device &amp; VM tables</li> <li>#8337 - Enable sorting object tables by created &amp; updated times</li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#8279 - Fix display of virtual chassis members in rack elevations</li> <li>#8285 - Fix <code>cluster_count</code> under tenant REST API serializer</li> <li>#8287 - Correct label in export template form</li> <li>#8301 - Fix delete button for various object children views</li> <li>#8305 - Fix assignment of custom field data to FHRP groups via UI</li> <li>#8306 - Redirect user to previous page after login</li> <li>#8314 - Prevent custom fields with default values from appearing as applied filters erroneously</li> <li>#8317 - Fix CSV import of multi-select custom field values</li> <li>#8319 - Custom URL fields should honor <code>ALLOWED_URL_SCHEMES</code> config parameter</li> <li>#8342 - Restore <code>created</code> &amp; <code>last_updated</code> fields missing from several REST API serializers</li> <li>#8357 - Add missing tags field to location filter form</li> <li>#8358 - Fix inconsistent styling of custom fields on filter &amp; bulk edit forms</li> </ul>"},{"location":"release-notes/version-3.1/#v315-2022-01-06","title":"v3.1.5 (2022-01-06)","text":""},{"location":"release-notes/version-3.1/#enhancements_6","title":"Enhancements","text":"<ul> <li>#8231 - Use in-page dialogs for confirming object deletion</li> <li>#8244 - Add length &amp; length unit fields to cable filter form</li> <li>#8252 - Linkify type and group columns in clusters table</li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#8213 - Fix ValueError exception under prefix IP addresses view</li> <li>#8224 - Fix KeyError exception when creating FHRP group with IP address and protocol \"other\"</li> <li>#8226 - Honor return URL after populating a device bay</li> <li>#8228 - Optional ChoiceVar fields should not force a selection</li> <li>#8255 - Fix bulk editing of authentication parameters for wireless LANs and links</li> </ul>"},{"location":"release-notes/version-3.1/#v314-2022-01-03","title":"v3.1.4 (2022-01-03)","text":""},{"location":"release-notes/version-3.1/#enhancements_7","title":"Enhancements","text":"<ul> <li>#8192 - Add \"add prefix\" button to aggregate child prefixes view</li> <li>#8194 - Enable bulk user assignment to groups under admin UI</li> <li>#8197 - Allow filtering sites by group when connecting a cable</li> <li>#8210 - Establish <code>netbox/local/</code> as a path for local resources</li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#8187 - Fix rendering of tags column in object tables</li> <li>#8191 - Fix return URL when adding IP addresses to VM interfaces</li> <li>#8196 - Fix IndexError exception when viewing large IPv6 prefixes in UI</li> <li>#8201 - Custom integer fields should allow negative integers as minimum/maximum values</li> </ul>"},{"location":"release-notes/version-3.1/#v313-2021-12-29","title":"v3.1.3 (2021-12-29)","text":""},{"location":"release-notes/version-3.1/#enhancements_8","title":"Enhancements","text":"<ul> <li>#6782 - Enable the inclusion of custom links in tables</li> <li>#7600 - Include count of available IPs on prefix view</li> <li>#8034 - Enable specifying custom field validators during CSV import</li> <li>#8100 - Add \"other\" choice for FHRP group protocol</li> <li>#8175 - Display parent object when attaching an image</li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#7246 - Don't attempt to URL-decode NAPALM response payloads</li> <li>#7290 - Defer loading API-backed form fields</li> <li>#7887 - Forward <code>HTTP_X_FORWARDED_FOR</code> to custom scripts</li> <li>#7962 - Fix user menu under report/script result view</li> <li>#7972 - Standardize name of <code>RemoteUserBackend</code> logger</li> <li>#8097 - Fix styling of Markdown tables</li> <li>#8127 - Fix disassociation of interface under IP address edit view</li> <li>#8131 - Restore annotation of available IPs under prefix IPs view</li> <li>#8134 - Fix bulk editing of objects within dynamic tables</li> <li>#8139 - Fix rendering of table configuration form under VM interfaces view</li> <li>#8140 - Restore missing fields on wireless LAN &amp; link REST API serializers</li> </ul>"},{"location":"release-notes/version-3.1/#v312-2021-12-20","title":"v3.1.2 (2021-12-20)","text":""},{"location":"release-notes/version-3.1/#enhancements_9","title":"Enhancements","text":"<ul> <li>#7661 - Remove forced styling of custom banners</li> <li>#7665 - Add toggle to show only available child prefixes</li> <li>#7999 - Add 6 GHz and 60 GHz wireless channels</li> <li>#8057 - Dynamic object tables using HTMX</li> <li>#8080 - Link to NAT IPs for device/VM primary IPs</li> <li>#8081 - Allow creating services directly from navigation menu</li> <li>#8083 - Removed \"related devices\" panel from device view</li> <li>#8108 - Improve breadcrumb links for device/VM components</li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#7674 - Fix inadvertent application of device type context to virtual machines</li> <li>#8074 - Ordering VMs by name should reference naturalized value</li> <li>#8077 - Fix exception when attaching image to location, circuit, or power panel</li> <li>#8078 - Add missing wireless models to <code>lsmodels()</code> in <code>nbshell</code></li> <li>#8079 - Fix validation of LLDP neighbors when connected device has an asset tag</li> <li>#8088 - Improve legibility of text in labels with light-colored backgrounds</li> <li>#8092 - Rack elevations should not include device asset tags</li> <li>#8096 - Fix DataError during change logging of objects with very long string representations</li> <li>#8101 - Preserve return URL when using \"create and add another\" button</li> <li>#8102 - Raise validation error when attempting to assign an IP address to multiple objects</li> </ul>"},{"location":"release-notes/version-3.1/#v311-2021-12-13","title":"v3.1.1 (2021-12-13)","text":""},{"location":"release-notes/version-3.1/#enhancements_10","title":"Enhancements","text":"<ul> <li>#8047 - Display sorting indicator in table column headers</li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>#5869 - Fix permissions evaluation under available prefix/IP REST API endpoints</li> <li>#7519 - Return a 409 status for unfulfillable available prefix/IP requests</li> <li>#7690 - Fix custom field integer support for MultiValueNumberFilter</li> <li>#7990 - Fix <code>title</code> display on contact detail view</li> <li>#7996 - Show WWN field in interface creation form</li> <li>#8001 - Correct verbose name for wireless LAN group model</li> <li>#8003 - Fix cable tracing across bridged interfaces with no cable</li> <li>#8005 - Fix contact email display</li> <li>#8009 - Validate IP addresses for uniqueness when creating an FHRP group</li> <li>#8010 - Allow filtering devices by multiple serial numbers</li> <li>#8019 - Exclude metrics endpoint when <code>LOGIN_REQUIRED</code> is true</li> <li>#8030 - Validate custom field names</li> <li>#8033 - Fix display of zero values for custom integer fields in tables</li> <li>#8035 - Redirect back to parent prefix after creating IP address(es) where applicable</li> <li>#8038 - Placeholder filter should display zero integer values</li> <li>#8042 - Fix filtering cables list by site slug or rack name</li> <li>#8051 - Contact group parent assignment should not be required under REST API</li> </ul>"},{"location":"release-notes/version-3.1/#v310-2021-12-06","title":"v3.1.0 (2021-12-06)","text":"<p>PostgreSQL 10 Required</p> <p>NetBox v3.1 requires PostgreSQL 10 or later.</p>"},{"location":"release-notes/version-3.1/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>The <code>tenant</code> and <code>tenant_id</code> filters for the Cable model now filter on the tenant assigned directly to each cable, rather than on the parent object of either termination.</li> <li>The <code>cable_peer</code> and <code>cable_peer_type</code> attributes of cable termination models have been renamed to <code>link_peer</code> and <code>link_peer_type</code>, respectively, to accommodate wireless links between interfaces.</li> <li>Exported webhooks and custom fields now reference associated content types by raw string value (e.g. \"dcim.site\") rather than by human-friendly name.</li> <li>The 128GFC interface type has been corrected from <code>128gfc-sfp28</code> to <code>128gfc-qsfp28</code>.</li> </ul>"},{"location":"release-notes/version-3.1/#new-features","title":"New Features","text":""},{"location":"release-notes/version-3.1/#contact-objects-1344","title":"Contact Objects (#1344)","text":"<p>A set of new models for tracking contact information has been introduced within the tenancy app. Users may now create individual contact objects to be associated with various models within NetBox. Each contact has a name, title, email address, etc. Contacts can be arranged in hierarchical groups for ease of management.</p> <p>When assigning a contact to an object, the user must select a predefined role (e.g. \"billing\" or \"technical\") and may optionally indicate a priority relative to other contacts associated with the object. There is no limit on how many contacts can be assigned to an object, nor on how many objects to which a contact can be assigned.</p>"},{"location":"release-notes/version-3.1/#wireless-networks-3979","title":"Wireless Networks (#3979)","text":"<p>This release introduces two new models to represent wireless networks:</p> <ul> <li>Wireless LAN - A multi-access wireless segment to which any number of wireless interfaces may be attached</li> <li>Wireless Link - A point-to-point connection between exactly two wireless interfaces</li> </ul> <p>Both types of connection include SSID and authentication attributes. Additionally, the interface model has been extended to include several attributes pertinent to wireless operation:</p> <ul> <li>Wireless role - Access point or station</li> <li>Channel - A predefined channel within a standardized band</li> <li>Channel frequency &amp; width - Customizable channel attributes (e.g. for licensed bands)</li> </ul>"},{"location":"release-notes/version-3.1/#dynamic-configuration-updates-5883","title":"Dynamic Configuration Updates (#5883)","text":"<p>Some parameters of NetBox's configuration are now accessible via the admin UI. These parameters can be modified by an administrator and take effect immediately upon application: There is no need to restart NetBox. Additionally, each iteration of the dynamic configuration is preserved in the database, and can be restored by an administrator at any time.</p> <p>Dynamic configuration parameters may also still be defined within <code>configuration.py</code>, and the settings defined here take precedence over those defined via the user interface.</p>"},{"location":"release-notes/version-3.1/#first-hop-redundancy-protocol-fhrp-groups-6235","title":"First Hop Redundancy Protocol (FHRP) Groups (#6235)","text":"<p>A new FHRP group model has been introduced to aid in modeling the configurations of protocols such as HSRP, VRRP, and GLBP. Each FHRP group may be assigned one or more virtual IP addresses, as well as an authentication type and key. Member device and VM interfaces may be associated with one or more FHRP groups, with each assignment receiving a numeric priority designation.</p>"},{"location":"release-notes/version-3.1/#conditional-webhooks-6238","title":"Conditional Webhooks (#6238)","text":"<p>Webhooks now include a <code>conditions</code> field, which may be used to specify conditions under which a webhook triggers. For example, you may wish to generate outgoing requests for a device webhook only when its status is \"active\" or \"staged\". This can be done by declaring conditional logic in JSON:</p> <pre><code>{\n\"attr\": \"status.value\",\n\"op\": \"in\",\n\"value\": [\"active\", \"staged\"]\n}\n</code></pre> <p>Multiple conditions may be nested using AND/OR logic as well. For more information, please see the conditional logic documentation. </p>"},{"location":"release-notes/version-3.1/#interface-bridging-6346","title":"Interface Bridging (#6346)","text":"<p>A <code>bridge</code> field has been added to the interface model for devices and virtual machines. This can be set to reference another interface on the same parent device/VM to indicate a direct layer two bridging adjacency. Additionally, \"bridge\" has been added as an interface type. (However, interfaces of any type may be designated as bridged.)</p> <p>Multiple interfaces can be bridged to a single virtual interface to effect a bridge group. Alternatively, two physical interfaces can be bridged to one another, to effect an internal cross-connect.</p>"},{"location":"release-notes/version-3.1/#multiple-asns-per-site-6732","title":"Multiple ASNs per Site (#6732)","text":"<p>With the introduction of the new ASN model, NetBox now supports the assignment of multiple ASNs per site. Each ASN instance must have a 32-bit AS number, and may optionally be assigned to a RIR and/or Tenant.</p> <p>The <code>asn</code> integer field on the site model has been preserved to maintain backward compatability until a later release.</p>"},{"location":"release-notes/version-3.1/#single-sign-on-sso-authentication-7649","title":"Single Sign-On (SSO) Authentication (#7649)","text":"<p>Support for single sign-on (SSO) authentication has been added via the python-social-auth library. NetBox administrators can configure one of the supported authentication backends to enable SSO authentication for users.</p>"},{"location":"release-notes/version-3.1/#enhancements_11","title":"Enhancements","text":"<ul> <li>#1337 - Add WWN field to interfaces</li> <li>#1943 - Relax uniqueness constraint on cluster names</li> <li>#3839 - Add <code>airflow</code> field for devices types and devices</li> <li>#5143 - Include a device's asset tag in its display value</li> <li>#6497 - Extend tag support to organizational models</li> <li>#6615 - Add filter lookups for custom fields</li> <li>#6711 - Add <code>longtext</code> custom field type with Markdown support</li> <li>#6715 - Add tenant assignment for cables</li> <li>#6874 - Add tenant assignment for locations</li> <li>#7354 - Relax uniqueness constraints on region, site group, and location names</li> <li>#7452 - Add <code>json</code> custom field type</li> <li>#7530 - Move device type component lists to separate views</li> <li>#7606 - Model transmit power for interfaces</li> <li>#7619 - Permit custom validation rules to be defined as plain data or dotted path to class</li> <li>#7761 - Extend cable tracing across bridged interfaces</li> <li>#7812 - Enable change logging for image attachments</li> <li>#7858 - Standardize the representation of content types across import &amp; export functions</li> </ul>"},{"location":"release-notes/version-3.1/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>#7589 - Correct 128GFC interface type identifier</li> </ul>"},{"location":"release-notes/version-3.1/#other-changes","title":"Other Changes","text":"<ul> <li>#7318 - Raise minimum required PostgreSQL version from 9.6 to 10</li> </ul>"},{"location":"release-notes/version-3.1/#rest-api-changes","title":"REST API Changes","text":"<ul> <li>Added the following endpoints for ASNs:<ul> <li><code>/api/ipam/asn/</code></li> </ul> </li> <li>Added the following endpoints for FHRP groups:<ul> <li><code>/api/ipam/fhrp-groups/</code></li> <li><code>/api/ipam/fhrp-group-assignments/</code></li> </ul> </li> <li>Added the following endpoints for contacts:<ul> <li><code>/api/tenancy/contact-assignments/</code></li> <li><code>/api/tenancy/contact-groups/</code></li> <li><code>/api/tenancy/contact-roles/</code></li> <li><code>/api/tenancy/contacts/</code></li> </ul> </li> <li>Added the following endpoints for wireless networks:<ul> <li><code>/api/wireless/wireless-lans/</code></li> <li><code>/api/wireless/wireless-lan-groups/</code></li> <li><code>/api/wireless/wireless-links/</code></li> </ul> </li> <li>Added <code>tags</code> field to the following models:<ul> <li>circuits.CircuitType</li> <li>dcim.DeviceRole</li> <li>dcim.Location</li> <li>dcim.Manufacturer</li> <li>dcim.Platform</li> <li>dcim.RackRole</li> <li>dcim.Region</li> <li>dcim.SiteGroup</li> <li>ipam.RIR</li> <li>ipam.Role</li> <li>ipam.VLANGroup</li> <li>tenancy.ContactGroup</li> <li>tenancy.ContactRole</li> <li>tenancy.TenantGroup</li> <li>virtualization.ClusterGroup</li> <li>virtualization.ClusterType</li> </ul> </li> <li>circuits.CircuitTermination<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.Cable<ul> <li>Added <code>tenant</code> field</li> </ul> </li> <li>dcim.ConsolePort<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.ConsoleServerPort<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.Device<ul> <li>The <code>display</code> field now includes the device's asset tag, if set</li> <li>Added <code>airflow</code> field</li> </ul> </li> <li>dcim.DeviceType<ul> <li>Added <code>airflow</code> field </li> </ul> </li> <li>dcim.FrontPort<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.Interface<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> <li>Added <code>bridge</code> field</li> <li>Added <code>rf_channel</code> field</li> <li>Added <code>rf_channel_frequency</code> field</li> <li>Added <code>rf_channel_width</code> field</li> <li>Added <code>rf_role</code> field</li> <li>Added <code>tx_power</code> field</li> <li>Added <code>wireless_link</code> field</li> <li>Added <code>wwn</code> field</li> <li>Added <code>count_fhrp_groups</code> read-only field</li> </ul> </li> <li>dcim.Location<ul> <li>Added <code>tenant</code> field</li> </ul> </li> <li>dcim.PowerFeed<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.PowerOutlet<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.PowerPort<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.RearPort<ul> <li><code>cable_peer</code> has been renamed to <code>link_peer</code></li> <li><code>cable_peer_type</code> has been renamed to <code>link_peer_type</code></li> </ul> </li> <li>dcim.Site<ul> <li>Added <code>asns</code> relationship to ipam.ASN</li> </ul> </li> <li>extras.ImageAttachment<ul> <li>Added the <code>last_updated</code> field</li> </ul> </li> <li>extras.Webhook<ul> <li>Added the <code>conditions</code> field</li> </ul> </li> <li>virtualization.VMInterface<ul> <li>Added <code>bridge</code> field</li> <li>Added <code>count_fhrp_groups</code> read-only field</li> </ul> </li> </ul>"},{"location":"release-notes/version-3.2/","title":"NetBox v3.2","text":""},{"location":"release-notes/version-3.2/#v329-2022-08-16","title":"v3.2.9 (2022-08-16)","text":""},{"location":"release-notes/version-3.2/#enhancements","title":"Enhancements","text":"<ul> <li>#8595 - Add PON interface types</li> <li>#8723 - Enable bulk renaming of devices</li> <li>#9161 - Pretty print JSON custom field data when editing</li> <li>#9505 - Display extra addressing details for IPv4 prefixes</li> <li>#9625 - Add phone &amp; email details to contacts panel</li> <li>#9857 - Add clear button to quick search fields</li> <li>#9933 - Add DOCSIS interface type</li> </ul>"},{"location":"release-notes/version-3.2/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#9491 - Remove button for adding inventory item templates to module type components</li> <li>#9979 - Fix Markdown rendering for custom fields in table columns</li> <li>#9986 - Workaround for upstream timezone data bug</li> </ul>"},{"location":"release-notes/version-3.2/#v328-2022-08-08","title":"v3.2.8 (2022-08-08)","text":""},{"location":"release-notes/version-3.2/#enhancements_1","title":"Enhancements","text":"<ul> <li>#9062 - Add/edit {module} substitution to help text for component template name</li> <li>#9637 - Add site group field to rack reservation form</li> <li>#9762 - Add <code>nat_outside</code> column to the IPAddress table</li> <li>#9825 - Add contacts column to virtual machines table</li> <li>#9881 - Increase granularity in utilization graph values</li> <li>#9882 - Add manufacturer column to modules table</li> <li>#9883 - Linkify location column in power panels table</li> <li>#9906 - Include <code>color</code> attribute in front &amp; rear port YAML import/export</li> </ul>"},{"location":"release-notes/version-3.2/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#9827 - Fix assignment of module bay position during bulk creation</li> <li>#9871 - Fix utilization graph value alignments</li> <li>#9884 - Prevent querying assigned VRF on prefix object init</li> <li>#9885 - Fix child prefix counts when editing/deleting aggregates in bulk</li> <li>#9891 - Ensure consistent ordering for tags during object serialization</li> <li>#9919 - Fix potential XSS avenue via linked objects in tables</li> <li>#9948 - Fix TypeError exception when requesting API tokens list as non-authenticated user</li> <li>#9949 - Fix KeyError exception resulting from invalid API token provisioning request</li> <li>#9950 - Prevent redirection to arbitrary URLs via <code>next</code> parameter on login URL</li> <li>#9952 - Prevent InvalidMove when attempting to assign a nested child object as parent</li> </ul>"},{"location":"release-notes/version-3.2/#v327-2022-07-20","title":"v3.2.7 (2022-07-20)","text":""},{"location":"release-notes/version-3.2/#enhancements_2","title":"Enhancements","text":"<ul> <li>#9705 - Support filter expressions for the <code>serial</code> field on racks, devices, and inventory items</li> <li>#9741 - Check for UserConfig instance during user login</li> <li>#9745 - Add wireless LANs and links to global search</li> </ul>"},{"location":"release-notes/version-3.2/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#9437 - Standardize form submission buttons and behavior when using enter key</li> <li>#9499 - Fix filtered bulk deletion of VM Interfaces</li> <li>#9634 - Fix image URLs in rack elevations when using external storage</li> <li>#9715 - Fix <code>SOCIAL_AUTH_PIPELINE</code> config parameter not taking effect</li> <li>#9754 - Fix regression introduced by #9632</li> <li>#9746 - Permit filtering interfaces by arbitrary speed value in UI</li> <li>#9749 - Retain original slug values when modifying object names</li> <li>#9775 - Fix exception when viewing a report with no description</li> </ul>"},{"location":"release-notes/version-3.2/#v326-2022-07-11","title":"v3.2.6 (2022-07-11)","text":""},{"location":"release-notes/version-3.2/#enhancements_3","title":"Enhancements","text":"<ul> <li>#7702 - Enable dynamic configuration for default powerfeed attributes</li> <li>#9396 - Allow filtering modules by bay ID</li> <li>#9403 - Enable modifying virtual chassis properties when creating/editing a device</li> <li>#9540 - Add filters for assigned device &amp; VM to IP addresses list</li> <li>#9686 - Add tenant group column for all object tables with tenant assignments</li> </ul>"},{"location":"release-notes/version-3.2/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#8854 - Fix <code>REMOTE_AUTH_DEFAULT_GROUPS</code> for social-auth backends</li> <li>#9575 - Fix AttributeError exception for FHRP group with an IP address assigned</li> <li>#9597 - Include <code>installed_module</code> in module bay REST API serializer</li> <li>#9632 - Automatically focus on search box when expanding dropdowns</li> <li>#9657 - Fix filtering for custom fields and webhooks in the UI</li> <li>#9682 - Fix bulk assignment of ASNs to sites</li> <li>#9687 - Don't restrict custom text field lengths when entering via UI form</li> <li>#9704 - Include <code>last_updated</code> field on JournalEntry REST API serializer</li> </ul>"},{"location":"release-notes/version-3.2/#v325-2022-06-20","title":"v3.2.5 (2022-06-20)","text":""},{"location":"release-notes/version-3.2/#enhancements_4","title":"Enhancements","text":"<ul> <li>#8704 - Shift-click to select multiple objects in a list</li> <li>#8882 - Support filtering IP addresses by multiple parent prefixes</li> <li>#8893 - Include count of IP ranges under tenant view</li> <li>#9417 - Initialize manufacturer selection when inserting a new module</li> <li>#9501 - Add support for custom Jinja2 filters</li> <li>#9517 - Linkify related power port on power outlet view</li> <li>#9525 - Provide one-click edit link for objects in tables</li> <li>#9533 - Move Markdown reference to local documentation</li> <li>#9534 - Add VLAN group selector to interface bulk edit forms</li> <li>#9556 - Leave dropdown open upon selection for multi-select fields</li> </ul>"},{"location":"release-notes/version-3.2/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#8944 - Fix rendering of Markdown links with colons</li> <li>#9108 - Fix rendering of bracketed Markdown links</li> <li>#9374 - Improve performance when retrieving devices/VMs with config context data</li> <li>#9466 - Avoid sending webhooks after script/report failure</li> <li>#9480 - Fix sorting services &amp; service templates by port numbers</li> <li>#9484 - Include services listening on \"all IPs\" under IP address view</li> <li>#9486 - Fix redirect URL when adding device components from the module view</li> <li>#9495 - Correct link to contacts in contact groups table column</li> <li>#9503 - Hyperlinks in rack elevation SVGs must always use absolute URLs</li> <li>#9512 - Fix duplicate site results when searching by ASN</li> <li>#9524 - Correct order of VLAN fields under VM interface creation form</li> <li>#9537 - Ensure consistent use of placeholder tag throughout UI</li> <li>#9549 - Fix device counts for rack list under rack role view</li> </ul>"},{"location":"release-notes/version-3.2/#v324-2022-05-31","title":"v3.2.4 (2022-05-31)","text":""},{"location":"release-notes/version-3.2/#enhancements_5","title":"Enhancements","text":"<ul> <li>#8374 - Display device type and asset tag if name is blank but asset tag is populated</li> <li>#8922 - Add service list to IP address view</li> <li>#9098 - Add \"other\" types for power ports/outlets, pass-through ports</li> <li>#9239 - Enable filtering by contact group for all models which support contact assignment</li> <li>#9277 - Introduce <code>CSRF_COOKIE_NAME</code> configuration parameter</li> <li>#9347 - Include services in global search</li> <li>#9379 - Redirect to virtual chassis view after adding a member device</li> <li>#9451 - Add <code>export_raw</code> argument for TemplateColumn</li> </ul>"},{"location":"release-notes/version-3.2/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#9094 - Fix partial address search within Prefix and Aggregate filters</li> <li>#9291 - Improve data validation for MultiObjectVar script fields</li> <li>#9358 - Annotate circuit count for providers list under ASN view</li> <li>#9387 - Ensure ActionsColumn <code>extra_buttons</code> are always displayed</li> <li>#9402 - Fix custom field population when creating a virtual chassis</li> <li>#9407 - Clean up display of prefixes values when exporting prefixes list</li> <li>#9420 - Fix custom script class inheritance</li> <li>#9425 - Fix bulk import for object and multi-object custom fields</li> <li>#9430 - Fix passing of initial form data for DynamicModelChoiceFields</li> </ul>"},{"location":"release-notes/version-3.2/#v323-2022-05-12","title":"v3.2.3 (2022-05-12)","text":""},{"location":"release-notes/version-3.2/#enhancements_6","title":"Enhancements","text":"<ul> <li>#8805 - Add \"mixed\" option for device airflow indication</li> <li>#8894 - Include full names when listing users</li> <li>#8998 - Enable filtering racks &amp; reservations by site group</li> <li>#9122 - Introduce <code>clearcache</code> management command &amp; clear cache during upgrade</li> <li>#9221 - Add definition list support for Markdown</li> <li>#9260 - Apply user preferences to tables under object detail views</li> <li>#9278 - Linkify device types count under manufacturers list</li> <li>#9280 - Allow adopting existing components when installing a module</li> <li>#9314 - Add device and VM filters for FHRP group assignments</li> <li>#9340 - Introduce support for error reporting via Sentry</li> <li>#9343 - Add Ubiquiti SmartPower power outlet type</li> </ul>"},{"location":"release-notes/version-3.2/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#9190 - Prevent exception when attempting to instantiate module components which already exist on the parent device</li> <li>#9267 - Remove invalid entry in IP address role choices</li> <li>#9296 - Improve Markdown link sanitization</li> <li>#9306 - Include VC master interfaces when selecting a LAG/bridge for a VC member interface</li> <li>#9311 - Permit creating contact assignment without a priority via the REST API</li> <li>#9313 - Remove HTML code from CSV output of many-to-many relationships</li> <li>#9330 - Add missing <code>module_type</code> field to REST API serializers for modular device component templates</li> </ul>"},{"location":"release-notes/version-3.2/#v322-2022-04-28","title":"v3.2.2 (2022-04-28)","text":""},{"location":"release-notes/version-3.2/#enhancements_7","title":"Enhancements","text":"<ul> <li>#9060 - Add device type filters for device bays, module bays, and inventory items</li> <li>#9152 - Annotate related object type under custom field view</li> <li>#9192 - Add Ubiquiti SmartPower connector type</li> <li>#9214 - Linkify cluster counts in cluster type &amp; group tables</li> </ul>"},{"location":"release-notes/version-3.2/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#4264 - Treat 0th IP as unusable for IPv6 prefixes (excluding /127s)</li> <li>#8941 - Fix dynamic dropdown behavior when browser is zoomed</li> <li>#8959 - Prevent exception when refreshing scripts list (avoid race condition)</li> <li>#9132 - Limit location options by selected site when creating a wireless link</li> <li>#9133 - Upgrade script should require Python 3.8 or later</li> <li>#9138 - Avoid inadvertent form submission when utilizing quick search field on object lists</li> <li>#9151 - Child prefix counts not annotated on aggregates list under RIR view</li> <li>#9156 - Fix loading UserConfig data from fixtures</li> <li>#9158 - Do not list tags field for CSV forms which do not support tag assignment</li> <li>#9194 - Support position assignment when add module bays to multiple devices</li> <li>#9206 - Show header for comments field under module &amp; module type creation views</li> <li>#9222 - Fix circuit ID display under cable view</li> <li>#9227 - Fix related object assignment when recording change record for interfaces</li> </ul>"},{"location":"release-notes/version-3.2/#v321-2022-04-14","title":"v3.2.1 (2022-04-14)","text":""},{"location":"release-notes/version-3.2/#enhancements_8","title":"Enhancements","text":"<ul> <li>#5479 - Allow custom job timeouts for scripts &amp; reports</li> <li>#8543 - Improve filtering for wireless LAN VLAN selection</li> <li>#8920 - Limit number of non-racked devices displayed</li> <li>#8956 - Retain old script/report results for configured lifetime</li> <li>#8973 - Display VLAN group count under site view</li> <li>#9081 - Add <code>fhrpgroup_id</code> filter for IP addresses</li> <li>#9099 - Enable display of installed module serial &amp; asset tag in module bays list</li> <li>#9110 - Add Neutrik proprietary power connectors</li> <li>#9123 - Improve appearance of SSO login providers</li> </ul>"},{"location":"release-notes/version-3.2/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#8931 - Copy assigned tenant when cloning a location</li> <li>#9055 - Restore ability to move inventory item to other device</li> <li>#9057 - Fix missing instance counts for module types</li> <li>#9061 - Fix general search for device components</li> <li>#9065 - Min/max VID should not be required when filtering VLAN groups</li> <li>#9079 - Fail validation when an inventory item is assigned as its own parent</li> <li>#9096 - Remove duplicate filter tag when filtering by \"none\"</li> <li>#9100 - Include position field in module type YAML export</li> <li>#9116 - <code>assigned_to_interface</code> filter for IP addresses should not match FHRP group assignments</li> <li>#9118 - Fix validation error when importing VM child interfaces</li> <li>#9128 - Resolve component labels per module bay position when installing modules</li> </ul>"},{"location":"release-notes/version-3.2/#v320-2022-04-05","title":"v3.2.0 (2022-04-05)","text":"<p>Python 3.8 or Later Required</p> <p>NetBox v3.2 requires Python 3.8 or later.</p> <p>Deletion of Legacy Data</p> <p>This release includes a database migration that will remove the <code>asn</code>, <code>contact_name</code>, <code>contact_phone</code>, and <code>contact_email</code> fields from the site model. (These fields have been superseded by the ASN and contact models introduced in NetBox v3.1.) To protect against the accidental destruction of data, the upgrade process will fail if any sites still have data in any of these fields. To bypass this safeguard, set the <code>NETBOX_DELETE_LEGACY_DATA</code> environment variable when running the upgrade script, which will permit the destruction of legacy data.</p> <p>Migration Scripts</p> <p>A set of migration scripts is available to assist with the migration of legacy site data.</p>"},{"location":"release-notes/version-3.2/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Automatic redirection of legacy slug-based URL paths has been removed. URL-based slugs were changed to use numeric IDs in v2.11.0.</li> <li>The <code>asn</code> field has been removed from the site model. Please replicate any site ASN assignments to the ASN model introduced in NetBox v3.1 prior to upgrading.</li> <li>The <code>asn</code> query filter for sites now matches against the AS number of assigned ASN objects.</li> <li>The <code>contact_name</code>, <code>contact_phone</code>, and <code>contact_email</code> fields have been removed from the site model. Please replicate any data remaining in these fields to the contact model introduced in NetBox v3.1 prior to upgrading.</li> <li>The <code>created</code> field of all change-logged models now conveys a full datetime object, rather than only a date. (Previous date-only values will receive a timestamp of 00:00.) While this change is largely unconcerning, strictly-typed API consumers may need to be updated.</li> <li>A <code>pre_run()</code> method has been added to the base Report class. Although unlikely to affect most installations, you may need to alter any reports which already use this name for a method.</li> <li>Webhook URLs now support Jinja2 templating. Although this is unlikely to introduce any issues, it's possible that an unusual URL might trigger a Jinja2 rendering error, in which case the URL would need to be properly escaped.</li> </ul>"},{"location":"release-notes/version-3.2/#new-features","title":"New Features","text":""},{"location":"release-notes/version-3.2/#plugins-framework-extensions-8333","title":"Plugins Framework Extensions (#8333)","text":"<p>NetBox's plugins framework has been extended considerably in this release. Additions include:</p> <ul> <li>Officially-supported generic view classes for common CRUD operations:<ul> <li><code>ObjectView</code></li> <li><code>ObjectEditView</code></li> <li><code>ObjectDeleteView</code></li> <li><code>ObjectListView</code></li> <li><code>BulkImportView</code></li> <li><code>BulkEditView</code></li> <li><code>BulkDeleteView</code></li> </ul> </li> <li>The <code>NetBoxModel</code> base class, which enables various NetBox features, including:<ul> <li>Change logging</li> <li>Custom fields</li> <li>Custom links</li> <li>Custom validation</li> <li>Export templates</li> <li>Journaling</li> <li>Tags</li> <li>Webhooks</li> </ul> </li> <li>Four base form classes for manipulating objects via the UI:<ul> <li><code>NetBoxModelForm</code></li> <li><code>NetBoxModelCSVForm</code></li> <li><code>NetBoxModelBulkEditForm</code></li> <li><code>NetBoxModelFilterSetForm</code></li> </ul> </li> <li>The <code>NetBoxModelFilterSet</code> base class for plugin filter sets</li> <li>The <code>NetBoxTable</code> base class for rendering object tables with <code>django-tables2</code>, as well as various custom column classes</li> <li>Function-specific templates (for generic views)</li> <li>Various custom template tags and filters</li> <li><code>NetBoxModelViewSet</code> and several base serializer classes now provide enhanced REST API functionality</li> <li>Plugins can now extend NetBox's GraphQL API with their own schema</li> </ul> <p>No breaking changes to previously supported components have been introduced in this release. However, plugin authors are encouraged to audit their existing code for misuse of unsupported components, as much of NetBox's internal code base has been reorganized.</p>"},{"location":"release-notes/version-3.2/#modules-module-types-7844","title":"Modules &amp; Module Types (#7844)","text":"<p>Several new models have been added to represent field-replaceable device modules, such as line cards installed within a chassis-based switch or router. Similar to devices, each module is instantiated from a user-defined module type, and can have components (interfaces, console ports, etc.) associated with it. These components become available to the parent device once the module has been installed within a module bay. This provides a convenient mechanism to effect the addition and deletion of device components as modules are installed and removed.</p> <p>Automatic renaming of module components is also supported. When a new module is created, any occurrence of the string <code>{module}</code> in a component name will be replaced with the position of the module bay into which the module is being installed.</p> <p>As with device types, the NetBox community offers a selection of curated real-world module type definitions in our device type library. These YAML files can be imported directly to NetBox for your convenience.</p>"},{"location":"release-notes/version-3.2/#custom-object-fields-7006","title":"Custom Object Fields (#7006)","text":"<p>Two new types of custom field have been introduced: object and multi-object. These can be used to associate an object in NetBox with some other arbitrary object(s) regardless of its type. For example, you might create a custom field named <code>primary_site</code> on the tenant model so that each tenant can have particular site designated as its primary. The multi-object custom field type allows for the assignment of multiple objects of the same type.</p> <p>Custom field object assignment is fully supported in the REST API, and functions similarly to built-in foreign key relations. Nested representations are provided automatically for each custom field object.</p>"},{"location":"release-notes/version-3.2/#custom-status-choices-8054","title":"Custom Status Choices (#8054)","text":"<p>Custom choices can be now added to most object status fields in NetBox. This is done by defining the <code>FIELD_CHOICES</code> configuration parameter to map field identifiers to an iterable of custom choices an (optionally) colors. These choices are populated automatically when NetBox initializes. For example, the following configuration will add three custom choices for the site status field, each with a designated color:</p> <pre><code>FIELD_CHOICES = {\n    'dcim.Site.status': (\n        ('foo', 'Foo', 'red'),\n        ('bar', 'Bar', 'green'),\n        ('baz', 'Baz', 'blue'),\n    )\n}\n</code></pre> <p>This will replace all default choices for this field with those listed. If instead the intent is to extend the set of default choices, this can be done by appending a plus sign (<code>+</code>) to the end of the field identifier. For example, the following will add a single extra choice while retaining the defaults provided by NetBox:</p> <pre><code>FIELD_CHOICES = {\n    'dcim.Site.status+': (\n        ('fubar', 'FUBAR', 'red'),\n    )\n}\n</code></pre>"},{"location":"release-notes/version-3.2/#improved-user-preferences-7759","title":"Improved User Preferences (#7759)","text":"<p>A robust new mechanism for managing user preferences is included in this release. The user preferences form has been improved for better usability, and administrators can now define default preferences for all users with the <code>DEFAULT_USER_PREFERENCES</code> configuration parameter. For example, this can be used to define the columns which appear by default in a table:</p> <pre><code>DEFAULT_USER_PREFERENCES = {\n    'tables': {\n        'IPAddressTable': {\n            'columns': ['address', 'status', 'created', 'description']\n        }\n    }\n}\n</code></pre> <p>Users can adjust their own preferences under their user profile. A complete list of supported preferences is available in NetBox's developer documentation.</p>"},{"location":"release-notes/version-3.2/#inventory-item-roles-3087","title":"Inventory Item Roles (#3087)","text":"<p>A new model has been introduced to represent functional roles for inventory items, similar to device roles. The assignment of roles to inventory items is optional.</p>"},{"location":"release-notes/version-3.2/#inventory-item-templates-8118","title":"Inventory Item Templates (#8118)","text":"<p>Inventory items can now be templatized on a device type similar to other components (such as interfaces or console ports). This enables users to better pre-model fixed hardware components such as power supplies or hard disks.</p> <p>Inventory item templates can be arranged hierarchically within a device type, and may be assigned to other templated components. These relationships will be mirrored when instantiating inventory items on a newly-created device (see #7846). For example, if defining an optic assigned to an interface template on a device type, the instantiated device will mimic this relationship between the optic and interface.</p>"},{"location":"release-notes/version-3.2/#service-templates-1591","title":"Service Templates (#1591)","text":"<p>A new service template model has been introduced to assist in standardizing the definition and association of applications with devices and virtual machines. As an alternative to manually defining a name, protocol, and port(s) each time a service is created, a user now has the option of selecting a pre-defined template from which these values will be populated.</p>"},{"location":"release-notes/version-3.2/#automatic-provisioning-of-next-available-vlans-2658","title":"Automatic Provisioning of Next Available VLANs (#2658)","text":"<p>A new REST API endpoint has been added at <code>/api/ipam/vlan-groups/&lt;id&gt;/available-vlans/</code>. A GET request to this endpoint will return a list of available VLANs within the group. A POST request can be made specifying the name(s) of one or more VLANs to create within the group, and their VLAN IDs will be assigned automatically from the available pool.</p> <p>Where it is desired to limit the range of available VLANs within a group, users can define a minimum and/or maximum VLAN ID per group (see #8168).</p>"},{"location":"release-notes/version-3.2/#enhancements_9","title":"Enhancements","text":"<ul> <li>#5429 - Enable toggling the placement of table pagination controls</li> <li>#6954 - Remember users' table ordering preferences</li> <li>#7650 - Expose <code>AUTH_PASSWORD_VALIDATORS</code> setting to enforce password validation for local accounts</li> <li>#7679 - Add actions menu to all object tables</li> <li>#7681 - Add <code>service_id</code> field for provider networks</li> <li>#7784 - Support cluster type assignment for config contexts</li> <li>#7846 - Enable associating inventory items with device components</li> <li>#7852 - Enable the assignment of interfaces to VRFs</li> <li>#7853 - Add <code>speed</code> and <code>duplex</code> fields to device interface model</li> <li>#8168 - Add <code>min_vid</code> and <code>max_vid</code> fields to VLAN group</li> <li>#8295 - Jinja2 rendering is now supported for webhook URLs</li> <li>#8296 - Allow disabling custom links</li> <li>#8307 - Add <code>data_type</code> indicator to REST API serializer for custom fields</li> <li>#8463 - Change the <code>created</code> field on all change-logged models from date to datetime</li> <li>#8496 - Enable assigning multiple ASNs to a provider</li> <li>#8572 - Add a <code>pre_run()</code> method for reports</li> <li>#8593 - Add a <code>link</code> field for contacts</li> <li>#8649 - Enable customization of configuration module using <code>NETBOX_CONFIGURATION</code> environment variable</li> <li>#9006 - Enable custom fields, custom links, and tags for journal entries</li> </ul>"},{"location":"release-notes/version-3.2/#bug-fixes-from-beta2","title":"Bug Fixes (From Beta2)","text":"<ul> <li>#8658 - Fix display of assigned components under inventory item lists</li> <li>#8838 - Fix FieldError exception during global search</li> <li>#8845 - Correct default ASN formatting in table</li> <li>#8869 - Fix NoReverseMatch exception when displaying tag w/assignments</li> <li>#8872 - Enable filtering by custom object fields</li> <li>#8970 - Permit nested inventory item templates on device types</li> <li>#8976 - Add missing <code>object_type</code> field on CustomField REST API serializer</li> <li>#8978 - Fix instantiation of front ports when provisioning a module</li> <li>#9007 - Fix FieldError exception when instantiating a device type with nested inventory items</li> </ul>"},{"location":"release-notes/version-3.2/#other-changes","title":"Other Changes","text":"<ul> <li>#7731 - Require Python 3.8 or later</li> <li>#7743 - Remove legacy ASN field from site model</li> <li>#7748 - Remove legacy contact fields from site model</li> <li>#8031 - Remove automatic redirection of legacy slug-based URLs</li> <li>#8195, #8454 - Use 64-bit integers for all primary keys</li> <li>#8509 - <code>CSRF_TRUSTED_ORIGINS</code> is now a discrete configuration parameter (rather than being populated from <code>ALLOWED_HOSTS</code>)</li> <li>#8684 - Change custom link template context variable <code>obj</code> to <code>object</code> (backward-compatible)</li> </ul>"},{"location":"release-notes/version-3.2/#rest-api-changes","title":"REST API Changes","text":"<ul> <li>Added the following endpoints:<ul> <li><code>/api/dcim/inventory-item-roles/</code></li> <li><code>/api/dcim/inventory-item-templates/</code></li> <li><code>/api/dcim/modules/</code></li> <li><code>/api/dcim/module-bays/</code></li> <li><code>/api/dcim/module-bay-templates/</code></li> <li><code>/api/dcim/module-types/</code></li> <li><code>/api/ipam/service-templates/</code></li> <li><code>/api/ipam/vlan-groups/&lt;id&gt;/available-vlans/</code></li> </ul> </li> <li>circuits.Provider<ul> <li>Added <code>asns</code> field</li> </ul> </li> <li>circuits.ProviderNetwork<ul> <li>Added <code>service_id</code> field</li> </ul> </li> <li>dcim.ConsolePort<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.ConsoleServerPort<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.FrontPort<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.Interface<ul> <li>Added <code>module</code>, <code>speed</code>, <code>duplex</code>, and <code>vrf</code> fields</li> </ul> </li> <li>dcim.InventoryItem<ul> <li>Added <code>component_type</code>, <code>component_id</code>, and <code>role</code> fields</li> <li>Added read-only <code>component</code> field (GFK)</li> </ul> </li> <li>dcim.PowerPort<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.PowerOutlet<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.RearPort<ul> <li>Added <code>module</code> field</li> </ul> </li> <li>dcim.Site<ul> <li>Removed the <code>asn</code>, <code>contact_name</code>, <code>contact_phone</code>, and <code>contact_email</code> fields</li> </ul> </li> <li>extras.ConfigContext<ul> <li>Add <code>cluster_types</code> field</li> </ul> </li> <li>extras.CustomField<ul> <li>Added <code>data_type</code> and <code>object_type</code> fields</li> </ul> </li> <li>extras.CustomLink<ul> <li>Added <code>enabled</code> field</li> </ul> </li> <li>extras.JournalEntry<ul> <li>Added <code>custom_fields</code> and <code>tags</code> fields</li> </ul> </li> <li>ipam.ASN<ul> <li>Added <code>provider_count</code> field</li> </ul> </li> <li>ipam.VLANGroup<ul> <li>Added the <code>/availables-vlans/</code> endpoint</li> <li>Added <code>min_vid</code> and <code>max_vid</code> fields</li> </ul> </li> <li>tenancy.Contact<ul> <li>Added <code>link</code> field</li> </ul> </li> <li>virtualization.VMInterface<ul> <li>Added <code>vrf</code> field</li> </ul> </li> </ul>"},{"location":"release-notes/version-3.3/","title":"NetBox v3.3","text":""},{"location":"release-notes/version-3.3/#v3310-2022-12-13","title":"v3.3.10 (2022-12-13)","text":""},{"location":"release-notes/version-3.3/#enhancements","title":"Enhancements","text":"<ul> <li>#9361 - Add replication controls for module bulk import</li> <li>#10255 - Introduce <code>LOGOUT_REDIRECT_URL</code> config parameter to control redirection of user after logout</li> <li>#10447 - Enable reassigning an inventory item from one device to another</li> <li>#10516 - Add vertical frame &amp; cabinet rack types</li> <li>#10748 - Add provider selection field for provider networks to circuit termination edit view</li> <li>#11089 - Permit whitespace in MAC addresses</li> <li>#11119 - Enable filtering L2VPNs by slug</li> </ul>"},{"location":"release-notes/version-3.3/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#11041 - Correct power utilization percentage precision</li> <li>#11077 - Honor configured date format when displaying date custom field values in tables</li> <li>#11087 - Fix background color of bottom banner content</li> <li>#11101 - Correct circuits count under site view</li> <li>#11109 - Fix nullification of custom object &amp; multi-object fields via REST API</li> <li>#11128 - Disable ordering changelog table by object to avoid exception</li> <li>#11142 - Correct available choices for status under IP range filter form</li> <li>#11168 - Honor <code>RQ_DEFAULT_TIMEOUT</code> config parameter when using Redis Sentinel</li> <li>#11173 - Enable missing tags columns for contact, L2VPN lists</li> </ul>"},{"location":"release-notes/version-3.3/#v339-2022-11-30","title":"v3.3.9 (2022-11-30)","text":""},{"location":"release-notes/version-3.3/#enhancements_1","title":"Enhancements","text":"<ul> <li>#10653 - Ensure logging of failed login attempts</li> </ul>"},{"location":"release-notes/version-3.3/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#6389 - Call <code>snapshot()</code> on object when processing deletions</li> <li>#9223 - Fix serialization of array field values in change log</li> <li>#9878 - Fix spurious error message when rendering REST API docs</li> <li>#10236 - Fix TypeError exception when viewing PDU configured for three-phase power</li> <li>#10241 - Support referencing custom field related objects by attribute in addition to PK</li> <li>#10579 - Mark cable traces terminating to a provider network as complete</li> <li>#10721 - Disable ordering by custom object field columns</li> <li>#10929 - Raise validation error when attempting to create a duplicate cable termination</li> <li>#10936 - Permit demotion of device/VM primary IP via IP address edit form</li> <li>#10938 - <code>render_field</code> template tag should respect <code>label</code> kwarg</li> <li>#10969 - Update cable paths ending at associated rear port when creating new front ports</li> <li>#10996 - Hide checkboxes on child object lists when no bulk operations are available</li> <li>#10997 - Fix exception when editing NAT IP for VM with no cluster</li> <li>#11014 - Use natural ordering when sorting rack elevations by name</li> <li>#11028 - Enable bulk clearing of color attribute of pass-through ports</li> <li>#11047 - Cloning a rack reservation should replicate rack &amp; user</li> </ul>"},{"location":"release-notes/version-3.3/#v338-2022-11-16","title":"v3.3.8 (2022-11-16)","text":""},{"location":"release-notes/version-3.3/#enhancements_2","title":"Enhancements","text":"<ul> <li>#10356 - Add backplane Ethernet interface types</li> <li>#10902 - Add location selector to power feed form</li> <li>#10904 - Use front/rear port colors in cable trace SVG</li> <li>#10914 - Include \"add module type\" button on manufacturer view</li> <li>#10915 - Add count of L2VPNs to tenant view</li> <li>#10919 - Include device location under cable view</li> <li>#10920 - Include request cookies when queuing a custom script</li> </ul>"},{"location":"release-notes/version-3.3/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#9439 - Ensure thread safety of change logging functions</li> <li>#10709 - Correct UI display for <code>azuread-v2-tenant-oauth2</code> SSO backend</li> <li>#10829 - Fix bulk edit/delete buttons ad top of object lists</li> <li>#10837 - Correct cookie paths when <code>BASE_PATH</code> is set</li> <li>#10874 - Remove erroneous link for contact assignment count</li> <li>#10881 - Fix dark mode coloring for data on device status page</li> <li>#10891 - Populate tag selection list for service filter form</li> <li>#10897 - Fix form widget styling on FHRP group form</li> <li>#10910 - Fix cable creation links on power port view</li> </ul>"},{"location":"release-notes/version-3.3/#v337-2022-11-01","title":"v3.3.7 (2022-11-01)","text":""},{"location":"release-notes/version-3.3/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#10282 - Enforce advisory locks when allocating available IP addresses to prevent race conditions</li> <li>#10770 - Fix social authentication for new users</li> <li>#10791 - Permit nullifying VLAN group <code>scope_type</code> via REST API</li> <li>#10803 - Fix exception when ordering contacts by number of assignments</li> <li>#10809 - Permit nullifying site <code>time_zone</code> via REST API</li> </ul>"},{"location":"release-notes/version-3.3/#v336-2022-10-26","title":"v3.3.6 (2022-10-26)","text":""},{"location":"release-notes/version-3.3/#enhancements_3","title":"Enhancements","text":"<ul> <li>#9584 - Enable filtering devices by device type slug</li> <li>#9722 - Add LDAP configuration parameters to specify certificates</li> <li>#10580 - Link \"assigned\" checkbox in IP address table to assigned interface</li> <li>#10639 - Set cookie paths according to configured <code>BASE_PATH</code></li> <li>#10685 - Position A/Z termination cards above the fold under circuit view</li> </ul>"},{"location":"release-notes/version-3.3/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#9669 - Strip colons from usernames when using remote authentication</li> <li>#10575 - Include OIDC dependencies for python-social-auth</li> <li>#10584 - Fix service clone link</li> <li>#10610 - Allow assignment of VC member to LAG on non-master peer</li> <li>#10643 - Ensure consistent display of custom fields for all model forms</li> <li>#10646 - Fix filtering of power feed by power panel when connecting a cable</li> <li>#10655 - Correct display of assigned contacts in object tables</li> <li>#10666 - Re-evaluate disabled LDAP user when processing API requests</li> <li>#10682 - Correct home view links to connection lists</li> <li>#10712 - Fix ModuleNotFoundError exception when generating API schema under Python 3.9+</li> <li>#10716 - Add left/right page plugin content embeds for tag view</li> <li>#10719 - Prevent user without sufficient permission from creating an IP address via FHRP group creation</li> <li>#10723 - Distinguish between inside/outside NAT assignments for device/VM primary IPs</li> <li>#10745 - Correct display of status field in clusters list</li> <li>#10746 - Add missing status attribute to cluster view</li> </ul>"},{"location":"release-notes/version-3.3/#v335-2022-10-05","title":"v3.3.5 (2022-10-05)","text":""},{"location":"release-notes/version-3.3/#enhancements_4","title":"Enhancements","text":"<ul> <li>#8424 - Include rack elevation under device view</li> <li>#10352 - Omit extraneous URL query attributes during search</li> <li>#10465 - Improve formatting of device heights and rack positions</li> </ul>"},{"location":"release-notes/version-3.3/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#9497 - Adjust non-racked device filter on site and location detailed view</li> <li>#10408 - Fix validation when attempting to add redundant contact assignments</li> <li>#10423 - Enforce object type validation when creating journal entries</li> <li>#10435 - Fix exception when filtering VLANs by virtual machine with no cluster assigned</li> <li>#10439 - Fix form widget styling for DeviceType airflow field</li> <li>#10445 - Avoid rounding virtual machine memory values</li> <li>#10460 - Restore missing connection details for device components</li> <li>#10461 - Enable filtering by read-only custom fields in the UI</li> <li>#10470 - Omit read-only custom fields from CSV import forms</li> <li>#10480 - Cable trace SVG links should not force a new window</li> <li>#10491 - Clarify representation of blocking contact assignments during contact deletion</li> <li>#10513 - Disable the reassignment of a module to a new device</li> <li>#10517 - Automatically inherit site assignment from cluster when creating a virtual machine</li> <li>#10559 - Permit the pinning of a VM to a particular device within a cluster which has no site assignment</li> <li>#10562 - Correct URL for contacts table tags column</li> </ul>"},{"location":"release-notes/version-3.3/#v334-2022-09-16","title":"v3.3.4 (2022-09-16)","text":""},{"location":"release-notes/version-3.3/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#10383 - Fix assignment of component templates to module types via web UI</li> <li>#10387 - Fix <code>MultiValueDictKeyError</code> exception when editing a device interface</li> </ul>"},{"location":"release-notes/version-3.3/#v333-2022-09-15","title":"v3.3.3 (2022-09-15)","text":""},{"location":"release-notes/version-3.3/#enhancements_5","title":"Enhancements","text":"<ul> <li>#8580 - Add <code>occupied</code> filter for cabled objects to filter by cable or <code>mark_connected</code></li> <li>#9577 - Add <code>has_front_image</code> and <code>has_rear_image</code> filters for device types</li> <li>#10268 - Omit trailing \".0\" in device positions within UI</li> <li>#10359 - Add region and site group columns to the devices table</li> </ul>"},{"location":"release-notes/version-3.3/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#9231 - Fix <code>empty</code> lookup expression for string filters</li> <li>#10247 - Allow changing the pre-populated device/VM when creating new components</li> <li>#10250 - Fix exception when CableTermination validation fails during bulk import of cables</li> <li>#10258 - Enable the use of reports &amp; scripts packaged in submodules</li> <li>#10259 - Fix <code>NoReverseMatch</code> exception when listing available prefixes with \"flat\" column displayed</li> <li>#10270 - Fix custom field validation when creating new services</li> <li>#10278 - Fix \"create &amp; add another\" for image attachments</li> <li>#10294 - Fix spurious changelog diff for interface WWN field</li> <li>#10304 - Enable cloning for custom fields &amp; custom links</li> <li>#10305 - Fix Virtual Chassis master field cannot be null according to the API</li> <li>#10307 - Correct value for \"Passive 48V (4-pair)\" PoE type selection</li> <li>#10333 - Show available values for <code>ui_visibility</code> field of CustomField for CSV import</li> <li>#10337 - Display SSO links when local authentication fails</li> <li>#10353 - Table action buttons should reserve return URL parameters</li> <li>#10362 - Correct display of custom fields when editing an L2VPN termination</li> </ul>"},{"location":"release-notes/version-3.3/#v332-2022-09-02","title":"v3.3.2 (2022-09-02)","text":""},{"location":"release-notes/version-3.3/#enhancements_6","title":"Enhancements","text":"<ul> <li>#9477 - Enable clearing applied table column ordering</li> <li>#10034 - Add L2VPN column to interface and VLAN tables</li> <li>#10043 - Add support for <code>limit</code> query parameter to available VLANs API endpoint</li> <li>#10060 - Add journal entries to global search</li> <li>#10195 - Enable filtering of device components by rack</li> <li>#10233 - Enable sorting rack elevations by facility ID</li> </ul>"},{"location":"release-notes/version-3.3/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#9328 - Hide available IPs when non-default ordering is applied</li> <li>#9481 - Update child device location when parent location changes</li> <li>#9832 - Improve error message when validating rack reservation units</li> <li>#9895 - Various corrections to OpenAPI spec</li> <li>#9962 - SSO login should respect <code>next</code> URL query parameter</li> <li>#9963 - Fix support for custom <code>CSRF_COOKIE_NAME</code> value</li> <li>#10155 - Fix rear port display when editing front port template for module type </li> <li>#10156 - Avoid forcing SVG image links to open in a new window</li> <li>#10161 - Restore \"set null\" option for custom fields during bulk edit</li> <li>#10176 - Correct utilization display for empty racks</li> <li>#10177 - Correct display of custom fields when editing VM interfaces</li> <li>#10178 - Display manufacturer name alongside device type under device view</li> <li>#10181 - Restore MultiPartParser (regression from #10031)</li> <li>#10184 - Fix vertical alignment when displaying object attributes with buttons</li> <li>#10208 - Fix permissions evaluation for interface actions dropdown menu</li> <li>#10217 - Handle exception when trace splits to multiple rear ports</li> <li>#10220 - Validate IP version when assigning primary IPs to a virtual machine</li> <li>#10231 - Correct API schema definition for several serializer fields</li> </ul>"},{"location":"release-notes/version-3.3/#v331-2022-08-25","title":"v3.3.1 (2022-08-25)","text":""},{"location":"release-notes/version-3.3/#enhancements_7","title":"Enhancements","text":"<ul> <li>#6454 - Include contextual help when creating first objects in UI</li> <li>#9935 - Add 802.11ay and \"other\" wireless interface types</li> <li>#10031 - Enforce <code>application/json</code> content type for REST API requests</li> <li>#10033 - Disable \"add termination\" button for point-to-point L2VPNs with two terminations</li> <li>#10037 - Add \"child interface\" option to actions dropdown in interfaces list</li> <li>#10038 - Add \"L2VPN termination\" option to actions dropdown in interfaces list</li> <li>#10039 - Add \"assign FHRP group\" option to actions dropdown in interfaces list</li> <li>#10061 - Replicate type when cloning L2VPN instances</li> <li>#10066 - Use fixed column widths for custom field values in UI</li> <li>#10133 - Enable nullifying device location during bulk edit</li> </ul>"},{"location":"release-notes/version-3.3/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>#9663 - Omit available IP annotations when filtering prefix child IPs list</li> <li>#10040 - Fix exception when ordering prefixes by flat representation</li> <li>#10053 - Custom fields header should not be displayed when editing circuit terminations with no custom fields</li> <li>#10055 - Fix extraneous NAT indicator by device primary IP</li> <li>#10057 - Fix AttributeError exception when global search results include rack reservations</li> <li>#10059 - Add identifier column to L2VPN table</li> <li>#10070 - Add unique constraint for L2VPN slug</li> <li>#10087 - Correct display of far end in console/power/interface connections tables</li> <li>#10089 - <code>linkify</code> template filter should escape object representation</li> <li>#10094 - Fix 404 when using \"create and add another\" to add contact assignments</li> <li>#10108 - Linkify inside NAT IPs for primary device IPs in UI</li> <li>#10109 - Fix available prefixes calculation for container prefixes in the global table</li> <li>#10111 - Fix ValueError exception when searching for L2VPN objects</li> <li>#10118 - Fix display of connected LLDP neighbors for devices</li> <li>#10134 - Custom fields data serializer should return a 400 response for invalid data</li> <li>#10135 - Fix SSO support for SAML2 IDPs</li> <li>#10147 - Permit the creation of 0U device types via REST API</li> </ul>"},{"location":"release-notes/version-3.3/#v330-2022-08-17","title":"v3.3.0 (2022-08-17)","text":""},{"location":"release-notes/version-3.3/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Device position, device type height, and rack unit values are now reported as decimals (e.g. <code>1.0</code> or <code>1.5</code>) to support modeling half-height rack units.</li> <li>The <code>nat_outside</code> relation on the IP address model now returns a list of zero or more related IP addresses, rather than a single instance (or None).</li> <li>Several fields on the cable API serializers have been altered or removed to support multiple-object cable terminations:</li> </ul> Old Name Old Type New Name New Type <code>termination_a_type</code> string Removed - <code>termination_b_type</code> string Removed - <code>termination_a_id</code> integer Removed - <code>termination_b_id</code> integer Removed - <code>termination_a</code> object <code>a_terminations</code> list <code>termination_b</code> object <code>b_terminations</code> list <ul> <li>As with the cable model, several API fields on all objects to which cables can be connected (interfaces, circuit terminations, etc.) have been changed:</li> </ul> Old Name Old Type New Name New Type <code>link_peer</code> object <code>link_peers</code> list <code>link_peer_type</code> string <code>link_peers_type</code> string <code>connected_endpoint</code> object <code>connected_endpoints</code> list <code>connected_endpoint_type</code> string <code>connected_endpoints_type</code> string <code>connected_endpoint_reachable</code> boolean <code>connected_endpoints_reachable</code> boolean <ul> <li>The cable path serialization returned by the <code>/paths/</code> endpoint for pass-through ports has been simplified, and the following fields removed: <code>origin_type</code>, <code>origin</code>, <code>destination_type</code>, <code>destination</code>. (Additionally, <code>is_complete</code> has been added.)</li> </ul>"},{"location":"release-notes/version-3.3/#new-features","title":"New Features","text":""},{"location":"release-notes/version-3.3/#multi-object-cable-terminations-9102","title":"Multi-object Cable Terminations (#9102)","text":"<p>When creating a cable in NetBox, each end can now be attached to multiple termination points. This allows accurate modeling of duplex fiber connections to individual termination ports and breakout cables, for example. (Note that all terminations attached to one end of a cable must be the same object type, but do not need to connect to the same parent object.) Additionally, cable terminations can now be modified without needing to delete and recreate the cable.</p>"},{"location":"release-notes/version-3.3/#l2vpn-modeling-8157","title":"L2VPN Modeling (#8157)","text":"<p>NetBox can now model a variety of L2 VPN technologies, including VXLAN, VPLS, and others. Interfaces and VLANs can be attached to L2VPNs to track connectivity across an overlay. Similarly to VRFs, each L2VPN can also have import and export route targets associated with it.</p>"},{"location":"release-notes/version-3.3/#poe-interface-attributes-1099","title":"PoE Interface Attributes (#1099)","text":"<p>Two new fields have been added to the device interface model to track Power over Ethernet (PoE) capabilities:</p> <ul> <li>PoE mode: Power supplying equipment (PSE) or powered device (PD)</li> <li>PoE type: Applicable IEEE standard or other power type </li> </ul>"},{"location":"release-notes/version-3.3/#half-height-rack-units-51","title":"Half-Height Rack Units (#51)","text":"<p>Device type height can now be specified in 0.5U increments, allowing for the creation of devices consume partial rack units. Additionally, a device can be installed at the half-unit mark within a rack (e.g. U2.5). For example, two half-height devices positioned in sequence will consume a single rack unit; two consecutive 1.5U devices will consume 3U of space.</p>"},{"location":"release-notes/version-3.3/#restrict-api-tokens-by-client-ip-8233","title":"Restrict API Tokens by Client IP (#8233)","text":"<p>API tokens can now be restricted to use by certain client IP addresses or networks. For example, an API token with its <code>allowed_ips</code> list set to <code>[192.0.2.0/24]</code> will permit authentication only from API clients within that network; requests from other sources will fail authentication. This enables administrators to restrict the use of a token to specific clients.</p>"},{"location":"release-notes/version-3.3/#reference-user-in-permission-constraints-9074","title":"Reference User in Permission Constraints (#9074)","text":"<p>NetBox's permission constraints have been expanded to support referencing the current user associated with a request using the special <code>$user</code> token. As an example, this enables an administrator to efficiently grant each user to edit his or her own journal entries, but not those created by other users.</p> <pre><code>{\n\"created_by\": \"$user\"\n}\n</code></pre>"},{"location":"release-notes/version-3.3/#custom-field-grouping-8495","title":"Custom Field Grouping (#8495)","text":"<p>A <code>group_name</code> field has been added to the custom field model to enable organizing related custom fields by group. Similarly to custom links, custom fields which have been assigned to the same group will be rendered within that group when viewing an object in the UI. (Custom field grouping has no effect on API operation.)</p>"},{"location":"release-notes/version-3.3/#toggle-custom-field-visibility-9166","title":"Toggle Custom Field Visibility (#9166)","text":"<p>The behavior of each custom field within the NetBox UI can now be controlled individually by toggling its UI visibility. Three options are available:</p> <ul> <li>Read/write: The custom field is included when viewing and editing objects (default).</li> <li>Read-only: The custom field is displayed when viewing an object, but it cannot be edited via the UI. (It will appear in the form as a read-only field.)</li> <li>Hidden: The custom field will never be displayed within the UI. This option is recommended for fields which are not intended for use by human users.</li> </ul> <p>Custom field UI visibility has no impact on API operation.</p>"},{"location":"release-notes/version-3.3/#enhancements_8","title":"Enhancements","text":"<ul> <li>#1202 - Support overlapping assignment of NAT IP addresses</li> <li>#4350 - Illustrate reservations vertically alongside rack elevations</li> <li>#4434 - Enable highlighting devices within rack elevations</li> <li>#5303 - A virtual machine may be assigned to a site and/or cluster</li> <li>#7120 - Add <code>termination_date</code> field to Circuit</li> <li>#7744 - Add <code>status</code> field to Location</li> <li>#8171 - Populate next available address when cloning an IP</li> <li>#8222 - Enable the assignment of a VM to a specific host device within a cluster</li> <li>#8471 - Add <code>status</code> field to Cluster</li> <li>#8511 - Enable custom fields and tags for circuit terminations</li> <li>#8995 - Enable arbitrary ordering of REST API results</li> <li>#9070 - Hide navigation menu items based on user permissions</li> <li>#9177 - Add tenant assignment for wireless LANs &amp; links</li> <li>#9391 - Remove 500-character limit for custom link text &amp; URL fields</li> <li>#9536 - Track API token usage times</li> <li>#9582 - Enable assigning config contexts based on device location</li> </ul>"},{"location":"release-notes/version-3.3/#bug-fixes-from-beta2","title":"Bug Fixes (from Beta2)","text":"<ul> <li>#9758 - Display parent object of connected termination</li> <li>#9900 - Pre-populate site &amp; rack fields for cable connection form</li> <li>#9938 - Exclude virtual interfaces from terminations list when connecting a cable</li> <li>#9939 - Fix list of next nodes for split paths under trace view</li> </ul>"},{"location":"release-notes/version-3.3/#plugins-api","title":"Plugins API","text":"<ul> <li>#9075 - Introduce <code>AbortRequest</code> exception for cleanly interrupting object mutations</li> <li>#9092 - Add support for <code>ObjectChildrenView</code> generic view</li> <li>#9228 - Subclasses of <code>ChangeLoggingMixin</code> can override <code>serialize_object()</code> to control JSON serialization for change logging</li> <li>#9414 - Add <code>clone()</code> method to NetBoxModel for copying instance attributes</li> <li>#9647 - Introduce <code>customfield_value</code> template tag</li> </ul>"},{"location":"release-notes/version-3.3/#other-changes","title":"Other Changes","text":"<ul> <li>#9261 - <code>NetBoxTable</code> no longer automatically clears pre-existing calls to <code>prefetch_related()</code> on its queryset</li> <li>#9434 - Enabled <code>django-rich</code> test runner for more user-friendly output</li> <li>#9903 - Implement a mechanism for automatically updating denormalized fields</li> </ul>"},{"location":"release-notes/version-3.3/#rest-api-changes","title":"REST API Changes","text":"<ul> <li>List results can now be ordered by field, by appending <code>?ordering={fieldname}</code> to the query. Multiple fields can be specified by separating the field names with a comma, e.g. <code>?ordering=site,name</code>. To invert the ordering, prepend a hyphen to the field name, e.g. <code>?ordering=-name</code>.</li> <li>Added the following endpoints:<ul> <li><code>/api/dcim/cable-terminations/</code></li> <li><code>/api/ipam/l2vpns/</code></li> <li><code>/api/ipam/l2vpn-terminations/</code></li> </ul> </li> <li>circuits.Circuit<ul> <li>Added optional <code>termination_date</code> field</li> </ul> </li> <li>circuits.CircuitTermination<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> <li>Added <code>custom_fields</code> and <code>tags</code> fields</li> </ul> </li> <li>dcim.Cable<ul> <li><code>termination_a_type</code> has been renamed to <code>a_terminations_type</code></li> <li><code>termination_b_type</code> has been renamed to <code>b_terminations_type</code></li> <li><code>termination_a</code> renamed to <code>a_terminations</code> and now returns a list of objects</li> <li><code>termination_b</code> renamed to <code>b_terminations</code> and now returns a list of objects</li> <li><code>termination_a_id</code> has been removed</li> <li><code>termination_b_id</code> has been removed</li> </ul> </li> <li>dcim.ConsolePort<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.ConsoleServerPort<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.Device<ul> <li>The <code>position</code> field has been changed from an integer to a decimal</li> </ul> </li> <li>dcim.DeviceType<ul> <li>The <code>u_height</code> field has been changed from an integer to a decimal</li> </ul> </li> <li>dcim.FrontPort<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.Interface<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> <li>Added the optional <code>poe_mode</code> and <code>poe_type</code> fields</li> <li>Added the <code>l2vpn_termination</code> read-only field</li> </ul> </li> <li>dcim.InterfaceTemplate<ul> <li>Added the optional <code>poe_mode</code> and <code>poe_type</code> fields</li> </ul> </li> <li>dcim.Location<ul> <li>Added required <code>status</code> field (default value: <code>active</code>)</li> </ul> </li> <li>dcim.PowerOutlet<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.PowerFeed<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.PowerPort<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>dcim.Rack<ul> <li>The <code>elevation</code> endpoint now includes half-height rack units, and utilizes decimal values for the ID and name of each unit</li> </ul> </li> <li>dcim.RearPort<ul> <li><code>link_peer</code> has been renamed to <code>link_peers</code> and now returns a list of objects</li> <li><code>link_peer_type</code> has been renamed to <code>link_peers_type</code></li> <li><code>connected_endpoint</code> has been renamed to <code>connected_endpoints</code> and now returns a list of objects</li> <li><code>connected_endpoint_type</code> has been renamed to <code>connected_endpoints_type</code></li> <li><code>connected_endpoint_reachable</code> has been renamed to <code>connected_endpoints_reachable</code></li> </ul> </li> <li>extras.ConfigContext<ul> <li>Added the <code>locations</code> many-to-many field to track the assignment of ConfigContexts to Locations</li> </ul> </li> <li>extras.CustomField<ul> <li>Added <code>group_name</code> and <code>ui_visibility</code> fields</li> </ul> </li> <li>ipam.IPAddress<ul> <li>The <code>nat_inside</code> field no longer requires a unique value</li> <li>The <code>nat_outside</code> field has changed from a single IP address instance to a list of multiple IP addresses</li> </ul> </li> <li>ipam.VLAN<ul> <li>Added the <code>l2vpn_termination</code> read-only field</li> </ul> </li> <li>users.Token<ul> <li>Added the <code>allowed_ips</code> array field</li> <li>Added the read-only <code>last_used</code> datetime field</li> </ul> </li> <li>virtualization.Cluster<ul> <li>Added required <code>status</code> field (default value: <code>active</code>)</li> </ul> </li> <li>virtualization.VirtualMachine<ul> <li>The <code>site</code> field is now directly writable (rather than being inferred from the assigned cluster)</li> <li>The <code>cluster</code> field is now optional. A virtual machine must have a site and/or cluster assigned.</li> <li>Added the optional <code>device</code> field</li> <li>Added the <code>l2vpn_termination</code> read-only field</li> </ul> </li> <li>wireless.WirelessLAN<ul> <li>Added <code>tenant</code> field</li> </ul> </li> <li>wireless.WirelessLink<ul> <li>Added <code>tenant</code> field</li> </ul> </li> </ul>"},{"location":"release-notes/version-3.4/","title":"NetBox v3.4","text":""},{"location":"release-notes/version-3.4/#v349-2023-04-26","title":"v3.4.9 (2023-04-26)","text":""},{"location":"release-notes/version-3.4/#enhancements","title":"Enhancements","text":"<ul> <li>#10987 - Show peer racks as a dropdown list under rack view</li> <li>#11386 - Introduce <code>CSRF_COOKIE_SECURE</code>, <code>SECURE_SSL_REDIRECT</code>, and <code>SESSION_COOKIE_SECURE</code> configuration parameters</li> <li>#11623 - Hide PSK strings under wireless LAN &amp; link views</li> <li>#12205 - Sanitize rendered custom links to mitigate malicious links</li> <li>#12226 - Enable setting user name &amp; email values via remote authenticate headers</li> <li>#12337 - Enable anonymized reporting of census data</li> </ul>"},{"location":"release-notes/version-3.4/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>#11383 - Fix ordering of global search results by object type</li> <li>#11902 - Fix import of inventory items for devices with duplicated names</li> <li>#12238 - Improve error message for API token IP prefix validation failures</li> <li>#12255 - Restore the ability to move inventory items among devices</li> <li>#12270 - Fix pre-population of list values when creating a saved filter</li> <li>#12296 - Fix \"mark connected\" form field for bulk editing front &amp; rear ports</li> </ul>"},{"location":"release-notes/version-3.4/#v348-2023-04-12","title":"v3.4.8 (2023-04-12)","text":""},{"location":"release-notes/version-3.4/#enhancements_1","title":"Enhancements","text":"<ul> <li>#10414 - Enable general purpose image attachments for device types</li> <li>#10600 - Allow custom object fields to reference a user or group</li> <li>#11015 - Remove unit from commit rate column header in circuits table</li> <li>#11431 - Disallow changing custom field type after creation</li> <li>#11453 - Display a warning banner when <code>DEBUG</code> is enabled</li> <li>#12007 - Enable filtering of VM Interfaces by assigned VLAN</li> <li>#12095 - Specify UTF-8 encoding for default export template MIME type</li> <li>#12207 - Introduce the <code>grant_token</code> permission for controlling the creation of API tokens on behalf of other users</li> </ul>"},{"location":"release-notes/version-3.4/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>#10221 - Validate generic foreign key relations assigned via REST API requests</li> <li>#11432 - Prevent existing components &amp; component templates from being reassigned to different devices/device types via the REST API</li> <li>#11454 - Raise validation error if generic foreign key assignment does not specify both object type and ID</li> <li>#11746 - Fix cleanup of object data when deleting a custom field</li> <li>#12011 - Fix KeyError exception when attempting to add module bays in bulk</li> <li>#12040 - Display relevant UI tab upon bulk import validation failure</li> <li>#12074 - Fix the automatic assignment of racks to devices via the REST API</li> <li>#12084 - Fix exception when attempting to create a saved filter for applied filters</li> <li>#12087 - Fix bulk editing of many-to-many relationships</li> <li>#12117 - Hide clone button for objects with no clonable attributes</li> <li>#12118 - Fix instantiation of nested inventory item templates when creating a device</li> <li>#12184 - Fix filtered bulk deletion for various models</li> <li>#12190 - Fix form layout for plugin textarea fields</li> <li>#12227 - Fix tenant assignment on bulk import of L2VPNs</li> </ul>"},{"location":"release-notes/version-3.4/#v347-2023-03-28","title":"v3.4.7 (2023-03-28)","text":""},{"location":"release-notes/version-3.4/#enhancements_2","title":"Enhancements","text":"<ul> <li>#11645 - Automatically set the scheduled time when executing reports/scripts at a recurring interval</li> <li>#11833 - Add fieldset support for custom script forms</li> <li>#11973 - Use SSID for representing wireless links, if set</li> <li>#11977 - Support designating multiple backends via <code>REMOTE_AUTH_BACKEND</code> config parameter</li> <li>#11990 - Improve error reporting for duplicate CSV column headings</li> <li>#11991 - Enable VDC assignment during bulk import/edit of interfaces</li> </ul>"},{"location":"release-notes/version-3.4/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>#11914 - Include parameters when exporting saved filters</li> <li>#11933 - Fix cloning of saved filters</li> <li>#11984 - Remove erroneous 802.3az PoE type</li> <li>#11979 - Correct URL for tags in route targets list</li> <li>#12008 - Enable cloning of export templates</li> <li>#12029 - Restore missing description field on virtual chassis form</li> <li>#12038 - Correct display of zero values for virtual chassis member priority</li> <li>#12048 - Enable cloning of tags</li> <li>#12058 - Enable cloning of config contexts</li> </ul>"},{"location":"release-notes/version-3.4/#v346-2023-03-13","title":"v3.4.6 (2023-03-13)","text":""},{"location":"release-notes/version-3.4/#enhancements_3","title":"Enhancements","text":"<ul> <li>#10058 - Enable searching for devices/VMs by primary IP address</li> <li>#11011 - Add ability to toggle visibility of virtual interfaces under device view</li> <li>#11294 - Enable live preview of Markdown content</li> <li>#11807 - Restore default page size when navigating between views</li> <li>#11817 - Add <code>connected_endpoints</code> field to GraphQL API for cabled objects</li> <li>#11851 - Include IP version in GraphQL API representations of aggregates, prefixes, and IP addresses</li> <li>#11862 - Add Cisco StackWise 1T interface type</li> <li>#11871 - Add IEEE 802.3az PoE type for interfaces</li> <li>#11929 - Strip whitespace from CSV headers prior to validation</li> </ul>"},{"location":"release-notes/version-3.4/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>#11470 - Avoid raising exception when filtering IPs by an invalid address</li> <li>#11565 - Apply custom field defaults to IP address created during FHRP group creation</li> <li>#11631 - Fix filtering changelog &amp; journal entries by multiple content type IDs</li> <li>#11758 - Support non-URL-safe characters in plugin menu titles</li> <li>#11796 - When importing devices, restrict rack by location only if the location field is specified</li> <li>#11819 - Fix filtering of cable terminations by object type</li> <li>#11850 - Fix loading of CSV files containing a byte order mark</li> <li>#11903 - Fix escaping of return URL values for action buttons in tables</li> <li>#11927 - Correct loading of plugin resources with custom paths</li> </ul>"},{"location":"release-notes/version-3.4/#v345-2023-02-21","title":"v3.4.5 (2023-02-21)","text":""},{"location":"release-notes/version-3.4/#enhancements_4","title":"Enhancements","text":"<ul> <li>#11110 - Add <code>start_address</code> and <code>end_address</code> filters for IP ranges</li> <li>#11592 - Introduce <code>FILE_UPLOAD_MAX_MEMORY_SIZE</code> configuration parameter</li> <li>#11685 - Match on containing prefixes and aggregates when querying for IP addresses using global search</li> <li>#11787 - Upgrade script will automatically rebuild missing search cache</li> </ul>"},{"location":"release-notes/version-3.4/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>#11032 - Fix false custom validation errors during component creation</li> <li>#11226 - Ensure scripts and reports within submodules are automatically reloaded</li> <li>#11459 - Enable evaluating null values in custom validation rules</li> <li>#11473 - GraphQL requests specifying an invalid filter should return an empty queryset</li> <li>#11582 - Ensure form validation errors are displayed when adding virtual chassis members</li> <li>#11601 - Fix partial matching of start/end addresses for IP range search</li> <li>#11683 - Fix CSV header attribute detection when auto-detecting import format</li> <li>#11711 - Fix CSV import for multiple-object custom fields</li> <li>#11723 - Circuit terminations should link to their associated circuits (rather than site or provider network)</li> <li>#11775 - Skip checking for old search cache records when creating a new object</li> <li>#11786 - List only applicable object types in form widget when filtering custom fields</li> </ul>"},{"location":"release-notes/version-3.4/#v344-2023-02-02","title":"v3.4.4 (2023-02-02)","text":""},{"location":"release-notes/version-3.4/#enhancements_5","title":"Enhancements","text":"<ul> <li>#10762 - Permit selection custom fields to have only one choice</li> <li>#11152 - Introduce AbortScript exception to elegantly abort scripts</li> <li>#11554 - Add module types count to manufacturers list</li> <li>#11585 - Add IP address filters for services</li> <li>#11598 - Add buttons to easily switch between rack list and elevations views</li> </ul>"},{"location":"release-notes/version-3.4/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>#11267 - Avoid catching ImportErrors when loading plugin resources</li> <li>#11487 - Remove \"set null\" option from non-writable custom fields during bulk edit</li> <li>#11491 - Show edit/delete buttons in user tokens table</li> <li>#11528 - Permit import of devices using uploaded file</li> <li>#11555 - Avoid inadvertent interpretation of search query as regular expression under global search (previously #11516)</li> <li>#11562 - Correct ordering of virtual chassis interfaces with duplicate names</li> <li>#11574 - Fix exception when attempting to schedule reports/scripts</li> <li>#11620 - Correct available filter choices for interface PoE type</li> <li>#11635 - Pre-populate assigned VRF when following \"first available IP\" link from prefix view</li> <li>#11650 - Display error message when attempting to create device component with duplicate name</li> </ul>"},{"location":"release-notes/version-3.4/#v343-2023-01-20","title":"v3.4.3 (2023-01-20)","text":""},{"location":"release-notes/version-3.4/#enhancements_6","title":"Enhancements","text":"<ul> <li>#9996 - Introduce <code>CA_CERT_PATH</code> parameter to define SSL CA path for Redis servers</li> <li>#10486 - Add a cable edit button for connected components in component lists</li> <li>#11118 - Add L2VPN filters for VLANs and interfaces</li> <li>#11150 - Add primary IPv4/v6 address filters for devices</li> <li>#11227 - Add 800GE interface types</li> <li>#11228 - List both devices &amp; VMs under device role view</li> <li>#11245 - Enable export templates for journal entries</li> <li>#11371 - Introduce additional 100M Ethernet interface types</li> </ul>"},{"location":"release-notes/version-3.4/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>#10201 - Fix AssertionError exception when removing some terminations from an existing cable</li> <li>#11210 - Fix ValueError exception when attempting to bulk import cables attached to occupied terminations</li> <li>#11340 - Avoid flagging cable termination changes erroneously</li> <li>#11379 - Fix TypeError exception when bulk editing custom date fields</li> <li>#11384 - Correct current time display on script &amp; report forms</li> <li>#11402 - Avoid LookupError exception when running scripts with commit disabled</li> <li>#11403 - Fix exception when scheduling a job in the past</li> <li>#11416 - Avoid AttributeError exception when deleting a cabled circuit termination</li> <li>#11433 - Avoid AttributeError exception when generating API schema for views with custom schema</li> <li>#11438 - Fix deletion of scheduled job using non-default queues</li> <li>#11444 - Adding/removing a device from a device bay should record a pre-change snapshot on the device bay</li> <li>#11467 - Correct count on interfaces tab when viewing a VC master device</li> <li>#11483 - Apply configured formatting to custom date fields</li> <li>#11488 - Add missing <code>description</code> fields to several REST API serializers</li> <li>#11497 - Enforce <code>run_script</code> permission when executing scripts via REST API</li> <li>~#11516 - Prevent text highlight utility from interpreting match as regex~</li> <li>#11522 - Correct tag links under contact &amp; tenant list views</li> <li>#11537 - Remove obsolete \"Connection\" column from power feeds table</li> <li>#11544 - Catch ValidationError exception when filtering by invalid MAC address</li> </ul>"},{"location":"release-notes/version-3.4/#v342-2023-01-03","title":"v3.4.2 (2023-01-03)","text":""},{"location":"release-notes/version-3.4/#enhancements_7","title":"Enhancements","text":"<ul> <li>#9285 - Enable specifying assigned component during bulk import of inventory items</li> <li>#10700 - Match device name when using modules quick search</li> <li>#11121 - Add VM resource totals to cluster view</li> <li>#11156 - Enable selecting assigned component when editing inventory item in UI</li> <li>#11223 - <code>reindex</code> management command should accept app label without model name</li> <li>#11244 - Add controls for saved filters to rack elevations list</li> <li>#11248 - Fix database migration when plugin with search indexer is enabled</li> <li>#11259 - Add support for Redis username configuration</li> </ul>"},{"location":"release-notes/version-3.4/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>#11280 - Fix errant newlines when exporting interfaces with multiple IP addresses assigned</li> <li>#11290 - Correct reporting of scheduled job duration</li> <li>#11232 - Enable partial &amp; regular expression matching for non-string types in global search</li> <li>#11342 - Correct cable trace URL under \"connection\" tab for device components</li> <li>#11345 - Fix form validation for bulk import of modules</li> </ul>"},{"location":"release-notes/version-3.4/#v341-2022-12-16","title":"v3.4.1 (2022-12-16)","text":""},{"location":"release-notes/version-3.4/#enhancements_8","title":"Enhancements","text":"<ul> <li>#9971 - Enable ordering of nested group models by name</li> <li>#11214 - Introduce the <code>DEFAULT_LANGUAGE</code> configuration parameter</li> </ul>"},{"location":"release-notes/version-3.4/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>#11175 - Fix cloning of fields containing special characters</li> <li>#11178 - Pressing enter in quick search box should not trigger bulk operations</li> <li>#11184 - Correct visualization of cable path which splits across multiple circuit terminations</li> <li>#11185 - Fix TemplateSyntaxError when viewing custom script results</li> <li>#11189 - Fix localization of dates &amp; numbers</li> <li>#11205 - Correct cloning behavior for recursively-nested models</li> <li>#11206 - Avoid clearing assigned groups if <code>REMOTE_AUTH_DEFAULT_GROUPS</code> is invalid</li> </ul>"},{"location":"release-notes/version-3.4/#v340-2022-12-14","title":"v3.4.0 (2022-12-14)","text":"<p>PostgreSQL 11 Required</p> <p>NetBox v3.4 requires PostgreSQL 11 or later.</p>"},{"location":"release-notes/version-3.4/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Device and virtual machine names are no longer case-sensitive. Attempting to create e.g. \"device1\" and \"DEVICE1\" within the same site will raise a validation error.</li> <li>The <code>asn</code>, <code>noc_contact</code>, <code>admin_contact</code>, and <code>portal_url</code> fields have been removed from the provider model. Please replicate any data remaining in these fields to the ASN and contact models introduced in NetBox v3.1 prior to upgrading.</li> <li>The <code>content_type</code> fields on the CustomLink and ExportTemplate models have been renamed to <code>content_types</code> and now support the assignment of multiple content types per object.</li> <li>Within the Python API, the <code>cf</code> property on an object with custom fields now returns deserialized values. For example, a custom field referencing an object will return the object instance rather than its numeric ID. To access the raw serialized values, reference the object's <code>custom_field_data</code> attribute instead.</li> <li>The <code>NetBoxModelCSVForm</code> class has been renamed to <code>NetBoxModelImportForm</code>. Backward compatability with the previous name has been retained for this release, but will be dropped in NetBox v3.5.</li> </ul>"},{"location":"release-notes/version-3.4/#new-features","title":"New Features","text":""},{"location":"release-notes/version-3.4/#new-global-search-10560","title":"New Global Search (#10560)","text":"<p>NetBox's global search functionality has been completely overhauled and replaced by a new cache-based lookup. This new implementation provides a much faster, more intelligent search capability. Results are returned in order of precedence regardless of object type, and matching field values are highlighted in the results. Additionally, custom field values are now included in global search results (where enabled). Plugins can also register their own models with the new global search engine.</p>"},{"location":"release-notes/version-3.4/#virtual-device-contexts-7854","title":"Virtual Device Contexts (#7854)","text":"<p>A new model representing virtual device contexts (VDCs) has been added. VDCs are logical partitions of resources within a device that can be managed independently. A VDC is created within a device and may have device interfaces assigned to it. An interface can be allocated to any number of VDCs on its device.</p>"},{"location":"release-notes/version-3.4/#saved-filters-9623","title":"Saved Filters (#9623)","text":"<p>Object lists can be filtered by a variety of different fields and characteristics. Applied filters can now be saved for reuse. For example, the query string</p> <pre><code>?status=active&amp;region_id=12&amp;tenant=acme\n</code></pre> <p>can be saved and applied to future queries as</p> <pre><code>?filter=my-custom-filter\n</code></pre> <p>Saved filters can be kept private, or shared among NetBox users. They can be applied to both UI and REST API searches.</p>"},{"location":"release-notes/version-3.4/#jsonyaml-bulk-imports-4347","title":"JSON/YAML Bulk Imports (#4347)","text":"<p>NetBox's bulk import feature, which was previously limited to CSV-formatted data for most types of objects, has been extended to accept data formatted in JSON or YAML as well. This enables users to directly import objects from a variety of sources without needing to first convert data to CSV. NetBox will attempt to automatically determine the format of import data if not specified by the user.</p>"},{"location":"release-notes/version-3.4/#update-existing-objects-via-bulk-import-7961","title":"Update Existing Objects via Bulk Import (#7961)","text":"<p>NetBox's CSV-based bulk import functionality has been extended to support also modifying existing objects. When an <code>id</code> column is present in the import form, it will be used to infer the object to be modified, rather than a new object being created. All fields (columns) are optional when modifying existing objects.</p>"},{"location":"release-notes/version-3.4/#scheduled-reports-scripts-8366","title":"Scheduled Reports &amp; Scripts (#8366)","text":"<p>Reports and custom scripts can now be scheduled for execution at a desired future time. Background scheduling is handled entirely by the existing RQ workers; there is no need to configure additional tasks to support scheduled jobs. When creating a scheduled job, the user may optionally specify an interval at which the job will run repeatedly (e.g. every 24 hours).</p>"},{"location":"release-notes/version-3.4/#api-for-staged-changes-10851","title":"API for Staged Changes (#10851)","text":"<p>This release introduces a new programmatic API that enables plugins and custom scripts to prepare changes in NetBox without actually committing them to the active database. To stage changes, create and activate a branch using the <code>checkout()</code> context manager. Any changes made within this context will be captured, recorded, and rolled back for future use. Once ready, a branch can be applied to the active database by calling <code>merge()</code>. </p> <p>Experimental Feature</p> <p>This feature is still under active development and considered experimental in nature. Its use in production is strongly discouraged at this time.</p>"},{"location":"release-notes/version-3.4/#enhancements_9","title":"Enhancements","text":"<ul> <li>#815 - Enable specifying terminations when bulk importing circuits</li> <li>#6003 - Enable the inclusion of custom field values in global search</li> <li>#7376 - Enable the assignment of tags during CSV import</li> <li>#8245 - Enable GraphQL filtering of related objects</li> <li>#8274 - Enable associating a custom link with multiple object types</li> <li>#8485 - Enable journaling for all organizational models</li> <li>#8853 - Introduce the <code>ALLOW_TOKEN_RETRIEVAL</code> config parameter to restrict the display of API tokens</li> <li>#9249 - Device and virtual machine names are no longer case-sensitive</li> <li>#9478 - Add <code>link_peers</code> field to GraphQL types for cabled objects</li> <li>#9654 - Add <code>weight</code> field to racks, device types, and module types</li> <li>#9817 - Add <code>assigned_object</code> field to GraphQL type for IP addresses and L2VPN terminations</li> <li>#9832 - Add <code>mounting_depth</code> field to rack model</li> <li>#9892 - Add optional <code>name</code> field for FHRP groups</li> <li>#10348 - Add decimal custom field type</li> <li>#10371 - Add <code>status</code> field for modules</li> <li>#10545 - Standardize the use of <code>description</code> and <code>comments</code> fields on all primary models</li> <li>#10556 - Include a <code>display</code> field in all GraphQL object types</li> <li>#10595 - Add GraphQL relationships for additional generic foreign key fields</li> <li>#10675 - Add <code>max_weight</code> field to track maximum load capacity for racks</li> <li>#10698 - Omit app label from content type in table columns</li> <li>#10710 - Add <code>status</code> field to WirelessLAN</li> <li>#10761 - Enable associating an export template with multiple object types</li> <li>#10945 - Enable recurring execution of scheduled reports &amp; scripts</li> <li>#11022 - Introduce <code>QUEUE_MAPPINGS</code> configuration parameter to allow customization of background task prioritization</li> </ul>"},{"location":"release-notes/version-3.4/#bug-fixes-from-v34-beta1","title":"Bug Fixes (from v3.4-beta1)","text":"<ul> <li>#10946 - Fix AttributeError exception when viewing a device with a primary IP and no platform assigned</li> <li>#10948 - Linkify primary IPs for VDCs</li> <li>#10950 - Fix validation of VDC primary IPs</li> <li>#10957 - Add missing VDCs column to interface tables</li> <li>#10973 - Fix device links in VDC table</li> <li>#10980 - Fix view tabs for plugin objects</li> <li>#10982 - Catch <code>NoReverseMatch</code> exception when rendering tabs with no registered URL</li> <li>#10984 - Fix navigation menu expansion for plugin menus comprising multiple words</li> <li>#11000 - Improve validation of YAML-formatted import data</li> <li>#11046 - Fix exception when caching very large field values for search</li> <li>#11154 - Index VM interface MAC address and MTU for global search</li> <li>#11171 - Fix querying of related objects under GraphQL API</li> </ul>"},{"location":"release-notes/version-3.4/#plugins-api","title":"Plugins API","text":"<ul> <li>#4751 - Enable embedding custom content on core list views via <code>list_buttons()</code> method</li> <li>#8927 - Enable inclusion of plugin models in global search via <code>SearchIndex</code></li> <li>#9071 - Enable plugins to register top-level navigation menus using PluginMenu</li> <li>#9072 - Enable registration of tabbed plugin views for core NetBox models</li> <li>#9880 - Enable plugins to install and register other Django apps via <code>django_apps</code> attribute</li> <li>#9887 - Inspect <code>docs_url</code> property to determine link to model documentation</li> <li>#10314 - Move <code>clone()</code> method from NetBoxModel to CloningMixin</li> <li>#10543 - Introduce <code>get_plugin_config()</code> utility function</li> <li>#10739 - Introduce <code>get_queryset()</code> method on generic views</li> </ul>"},{"location":"release-notes/version-3.4/#other-changes","title":"Other Changes","text":"<ul> <li>#9045 - Remove legacy ASN field from provider model</li> <li>#9046 - Remove legacy contact fields from provider model</li> <li>#10052 - The <code>cf</code> attribute on objects now returns deserialized custom field data</li> <li>#10358 - Raise minimum required PostgreSQL version from 10 to 11</li> <li>#10694 - Emit the <code>post_save</code> signal when creating device components in bulk</li> <li>#10697 - Move application registry into core app</li> <li>#10699 - Remove unused custom <code>import_object()</code> function</li> <li>#10781 - Add support for Python v3.11</li> <li>#10816 - Pass the current request as context when instantiating a FilterSet within UI views</li> <li>#10820 - Switch timezone library from pytz to zoneinfo</li> <li>#10821 - Enable data localization</li> </ul>"},{"location":"release-notes/version-3.4/#rest-api-changes","title":"REST API Changes","text":"<ul> <li>Added the <code>/api/dcim/virtual-device-contexts/</code> endpoint</li> <li>circuits.provider<ul> <li>Removed the <code>asn</code>, <code>noc_contact</code>, <code>admin_contact</code>, and <code>portal_url</code> fields</li> <li>Added a <code>description</code> field</li> </ul> </li> <li>dcim.Cable<ul> <li>Added <code>description</code> and <code>comments</code> fields</li> </ul> </li> <li>dcim.Device<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>dcim.DeviceType<ul> <li>Added <code>description</code>, <code>weight</code>, and <code>weight_unit</code> fields</li> </ul> </li> <li>dcim.Module<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>dcim.Interface<ul> <li>Added the <code>vdcs</code> field</li> </ul> </li> <li>dcim.Module<ul> <li>Added a required <code>status</code> field</li> </ul> </li> <li>dcim.ModuleType<ul> <li>Added <code>description</code>, <code>weight</code>, and <code>weight_unit</code> fields</li> </ul> </li> <li>dcim.PowerFeed<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>dcim.PowerPanel<ul> <li>Added <code>description</code> and <code>comments</code> fields</li> </ul> </li> <li>dcim.Rack<ul> <li>Added <code>description</code>, <code>mounting_depth</code>, <code>weight</code>, <code>max_weight</code>, and <code>weight_unit</code> fields</li> </ul> </li> <li>dcim.RackReservation<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>dcim.VirtualChassis<ul> <li>Added <code>description</code> and <code>comments</code> fields</li> </ul> </li> <li>extras.CustomField<ul> <li>Added a <code>search_weight</code> field</li> </ul> </li> <li>extras.CustomLink<ul> <li>Renamed <code>content_type</code> field to <code>content_types</code></li> </ul> </li> <li>extras.ExportTemplate<ul> <li>Renamed <code>content_type</code> field to <code>content_types</code></li> </ul> </li> <li>extras.JobResult<ul> <li>Added <code>interval</code>, <code>scheduled</code>, and <code>started</code> fields</li> </ul> </li> <li>ipam.Aggregate<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.ASN<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.FHRPGroup<ul> <li>Added <code>name</code> and <code>comments</code> fields</li> </ul> </li> <li>ipam.IPAddress<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.IPRange<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.L2VPN<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.Prefix<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.RouteTarget<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.Service<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.ServiceTemplate<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.VLAN<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>ipam.VRF<ul> <li>Added a <code>comments</code> field</li> </ul> </li> <li>tenancy.Contact<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>virtualization.Cluster<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>virtualization.VirtualMachine<ul> <li>Added a <code>description</code> field</li> </ul> </li> <li>wireless.WirelessLAN<ul> <li>Added a required <code>status</code> choice field</li> <li>Added a <code>comments</code> field</li> </ul> </li> <li>wireless.WirelessLink<ul> <li>Added a <code>comments</code> field</li> </ul> </li> </ul>"},{"location":"release-notes/version-3.4/#graphql-api-changes","title":"GraphQL API Changes","text":"<ul> <li>All object types now include a <code>display</code> field</li> <li>All cabled object types now include a <code>link_peers</code> field</li> <li>Add a <code>contacts</code> relationship for all relevant models</li> <li>dcim.Cable<ul> <li>Add A/B terminations fields</li> </ul> </li> <li>dcim.CableTermination<ul> <li>Add <code>termination</code> field</li> </ul> </li> <li>dcim.InventoryItem<ul> <li>Add <code>component</code> field</li> </ul> </li> <li>dcim.InventoryItemTemplate<ul> <li>Add <code>component</code> field</li> </ul> </li> <li>dcim.Rack<ul> <li>Add <code>mounting_depth</code> field</li> </ul> </li> <li>ipam.FHRPGroupAssignment<ul> <li>Add <code>interface</code> field</li> </ul> </li> <li>ipam.IPAddress<ul> <li>Add <code>assigned_object</code> field</li> </ul> </li> <li>ipam.L2VPNTermination<ul> <li>Add <code>assigned_object</code> field</li> </ul> </li> <li>ipam.VLANGroupType<ul> <li>Add <code>scope</code> field</li> </ul> </li> </ul>"}]}